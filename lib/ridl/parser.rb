#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
#
# $Id: ad1fffef443194fdfa1052d2eee6850552f94313 $
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6' unless defined?(Racc_Runtime_Version)
    Racc_Runtime_Revision = '$Id: ad1fffef443194fdfa1052d2eee6850552f94313 $' unless defined?(Racc_Runtime_Revision)

    Racc_Runtime_Core_Version_R = '1.4.6' unless defined?(Racc_Runtime_Core_Version_R)
    Racc_Runtime_Core_Revision_R = '$Id: ad1fffef443194fdfa1052d2eee6850552f94313 $'.split[1] unless defined?(Racc_Runtime_Core_Revision_R)
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2] unless defined?(Racc_Runtime_Core_Revision_C)
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c unless defined?(Racc_Main_Parsing_Routine)
      Racc_YY_Parse_Method         = :_racc_yyparse_c unless defined?(Racc_YY_Parse_Method)
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C unless defined?(Racc_Runtime_Core_Version)
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C unless defined?(Racc_Runtime_Core_Revision)
      Racc_Runtime_Type            = 'c' unless defined?(Racc_Runtime_Type)
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb unless defined?(Racc_Main_Parsing_Routine)
      Racc_YY_Parse_Method         = :_racc_yyparse_rb unless defined?(Racc_YY_Parse_Method)
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R unless defined?(Racc_Runtime_Core_Version)
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R unless defined?(Racc_Runtime_Core_Revision)
      Racc_Runtime_Type            = 'ruby' unless defined?(Racc_Runtime_Type)
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"

      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end

require 'ridl/delegate'

module IDL

class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 833)

def parse_type_declarator(type_spec, declarators)
  ret = Array.new
  t = type_spec
  declarators.each do |d|
    case d
    when ::String, IDL::Scanner::Identifier
      ret << [t, d]
    when ::Array # array_declarator -> [identifier, size]
      ret << [IDL::Type::Array.new(t, d[1]), d[0]]
    else
      raise RuntimeError, "unknown declarator: #{d.inspect}"
    end
  end
  ret
end

#attr_accessor :default_namespace, :output
attr_accessor :yydebug
def initialize(params = {})
  @d = ::IDL::Delegator.new(params)
  @params = params
end

alias on_error0 on_error
def on_error(err_tok, err_val, _value)
  begin
    on_error0(err_tok, err_val, _value)
  rescue IDL::ParseError
    raise
  rescue
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
end

def parse(src)
  @scanner = Scanner.new(src, self, @params)
  @d.pre_parse
  begin
    do_parse
  rescue IDL::ParseError
    raise
  rescue
    STDERR.puts "#{$!}\n#{$!.backtrace.join("\n")}" if IDL.verbose_level>0
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
  @d.post_parse
end

def visit_nodes(walker)
  @d.visit_nodes(walker)
end

def pragma_prefix(s)
  @d.pragma_prefix(s)
end

def pragma_version(id, major, minor)
  @d.pragma_version(id, major, minor)
end

def pragma_id(id, repo_id)
  @d.pragma_id(id, repo_id)
end

def handle_pragma(s)
  @d.handle_pragma(s)
end

def is_included?(s)
  @d.is_included?(s)
end

def enter_include(s, fp)
  @d.enter_include(s, fp)
end

def leave_include()
  @d.leave_include
end

def declare_include(s)
  @d.declare_include(s)
end

def define_annotation(*args)
  @d.define_annotation(*args)
end

def next_token
  ret = @scanner.next_token
end

...end parser.ry/module_eval...
##### State transition tables begin ###

clist = [
'-200,442,537,122,541,610,122,291,292,122,-85,65,69,428,71,183,456,541',
'701,535,122,319,536,320,492,703,701,122,315,291,292,249,304,305,306',
'307,308,94,389,390,94,291,292,94,291,292,672,399,436,122,307,308,542',
'543,94,122,700,65,69,73,71,94,55,702,727,542,543,421,261,262,122,420',
'136,137,138,144,148,149,150,151,152,179,180,94,675,180,153,154,180,94',
'261,262,701,53,-89,54,611,612,199,180,184,185,261,262,94,261,262,359',
'360,122,617,122,122,-87,430,249,56,62,136,137,138,144,148,149,150,151',
'152,179,180,431,728,122,153,154,249,432,261,262,266,268,477,198,122',
'94,672,94,94,185,616,237,65,69,73,71,239,55,122,122,196,122,122,122',
'233,232,319,94,320,234,238,240,241,242,243,244,246,247,94,291,292,326',
'327,281,671,307,308,419,53,489,54,122,94,94,464,94,94,94,200,65,69,573',
'71,183,122,122,369,370,483,122,122,56,62,136,137,138,144,148,149,150',
'151,152,179,180,122,94,195,153,154,389,390,261,262,266,268,417,444,122',
'94,94,261,262,185,94,94,65,69,73,71,506,55,122,122,122,507,445,122,122',
'94,122,136,137,138,144,148,149,150,151,152,179,180,94,446,-183,153,154',
'281,447,624,282,623,53,448,54,122,94,94,94,184,185,94,94,449,94,319',
'71,320,122,122,122,122,450,122,122,56,62,136,137,138,144,148,149,150',
'151,152,179,180,122,94,122,153,154,118,117,261,262,266,268,469,122,122',
'94,94,94,94,185,94,94,65,69,73,71,414,55,122,122,92,122,-20,-140,-187',
'94,619,94,623,499,144,148,149,412,151,-196,203,94,94,387,388,326,327',
'281,293,319,294,320,53,508,54,122,94,94,94,94,319,408,320,65,69,193',
'71,183,283,458,284,285,391,392,393,56,62,136,137,138,144,148,149,150',
'151,152,179,180,319,94,320,153,154,359,360,261,262,266,268,339,338,122',
'102,104,103,459,185,336,337,65,69,73,71,460,55,391,392,393,391,392,393',
'389,390,461,136,137,138,144,148,149,150,151,152,179,180,94,387,388,153',
'154,382,383,732,701,407,53,320,54,122,547,548,406,184,185,379,350,65',
'69,405,71,183,571,570,191,122,471,472,190,56,62,136,137,138,144,148',
'149,150,151,152,179,180,189,94,422,153,154,404,188,261,262,266,268,478',
'479,122,187,403,483,94,185,486,402,65,69,120,71,183,207,208,209,210',
'211,212,213,214,215,216,136,137,138,144,148,149,150,151,152,179,180',
'94,119,346,153,154,136,137,138,144,148,149,150,151,152,179,180,401,184',
'185,153,154,122,116,115,498,114,204,113,510,65,69,386,71,183,185,136',
'137,138,144,148,149,150,151,152,179,180,513,514,112,153,154,111,110',
'109,108,94,107,106,105,385,101,100,526,184,185,527,99,529,384,98,544',
'545,122,546,381,527,122,549,550,551,97,553,554,527,65,69,73,71,555,55',
'136,137,138,144,148,149,150,151,152,179,180,556,359,360,153,154,94,122',
'557,558,94,559,237,326,327,281,378,239,184,185,53,561,54,527,346,233',
'232,346,96,565,234,238,240,241,242,243,244,246,247,566,346,94,486,56',
'62,136,137,138,144,148,149,150,151,152,179,180,95,377,572,153,154,376',
'122,261,262,266,268,574,346,576,65,69,73,71,185,55,136,137,138,144,148',
'149,150,151,152,179,180,337,577,364,153,154,375,381,385,386,94,374,373',
'372,371,281,368,273,282,185,53,529,54,91,536,614,615,122,90,89,364,207',
'208,209,210,211,212,213,214,215,216,361,-347,56,62,136,137,138,144,148',
'149,150,151,152,179,180,274,-339,351,153,154,94,631,261,262,266,268',
'237,350,561,349,483,239,122,185,483,634,88,87,637,233,232,86,640,641',
'234,238,240,241,242,243,244,246,247,642,643,136,137,138,144,148,149',
'150,151,152,179,180,94,644,645,153,154,646,647,648,649,650,651,652,122',
'653,654,348,535,184,185,657,65,69,612,71,183,611,529,662,122,663,346',
'667,85,529,535,136,137,138,144,148,149,150,151,152,179,180,94,84,83',
'153,154,535,82,676,677,678,679,680,122,81,696,529,94,657,185,341,340',
'80,79,535,183,623,529,535,122,335,334,333,78,713,714,136,137,138,144',
'148,149,150,151,152,179,180,94,715,716,153,154,136,137,138,144,148,149',
'150,151,152,179,180,94,184,185,153,154,291,292,717,304,305,306,307,308',
'718,719,720,721,722,185,136,137,138,144,148,149,150,151,152,179,180',
'723,724,725,153,154,136,137,138,144,148,149,150,151,152,179,180,203',
'184,185,153,154,77,122,76,275,730,268,731,329,328,65,69,73,71,185,55',
'261,262,734,,,,,,,,,,,,,,,,,,94,,,326,327,281,,,,,53,,54,,,,,122,,,',
',,,,,,,,183,,,,56,62,136,137,138,144,148,149,150,151,152,179,180,,,',
'153,154,94,,261,262,266,268,237,,,,,239,,185,122,,,,,233,232,,,,234',
'238,240,241,242,243,244,246,247,,,136,137,138,144,148,149,150,151,152',
'179,180,122,,94,153,154,,,,65,69,,71,183,,,,122,184,185,,,,,,,,,,,,',
',,,94,,,136,137,138,144,148,149,150,151,152,,,,,94,153,154,,,,,,,,,',
',,,155,,,,136,137,138,144,148,149,150,151,152,179,180,,,,153,154,136',
'137,138,144,148,149,150,151,152,,,,184,185,153,154,,,74,,,,,19,,,,,155',
'32,51,45,65,69,73,71,,55,,28,29,31,,34,,,,36,39,42,,,,,,,,,,47,,,,,',
',,,53,,54,,,,,,,,,,,,122,,,,638,579,,,,56,62,32,51,45,65,69,73,71,,55',
'597,28,29,31,,34,,,,36,39,42,,,94,,,,,,237,47,,,,239,,,,,53,,54,233',
'232,,,,234,238,240,241,242,243,244,246,247,,366,19,,,,56,62,32,51,45',
'65,69,73,71,,55,,28,29,31,,34,,,,36,39,42,,,,,,,,,,47,,,,,,,,,53,,54',
',,,,,,,,,,,,,,,711,579,,,,56,62,32,51,45,65,69,73,71,,55,,28,29,31,',
'34,,,,36,39,42,,,,,,,,,,47,,,,,,,,,53,579,54,,,,,32,51,45,65,69,73,71',
',55,,28,29,31,,34,,56,62,36,39,42,,,,,,,,,,47,,,,,,,,,53,19,54,,,,,32',
'51,45,65,69,73,71,,55,,28,29,31,,34,,56,62,36,39,42,,,,,,,,,,47,,,,',
',,,,53,19,54,,,,,32,51,45,65,69,73,71,,55,,28,29,31,,34,,56,62,36,39',
'42,,,,,,,,,,47,,,,,122,,,,53,579,54,,,,,32,51,45,65,69,73,71,,55,597',
'28,29,31,,34,,56,62,36,39,42,,,94,122,,,,,237,47,,,,239,,,,,53,,54,233',
'232,,,,234,238,240,241,242,243,244,246,247,,122,94,,,,56,62,237,,,,',
'239,,,,,,,,233,232,,,,234,238,240,241,242,243,244,246,247,94,122,,,',
',237,,,,,239,,,,,,,,233,232,,,,234,238,240,241,242,243,244,246,247,',
'122,94,,,,,,237,,,,,239,,,,,,,,233,232,,,,234,238,240,241,242,243,244',
'246,247,94,122,,,,,237,,,,,239,,,,,,,,233,232,,,,234,238,240,241,242',
'243,244,246,247,,122,94,,,,,,237,,,,,239,,,,,,,,233,232,,,,234,238,240',
'241,242,243,244,246,247,94,122,,,,,237,,,,,239,,,,,,,,233,232,,,,234',
'238,240,241,242,243,244,246,247,,122,94,,,,,,237,,,,,239,,,,,,,,233',
'232,,,,234,238,240,241,242,243,244,246,247,94,122,,,,,237,,,,,239,,',
',,,,,233,232,,,,234,238,240,241,242,243,244,246,247,,122,94,,,,,,237',
',,,,239,,,,,,,,233,232,,,,234,238,240,241,242,243,244,246,247,94,122',
',,,,237,,,,,239,,,,,,,,233,232,,,,234,238,240,241,242,243,244,246,247',
',122,94,,,,,,237,,,,,239,,,,,,,,233,232,,,,234,238,240,241,242,243,244',
'246,247,94,122,,,,,237,,,,,239,,122,,,,,,233,232,,,,234,238,240,241',
'242,243,244,246,247,,,94,,,,,,237,,,,,239,94,122,,,,,237,233,232,,,239',
'234,238,240,241,242,243,244,246,247,,,,,238,240,241,242,243,244,246',
'247,,122,94,,,,,,237,,,,,239,,,,,,,,233,232,,,,234,238,240,241,242,243',
'244,246,247,94,,,,,,237,,,,,239,,,,,,,,233,232,,,,234,238,240,241,242',
'243,244,246,247' ]
        racc_action_table = arr = ::Array.new(2201, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'119,295,412,119,412,530,291,109,109,436,96,119,119,286,119,119,309,617',
'664,410,292,119,410,119,355,666,698,464,114,295,295,96,295,295,295,295',
'295,119,519,519,291,286,286,436,309,309,625,252,292,252,309,309,412',
'412,292,285,664,252,252,252,252,464,252,666,698,617,617,281,109,109',
'731,280,119,119,119,119,119,119,119,119,119,119,119,252,625,291,119',
'119,436,285,295,295,699,252,98,252,530,530,73,292,119,119,286,286,731',
'309,309,355,355,341,538,293,294,97,288,98,252,252,252,252,252,252,252',
'252,252,252,252,252,252,289,699,701,252,252,97,290,252,252,252,252,332',
'72,332,341,620,293,294,252,538,341,332,332,332,332,341,332,319,696,71',
'678,677,676,341,341,328,701,328,341,341,341,341,341,341,341,341,341',
'332,113,113,332,332,332,620,113,113,279,332,352,332,352,319,696,319',
'678,677,676,74,352,352,491,352,352,304,305,205,205,491,663,662,332,332',
'332,332,332,332,332,332,332,332,332,332,332,614,352,70,332,332,520,520',
'332,332,332,332,276,297,276,304,305,113,113,332,663,662,276,276,276',
'276,362,276,597,284,554,362,298,550,549,614,548,352,352,352,352,352',
'352,352,352,352,352,352,276,299,274,352,352,276,300,546,276,546,276',
'301,276,361,597,284,554,352,352,550,549,302,548,274,361,274,547,306',
'307,308,303,527,315,276,276,276,276,276,276,276,276,276,276,276,276',
'276,283,361,320,276,276,47,47,276,276,276,276,321,54,321,547,306,307',
'308,276,527,315,321,321,321,321,265,321,53,249,19,561,92,111,115,283',
'545,320,545,361,361,361,361,263,361,275,93,54,321,518,518,321,321,321',
'111,115,111,115,321,365,321,365,53,249,19,561,275,261,275,365,365,68',
'365,365,108,311,108,108,228,228,228,321,321,321,321,321,321,321,321',
'321,321,321,321,321,329,365,329,321,321,191,191,321,321,321,321,148',
'148,99,29,29,29,312,321,138,138,99,99,99,99,313,99,522,522,522,521,521',
'521,227,227,314,365,365,365,365,365,365,365,365,365,365,365,99,226,226',
'365,365,218,218,726,726,260,99,317,99,189,423,423,259,365,365,215,215',
'189,189,258,189,189,487,487,67,622,324,325,66,99,99,99,99,99,99,99,99',
'99,99,99,99,99,64,189,282,99,99,257,63,99,99,99,99,335,339,56,62,256',
'342,622,99,346,255,56,56,52,56,56,370,370,370,370,370,370,370,370,370',
'370,189,189,189,189,189,189,189,189,189,189,189,56,51,354,189,189,622',
'622,622,622,622,622,622,622,622,622,622,254,189,189,622,622,357,46,45',
'360,42,94,41,369,357,357,225,357,357,622,56,56,56,56,56,56,56,56,56',
'56,56,380,382,40,56,56,39,36,35,34,357,33,31,30,224,28,27,395,56,56',
'396,26,409,223,25,413,421,351,422,217,425,120,426,427,433,24,437,438',
'440,120,120,120,120,451,120,357,357,357,357,357,357,357,357,357,357',
'357,452,357,357,357,357,351,540,453,454,120,455,351,120,120,120,214',
'351,357,357,120,465,120,468,473,351,351,474,23,481,351,351,351,351,351',
'351,351,351,351,482,483,540,484,120,120,120,120,120,120,120,120,120',
'120,120,120,120,20,213,488,120,120,212,107,120,120,120,120,494,496,497',
'107,107,107,107,120,107,540,540,540,540,540,540,540,540,540,540,540',
'499,500,507,540,540,211,512,516,517,107,210,209,208,207,107,203,100',
'107,540,107,528,107,18,533,535,536,95,17,16,195,95,95,95,95,95,95,95',
'95,95,95,193,190,107,107,107,107,107,107,107,107,107,107,107,107,107',
'103,188,184,107,107,95,552,107,107,107,107,95,183,560,182,562,95,408',
'107,563,569,15,14,579,95,95,13,582,583,95,95,95,95,95,95,95,95,95,584',
'585,95,95,95,95,95,95,95,95,95,95,95,408,586,587,95,95,588,589,590,591',
'592,593,594,326,595,596,181,600,95,95,601,326,326,608,326,326,609,610',
'611,262,612,157,615,12,618,619,408,408,408,408,408,408,408,408,408,408',
'408,326,11,10,408,408,624,9,626,627,628,635,636,350,8,655,657,262,660',
'408,154,153,7,6,671,350,672,673,675,264,125,124,123,5,683,684,326,326',
'326,326,326,326,326,326,326,326,326,350,685,686,326,326,262,262,262',
'262,262,262,262,262,262,262,262,264,326,326,262,262,112,112,687,112',
'112,112,112,112,688,689,690,691,692,262,350,350,350,350,350,350,350',
'350,350,350,350,693,694,695,350,350,264,264,264,264,264,264,264,264',
'264,264,264,121,350,350,264,264,4,116,3,104,703,264,708,118,117,116',
'116,116,116,264,116,112,112,732,,,,,,,,,,,,,,,,,,116,,,116,116,116,',
',,,116,,116,,,,,383,,,,,,,,,,,,383,,,,116,116,116,116,116,116,116,116',
'116,116,116,116,116,,,,116,116,383,,116,116,116,116,383,,,,,383,,116',
'55,,,,,383,383,,,,383,383,383,383,383,383,383,383,383,,,383,383,383',
'383,383,383,383,383,383,383,383,327,,55,383,383,,,,327,327,,327,327',
',,,216,383,383,,,,,,,,,,,,,,,,327,,,55,55,55,55,55,55,55,55,55,,,,,216',
'55,55,,,,,,,,,,,,,55,,,,327,327,327,327,327,327,327,327,327,327,327',
',,,327,327,216,216,216,216,216,216,216,216,216,,,,327,327,216,216,,',
'1,,,,,1,,,,,216,1,1,1,1,1,1,1,,1,,1,1,1,,1,,,,1,1,1,,,,,,,,,,1,,,,,',
',,,1,,1,,,,,,,,,,,,359,,,,580,580,,,,1,1,580,580,580,580,580,580,580',
',580,580,580,580,580,,580,,,,580,580,580,,,359,,,,,,359,580,,,,359,',
',,,580,,580,359,359,,,,359,359,359,359,359,359,359,359,359,,201,201',
',,,580,580,201,201,201,201,201,201,201,,201,,201,201,201,,201,,,,201',
'201,201,,,,,,,,,,201,,,,,,,,,201,,201,,,,,,,,,,,,,,,,681,681,,,,201',
'201,681,681,681,681,681,681,681,,681,,681,681,681,,681,,,,681,681,681',
',,,,,,,,,681,,,,,,,,,681,654,681,,,,,654,654,654,654,654,654,654,,654',
',654,654,654,,654,,681,681,654,654,654,,,,,,,,,,654,,,,,,,,,654,91,654',
',,,,91,91,91,91,91,91,91,,91,,91,91,91,,91,,654,654,91,91,91,,,,,,,',
',,91,,,,,,,,,91,0,91,,,,,0,0,0,0,0,0,0,,0,,0,0,0,,0,,91,91,0,0,0,,,',
',,,,,,0,,,,,340,,,,0,510,0,,,,,510,510,510,510,510,510,510,,510,510',
'510,510,510,,510,,0,0,510,510,510,,,340,384,,,,,340,510,,,,340,,,,,510',
',510,340,340,,,,340,340,340,340,340,340,340,340,340,,385,384,,,,510',
'510,384,,,,,384,,,,,,,,384,384,,,,384,384,384,384,384,384,384,384,384',
'385,386,,,,,385,,,,,385,,,,,,,,385,385,,,,385,385,385,385,385,385,385',
'385,385,,387,386,,,,,,386,,,,,386,,,,,,,,386,386,,,,386,386,386,386',
'386,386,386,386,386,387,388,,,,,387,,,,,387,,,,,,,,387,387,,,,387,387',
'387,387,387,387,387,387,387,,389,388,,,,,,388,,,,,388,,,,,,,,388,388',
',,,388,388,388,388,388,388,388,388,388,389,390,,,,,389,,,,,389,,,,,',
',,389,389,,,,389,389,389,389,389,389,389,389,389,,391,390,,,,,,390,',
',,,390,,,,,,,,390,390,,,,390,390,390,390,390,390,390,390,390,391,392',
',,,,391,,,,,391,,,,,,,,391,391,,,,391,391,391,391,391,391,391,391,391',
',393,392,,,,,,392,,,,,392,,,,,,,,392,392,,,,392,392,392,392,392,392',
'392,392,392,393,572,,,,,393,,,,,393,,,,,,,,393,393,,,,393,393,393,393',
'393,393,393,393,393,,237,572,,,,,,572,,,,,572,,,,,,,,572,572,,,,572',
'572,572,572,572,572,572,572,572,237,486,,,,,237,,,,,237,,230,,,,,,237',
'237,,,,237,237,237,237,237,237,237,237,237,,,486,,,,,,486,,,,,486,230',
'570,,,,,230,486,486,,,230,486,486,486,486,486,486,486,486,486,,,,,230',
'230,230,230,230,230,230,230,,478,570,,,,,,570,,,,,570,,,,,,,,570,570',
',,,570,570,570,570,570,570,570,570,570,478,,,,,,478,,,,,478,,,,,,,,478',
'478,,,,478,478,478,478,478,478,478,478,478' ]
        racc_action_check = arr = ::Array.new(2201, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1565,  1235,   nil,  1000,   998,   917,   907,   906,   898,   891,
   887,   886,   871,   814,   810,   809,   761,   760,   754,   338,
   697,   nil,   nil,   670,   622,   611,   611,   606,   597,   411,
   600,   594,   nil,   601,   596,   598,   594,   nil,   nil,   593,
   593,   572,   567,   nil,   nil,   565,   567,   308,   nil,   nil,
   nil,   543,   521,   336,   321,  1094,   508,   nil,   nil,   nil,
   nil,   nil,   509,   501,   498,   nil,   481,   480,   299,   nil,
   221,   152,   138,    92,   196,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1519,   343,   320,   568,   755,     7,   110,    91,   415,
   747,   nil,   nil,   784,   997,   nil,   nil,   704,   364,   -25,
   nil,   344,   922,   145,     4,   345,   995,  1002,  1001,    -3,
   618,   955,   nil,   867,   866,   910,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   351,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   342,   nil,
   nil,   nil,   nil,   900,   899,   nil,   nil,   865,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   850,   798,   795,   785,   nil,   nil,   nil,   788,   462,
   690,   326,   nil,   729,   nil,   758,   nil,   nil,   nil,   nil,
   nil,  1363,   nil,   744,   nil,   196,   nil,   742,   741,   740,
   739,   734,   703,   699,   658,   468,  1142,   616,   452,   nil,
   nil,   nil,   nil,   562,   552,   523,   399,   382,   331,   nil,
  2060,   nil,   nil,   nil,   nil,   nil,   nil,  2013,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   337,
   nil,   nil,    43,   nil,   562,   519,   514,   504,   476,   469,
   462,   287,   863,   311,   909,   334,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   268,   356,   229,   nil,   nil,   183,
    69,    61,   497,   309,   244,    49,     9,   nil,   112,   127,
   133,     0,    14,   105,   106,    -3,   nil,   232,   251,   268,
   273,   278,   288,   297,   196,   197,   290,   291,   292,    12,
   nil,   387,   423,   431,   441,   295,   nil,   440,   nil,   150,
   311,   322,   nil,   nil,   483,   484,   847,  1126,   140,   384,
   nil,   nil,   136,   nil,   nil,   459,   nil,   nil,   nil,   436,
  1605,   103,   508,   nil,   nil,   nil,   429,   nil,   nil,   nil,
   893,   614,   183,   nil,   544,    20,   nil,   563,   nil,  1293,
   548,   276,   243,   nil,   nil,   369,   nil,   nil,   nil,   573,
   517,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   588,   nil,   589,  1046,  1640,  1673,  1708,  1741,  1776,  1809,
  1844,  1877,  1912,  1945,   nil,   563,   604,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   801,   609,
   -80,   nil,   -45,   612,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   573,   575,   443,   nil,   614,   598,   598,   nil,   nil,
   nil,   nil,   nil,   621,   nil,   nil,     3,   623,   604,   nil,
   622,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   630,   643,   650,   651,   653,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   660,   nil,   nil,   662,   nil,
   nil,   nil,   nil,   666,   669,   nil,   nil,   nil,  2128,   nil,
   nil,   669,   679,   682,   599,   nil,  2048,   473,   697,   nil,
   nil,   197,   nil,   nil,   713,   nil,   710,   693,   nil,   658,
   689,   nil,   nil,   nil,   nil,   nil,   nil,   731,   nil,   nil,
  1611,   nil,   735,   nil,   nil,   nil,   687,   687,   306,   -21,
   168,   377,   374,   nil,   nil,   nil,   nil,   294,   749,   nil,
    -4,   nil,   nil,   656,   nil,   713,   714,   nil,   101,   nil,
   649,   nil,   nil,   nil,   nil,   303,   229,   289,   251,   249,
   248,   nil,   790,   nil,   245,   nil,   nil,   nil,   nil,   nil,
   794,   339,   796,   800,   nil,   nil,   nil,   nil,   nil,   718,
  2095,   nil,  1980,   nil,   nil,   nil,   nil,   nil,   nil,   807,
  1299,   nil,   815,   816,   826,   827,   840,   841,   844,   845,
   846,   847,   848,   849,   850,   852,   852,   243,   nil,   nil,
   758,   851,   nil,   nil,   nil,   nil,   nil,   nil,   762,   766,
   861,   822,   824,   nil,   216,   821,   nil,   -32,   868,   776,
   135,   nil,   478,   nil,   793,    37,   867,   867,   868,   nil,
   nil,   nil,   nil,   nil,   nil,   889,   890,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1473,   894,   nil,   896,   nil,   nil,
   895,   nil,   202,   201,     9,   nil,    16,   nil,   nil,   nil,
   nil,   811,   863,   907,   nil,   815,   155,   154,   153,   nil,
   nil,  1427,   nil,   918,   919,   932,   933,   954,   960,   961,
   962,   963,   964,   977,   978,   979,   151,   nil,    17,    83,
   nil,   125,   nil,   953,   nil,   nil,   nil,   nil,   978,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   454,   nil,   nil,   nil,
   nil,    64,  1011,   nil,   nil ]

racc_action_default = [
   -18,  -436,    -1,  -436,  -436,  -436,  -436,  -436,  -436,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,
  -436,   -77,   -78,  -436,  -436,  -436,  -436,  -436,  -436,  -436,
  -436,  -436,   -94,  -436,  -436,  -436,  -436,  -133,  -134,  -436,
  -436,  -436,  -436,  -177,  -178,  -436,  -436,  -436,  -188,  -189,
  -190,  -436,  -436,  -436,  -436,  -436,  -436,  -279,  -280,  -281,
  -282,  -283,  -436,  -436,  -436,  -340,  -436,  -436,  -436,  -348,
  -436,  -436,  -436,  -436,  -436,    -2,    -3,    -4,    -5,    -6,
    -7,    -8,    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,
   -17,   -18,  -174,   -24,  -436,  -436,   -79,   -80,   -81,  -104,
  -436,   -90,   -91,  -436,  -436,   -92,   -93,  -104,  -436,  -436,
  -127,  -135,  -152,  -162,  -155,  -180,  -104,  -436,  -436,  -192,
  -104,  -173,  -174,  -436,  -436,  -436,  -232,  -233,  -234,  -235,
  -236,  -237,  -238,  -239,  -240,  -241,  -314,  -315,  -323,  -317,
  -318,  -319,  -320,  -321,  -322,  -325,  -326,  -327,  -436,  -331,
  -332,  -333,  -334,  -372,  -374,  -434,  -278,  -436,  -286,  -287,
  -288,  -289,  -290,  -291,  -292,  -293,  -294,  -295,  -296,  -297,
  -298,  -299,  -300,  -301,  -302,  -303,  -304,  -305,  -306,  -335,
  -336,  -436,  -436,  -436,  -436,  -435,  -284,  -311,  -337,  -436,
  -344,  -436,  -346,  -436,  -363,  -436,  -364,  -397,  -400,  -398,
   735,  -436,   -21,  -436,  -175,  -436,   -25,  -436,  -436,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -300,  -436,   -71,
   -73,   -74,   -75,  -242,  -243,  -245,  -247,  -249,  -252,  -255,
  -436,  -260,  -261,  -262,  -263,  -264,  -265,  -436,  -267,  -268,
  -269,  -270,  -271,  -272,  -273,  -274,  -275,  -276,   -84,  -436,
   -86,   -88,  -436,   -95,  -436,  -436,  -436,  -436,  -436,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -410,  -411,  -412,  -429,
  -430,  -431,  -432,   -83,  -179,  -191,  -436,  -121,  -123,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -128,  -436,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -143,  -436,  -436,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,
  -156,  -436,  -436,  -436,  -436,  -436,  -186,  -204,  -205,  -436,
  -436,  -436,  -201,  -212,  -436,  -436,  -436,  -436,  -185,  -198,
  -193,  -199,  -436,  -229,  -230,  -436,  -316,  -324,  -328,  -329,
  -436,  -436,  -285,  -307,  -309,  -310,  -312,  -313,  -339,  -347,
  -436,  -436,  -436,  -341,  -436,  -436,  -355,  -436,  -358,  -436,
  -436,  -436,  -436,  -366,  -368,  -436,   -19,   -22,  -176,  -436,
  -436,   -27,   -28,   -29,   -30,   -31,   -32,   -33,   -34,   -35,
  -436,   -37,  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,
  -436,  -436,  -436,  -436,  -259,  -436,  -105,  -106,  -108,   -82,
   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -436,  -436,
  -409,  -405,  -436,  -436,  -404,  -182,  -195,  -109,  -122,  -124,
  -125,  -436,  -436,  -436,  -118,  -119,  -436,  -117,  -126,  -129,
  -130,  -131,  -132,  -436,  -171,  -172,  -436,  -436,  -138,  -141,
  -142,  -139,  -136,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -436,  -436,  -436,  -436,  -436,  -153,  -157,  -158,  -159,
  -160,  -161,  -154,  -203,  -436,  -207,  -209,  -211,  -208,  -181,
  -202,  -213,  -214,  -436,  -436,  -184,  -197,  -194,  -436,  -330,
  -277,  -436,  -436,  -436,  -375,  -376,  -436,  -436,  -436,  -338,
  -342,  -436,  -345,  -356,  -436,  -359,  -436,  -436,  -361,  -323,
  -436,  -350,  -351,  -352,  -353,  -354,  -365,  -436,  -399,  -401,
  -436,   -26,  -436,   -36,   -70,   -72,  -244,  -246,  -248,  -250,
  -251,  -253,  -254,  -256,  -257,  -258,  -266,  -436,  -436,  -312,
  -391,  -381,  -402,  -407,  -408,  -436,  -436,  -413,  -436,  -415,
  -436,  -418,  -419,  -420,  -403,  -436,  -436,  -436,  -436,  -436,
  -436,  -163,  -436,  -165,  -436,  -166,  -167,  -168,  -169,  -170,
  -206,  -436,  -215,  -216,  -231,  -371,  -373,  -308,  -377,  -436,
  -436,  -370,  -436,  -343,  -357,  -362,  -360,  -349,  -367,  -436,
  -436,   -38,  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -107,  -379,
  -395,  -394,  -380,  -382,  -383,  -384,  -385,  -386,  -389,  -390,
  -436,  -436,  -436,  -406,  -436,  -436,  -414,  -436,  -436,  -217,
  -436,  -225,  -436,  -228,  -221,  -436,  -436,  -115,  -114,  -116,
  -120,  -164,  -137,  -210,  -378,  -436,  -436,   -20,   -23,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,  -436,  -436,  -393,  -436,  -387,  -388,
  -392,  -395,  -436,  -436,  -436,  -424,  -436,  -427,  -416,  -417,
  -219,  -218,  -436,  -436,  -223,  -222,  -436,  -436,  -436,  -369,
  -433,  -436,   -55,  -436,  -436,  -436,  -436,  -436,  -436,  -436,
  -436,  -436,  -436,  -436,  -436,  -436,  -436,  -396,  -436,  -436,
  -421,  -436,  -426,  -436,  -220,  -226,  -227,  -224,  -111,  -112,
  -113,   -54,   -56,   -57,   -58,   -59,   -60,   -61,   -62,   -63,
   -64,   -65,   -66,   -67,   -68,   -69,  -436,  -422,  -423,  -425,
  -428,  -436,  -436,  -110,   -76 ]

racc_goto_table = [
     4,     4,    16,    16,     3,     3,    17,    17,     5,     5,
   222,   409,   363,   127,   221,   342,   219,   157,   533,   426,
   441,   217,   206,   126,   481,   482,   313,   530,   132,   174,
   396,   296,   316,   539,   129,   488,   331,   297,   311,   131,
   173,     2,    75,   160,   290,   310,   287,   303,   314,   277,
   353,   356,   298,   312,   123,   124,   134,   162,   629,   465,
   279,   485,   664,   253,   534,   601,   433,   437,   174,   608,
   567,   278,   609,   581,   321,   440,     1,   178,   332,   173,
   330,   589,   220,   575,   518,   691,   682,   125,   516,   596,
   705,     4,   174,    16,   135,     3,   130,    17,   176,     5,
   272,   468,   633,   173,   177,   128,   160,   394,   272,   463,
   698,   699,   691,   712,   181,   470,   156,   272,   182,   309,
   162,   272,   435,   435,   521,   522,   470,   248,   250,   251,
   620,   625,   202,   523,   524,   525,   519,   520,   438,   295,
   178,   186,   487,   639,   726,   286,   600,   660,   659,   423,
   658,   589,   395,   352,   276,   517,   355,   528,   192,   596,
   500,   176,   174,   598,   494,   495,   194,   177,   362,   252,
   569,   484,   218,   173,   127,   599,   160,   181,   602,   531,
   603,   182,   604,   605,   126,   709,   710,   613,   606,   132,
   162,   415,   416,   607,   681,   129,    93,   580,   197,   568,
   131,     4,   365,    16,   560,     3,   588,    17,   656,     5,
   178,   552,   491,   490,   443,   493,   400,   134,   418,   410,
   297,   290,   313,   429,   532,   690,   509,   670,   661,   279,
   303,   176,   674,   596,   311,   298,   669,   177,   668,   733,
   278,   457,   367,   413,   314,   475,   476,   181,   380,   312,
   398,   182,   690,   272,   635,   135,   636,   130,   411,   205,
   596,   538,   201,   272,   666,   272,   128,   435,   nil,   nil,
   nil,   nil,   585,   586,   497,   697,   588,   272,   nil,   704,
   632,   nil,   626,   707,   424,   398,   427,   473,   474,   618,
   587,   706,   434,   434,   439,   398,   512,   511,   222,   174,
   174,   nil,   221,   nil,   515,   451,   452,   453,   454,   455,
   173,   173,   nil,   160,   160,   nil,   462,   nil,   496,   502,
   467,   398,   272,   174,   578,   174,   593,   162,   162,   501,
   174,   562,   563,   272,   173,   440,   173,   160,   174,   160,
   503,   173,   585,   586,   160,   nil,   nil,   178,   178,   173,
   689,   162,   160,   162,   592,   nil,   174,   nil,   162,   nil,
   587,   nil,   505,   nil,   nil,   nil,   162,   173,   176,   176,
   220,   673,   nil,   178,   177,   177,   nil,   689,   178,   nil,
   nil,   nil,   504,   nil,   181,   181,   178,   nil,   182,   182,
   nil,   nil,   nil,   564,   176,   nil,   593,   nil,   nil,   176,
   177,   nil,   nil,   nil,   nil,   177,   nil,   176,   nil,   272,
   181,   nil,   nil,   177,   182,   181,   686,   687,   nil,   182,
   nil,   nil,   nil,   181,   592,   nil,   nil,   182,   nil,   nil,
   nil,   nil,   nil,   nil,   688,   nil,   nil,   434,   nil,   nil,
   nil,   nil,   nil,   686,   687,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   688,   nil,   nil,   nil,   467,   nil,   nil,   nil,   nil,
   693,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   693,   692,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   583,   nil,   594,   nil,   582,   nil,   595,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   692,   nil,   nil,   398,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   272,   nil,   nil,   nil,   nil,   nil,   nil,   398,   627,
   628,   630,   nil,   nil,   nil,   398,   nil,   nil,   nil,   nil,
   nil,   nil,   467,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   583,   nil,   594,   nil,   582,   nil,   595,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   655,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   665,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   272,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   684,   nil,   694,   nil,   683,   nil,
   695,   nil,   685,   665,   665,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   708,   630,   630,
   nil,   684,   nil,   694,   nil,   683,   nil,   695,   nil,   685,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   665,   nil,   nil,
   nil,   nil,   729,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   630 ]

racc_goto_check = [
     4,     4,    16,    16,     3,     3,    17,    17,     5,     5,
    36,   104,   167,   107,    35,    99,    33,    91,   101,    57,
    72,    26,    24,   106,   126,   126,    77,   105,   112,   112,
    52,    73,    87,   192,   109,   126,    87,    65,    65,   111,
   111,     2,     2,    34,    50,    80,    64,    50,    50,    59,
   153,   160,    66,    66,    37,    37,    37,    37,    58,    96,
    60,   169,    38,    49,   190,   180,    81,    81,   112,   178,
   139,    49,   179,    27,    86,    52,     1,   132,    86,   111,
    91,    10,    34,   139,   118,    28,    31,    25,   116,    18,
   102,     4,   112,    16,   114,     3,   110,    17,   128,     5,
    37,    52,    97,   111,   130,   108,    34,   123,    37,    95,
    38,    38,    28,    31,   150,    93,   127,    37,   154,    79,
    37,    37,    82,    82,   120,   120,    93,    47,    47,    47,
   100,   100,     2,   121,   121,   121,   119,   119,    71,    70,
   132,   133,   134,    27,    38,    63,   105,   180,   178,    56,
   179,    10,    36,   152,    55,   117,   156,   104,   158,    18,
   159,   128,   112,    53,   162,   163,   165,   130,   166,    45,
   126,   168,    32,   111,   107,   170,    34,   150,   171,   172,
   173,   154,   174,   175,   106,    58,    58,   190,   176,   112,
    37,    87,    87,   177,    30,   109,    23,    22,   182,   169,
   111,     4,   183,    16,    96,     3,     9,    17,   101,     5,
   132,    81,    99,   153,    73,   160,    49,    37,    59,   185,
    65,    50,    77,    64,   186,    10,   153,   101,   105,    60,
    50,   128,   101,    18,    65,    66,   105,   130,   192,    58,
    49,    80,     2,   188,    50,    87,    87,   150,    25,    66,
    37,   154,    10,    37,   126,   114,   126,   110,   189,    21,
    18,   191,    19,    37,   194,    37,   108,    82,   nil,   nil,
   nil,   nil,     6,     7,    36,   105,     9,    37,   nil,   101,
    72,   nil,    57,   101,    37,    37,    37,    91,    91,   104,
     8,   105,    37,    37,    37,    37,    26,    24,    36,   112,
   112,   nil,    35,   nil,    33,    37,    37,    37,    37,    37,
   111,   111,   nil,    34,    34,   nil,    37,   nil,    91,   107,
    37,    37,    37,   112,   167,   112,    15,    37,    37,   106,
   112,    99,    99,    37,   111,    52,   111,    34,   112,    34,
   109,   111,     6,     7,    34,   nil,   nil,   132,   132,   111,
     9,    37,    34,    37,    14,   nil,   112,   nil,    37,   nil,
     8,   nil,    37,   nil,   nil,   nil,    37,   111,   128,   128,
    34,   104,   nil,   132,   130,   130,   nil,     9,   132,   nil,
   nil,   nil,   132,   nil,   150,   150,   132,   nil,   154,   154,
   nil,   nil,   nil,    36,   128,   nil,    15,   nil,   nil,   128,
   130,   nil,   nil,   nil,   nil,   130,   nil,   128,   nil,    37,
   150,   nil,   nil,   130,   154,   150,     6,     7,   nil,   154,
   nil,   nil,   nil,   150,    14,   nil,   nil,   154,   nil,   nil,
   nil,   nil,   nil,   nil,     8,   nil,   nil,    37,   nil,   nil,
   nil,   nil,   nil,     6,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,    16,   nil,     3,   nil,    17,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,    37,    37,
    37,    37,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,    16,   nil,     3,   nil,    17,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,    16,   nil,     3,   nil,
    17,   nil,     5,    37,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    37,    37,
   nil,     4,   nil,    16,   nil,     3,   nil,    17,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37 ]

racc_goto_pointer = [
   nil,    76,    41,     4,     0,     8,  -238,  -237,  -220,  -304,
  -429,   nil,   nil,   nil,  -156,  -184,     2,     6,  -421,   171,
   nil,   164,  -313,   177,   -73,    32,   -74,  -437,  -569,   nil,
  -460,  -568,    77,   -79,   -13,   -81,   -85,     1,  -552,   nil,
   nil,   nil,   nil,   nil,   nil,    70,   nil,    31,   nil,   -36,
   -65,   nil,  -219,  -364,   nil,    47,  -134,  -265,  -492,   -58,
   -47,   nil,   nil,    36,   -63,   -75,   -60,   nil,   nil,   nil,
    27,  -155,  -274,   -81,   nil,   nil,   nil,   -87,   nil,     6,
   -68,  -225,  -169,   nil,   nil,   nil,   -42,   -83,   nil,   nil,
   nil,   -39,   nil,  -206,   nil,  -208,  -260,  -459,   nil,  -142,
  -415,  -392,  -582,   nil,  -251,  -382,   -32,   -42,    50,   -21,
    41,   -16,   -27,   nil,    39,   nil,  -296,  -230,  -302,  -251,
  -265,  -258,   nil,  -123,   nil,   nil,  -316,    60,    42,   nil,
    48,   nil,    21,    79,  -208,   nil,   nil,   nil,   nil,  -413,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,   nil,   -36,  -139,    62,   nil,   -35,   nil,    90,  -201,
  -140,   nil,  -193,  -192,   nil,    96,   -27,  -183,  -175,  -285,
  -353,  -352,  -230,  -350,  -348,  -347,  -342,  -337,  -461,  -458,
  -463,   nil,   126,     4,   nil,   -44,  -186,   nil,   -21,    -5,
  -346,  -151,  -379,   nil,  -351 ]

racc_goto_default = [
   nil,   nil,   nil,   254,   255,   256,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,   259,   260,    18,   nil,
    20,   nil,   nil,   121,   nil,   nil,   172,   nil,   590,   591,
   nil,   nil,   nil,   nil,   269,   161,   480,   235,   nil,    21,
    22,    23,    24,    25,    26,   nil,    27,   nil,    30,   323,
   257,   258,   425,   397,    33,   nil,   nil,   nil,   nil,   nil,
   325,   280,    35,   nil,   nil,   288,   289,    37,    38,    40,
   nil,   nil,   nil,   nil,   299,   300,   301,   302,    41,   nil,
   nil,   nil,   170,    43,    44,    46,   nil,   nil,    48,    49,
    50,   354,    52,   322,   317,   318,   nil,   466,   324,   nil,
   nil,   nil,   621,   622,   267,   344,   164,   165,   166,   167,
   163,   270,   271,   133,   168,   223,   224,   225,   226,   227,
   228,   229,   230,   231,   236,   245,   nil,   nil,    57,    58,
    59,    60,    61,   nil,   158,   159,   169,   171,   175,   343,
   345,   347,   139,   140,   141,   142,   143,   145,   146,   147,
    63,    64,   nil,   nil,    66,    67,   nil,    68,   nil,   nil,
   nil,   357,   nil,   358,    70,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    72,   nil,   nil,   263,   nil,   nil,   264,   265,   nil,
   nil,   nil,   nil,   540,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 106, :_reduce_none,
  2, 106, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 107, :_reduce_none,
  0, 107, :_reduce_none,
  4, 116, :_reduce_19,
  2, 123, :_reduce_20,
  1, 124, :_reduce_none,
  2, 124, :_reduce_none,
  7, 117, :_reduce_23,
  2, 125, :_reduce_24,
  1, 126, :_reduce_none,
  3, 126, :_reduce_none,
  2, 129, :_reduce_27,
  2, 129, :_reduce_28,
  2, 129, :_reduce_29,
  2, 129, :_reduce_30,
  2, 129, :_reduce_31,
  2, 129, :_reduce_32,
  2, 129, :_reduce_33,
  2, 129, :_reduce_34,
  2, 129, :_reduce_35,
  3, 129, :_reduce_36,
  2, 129, :_reduce_37,
  1, 127, :_reduce_none,
  2, 127, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  2, 132, :_reduce_none,
  4, 133, :_reduce_54,
  1, 135, :_reduce_none,
  2, 135, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 136, :_reduce_none,
  5, 118, :_reduce_70,
  1, 137, :_reduce_71,
  3, 137, :_reduce_72,
  1, 138, :_reduce_73,
  1, 138, :_reduce_74,
  1, 138, :_reduce_75,
  6, 134, :_reduce_76,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  2, 145, :_reduce_79,
  2, 145, :_reduce_80,
  2, 145, :_reduce_81,
  4, 144, :_reduce_82,
  3, 144, :_reduce_83,
  3, 149, :_reduce_84,
  2, 149, :_reduce_85,
  3, 149, :_reduce_86,
  2, 149, :_reduce_87,
  3, 149, :_reduce_88,
  2, 149, :_reduce_89,
  2, 146, :_reduce_90,
  2, 147, :_reduce_91,
  2, 151, :_reduce_92,
  2, 153, :_reduce_93,
  1, 148, :_reduce_94,
  1, 150, :_reduce_none,
  2, 150, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 154, :_reduce_none,
  2, 152, :_reduce_105,
  1, 157, :_reduce_106,
  3, 157, :_reduce_107,
  1, 158, :_reduce_none,
  4, 115, :_reduce_109,
  10, 159, :_reduce_110,
  8, 159, :_reduce_111,
  8, 159, :_reduce_112,
  8, 159, :_reduce_113,
  6, 159, :_reduce_114,
  6, 159, :_reduce_115,
  6, 159, :_reduce_116,
  4, 159, :_reduce_117,
  1, 161, :_reduce_none,
  1, 162, :_reduce_none,
  1, 163, :_reduce_none,
  1, 160, :_reduce_none,
  2, 160, :_reduce_none,
  1, 164, :_reduce_none,
  2, 164, :_reduce_none,
  2, 164, :_reduce_none,
  4, 112, :_reduce_126,
  2, 167, :_reduce_127,
  1, 168, :_reduce_none,
  2, 168, :_reduce_none,
  2, 169, :_reduce_none,
  2, 169, :_reduce_none,
  2, 169, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  2, 173, :_reduce_135,
  4, 172, :_reduce_136,
  6, 174, :_reduce_137,
  4, 174, :_reduce_138,
  4, 174, :_reduce_139,
  2, 174, :_reduce_140,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  0, 178, :_reduce_none,
  4, 114, :_reduce_153,
  4, 183, :_reduce_154,
  2, 183, :_reduce_155,
  1, 184, :_reduce_none,
  2, 184, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  0, 185, :_reduce_none,
  3, 170, :_reduce_163,
  4, 171, :_reduce_164,
  3, 171, :_reduce_165,
  3, 180, :_reduce_166,
  3, 179, :_reduce_167,
  3, 181, :_reduce_168,
  3, 182, :_reduce_169,
  3, 182, :_reduce_170,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 142, :_reduce_173,
  1, 128, :_reduce_174,
  2, 128, :_reduce_175,
  3, 128, :_reduce_176,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 189, :_reduce_179,
  2, 189, :_reduce_180,
  4, 188, :_reduce_181,
  4, 190, :_reduce_182,
  3, 190, :_reduce_183,
  4, 190, :_reduce_184,
  3, 190, :_reduce_185,
  3, 190, :_reduce_186,
  2, 190, :_reduce_187,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  3, 195, :_reduce_191,
  2, 195, :_reduce_192,
  3, 194, :_reduce_193,
  4, 193, :_reduce_194,
  4, 197, :_reduce_195,
  3, 197, :_reduce_196,
  4, 197, :_reduce_197,
  3, 197, :_reduce_198,
  3, 197, :_reduce_199,
  2, 197, :_reduce_200,
  1, 191, :_reduce_none,
  2, 191, :_reduce_none,
  2, 192, :_reduce_203,
  1, 192, :_reduce_204,
  1, 192, :_reduce_205,
  3, 199, :_reduce_206,
  2, 199, :_reduce_207,
  2, 200, :_reduce_208,
  1, 201, :_reduce_209,
  3, 201, :_reduce_210,
  1, 202, :_reduce_none,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  2, 198, :_reduce_none,
  3, 203, :_reduce_215,
  3, 203, :_reduce_216,
  4, 165, :_reduce_217,
  5, 165, :_reduce_218,
  5, 165, :_reduce_219,
  6, 165, :_reduce_220,
  4, 166, :_reduce_221,
  5, 166, :_reduce_222,
  5, 166, :_reduce_223,
  6, 166, :_reduce_224,
  1, 205, :_reduce_225,
  3, 205, :_reduce_226,
  3, 207, :_reduce_227,
  1, 208, :_reduce_none,
  3, 122, :_reduce_229,
  3, 121, :_reduce_230,
  5, 109, :_reduce_231,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 141, :_reduce_none,
  1, 220, :_reduce_none,
  3, 220, :_reduce_244,
  1, 221, :_reduce_none,
  3, 221, :_reduce_246,
  1, 222, :_reduce_none,
  3, 222, :_reduce_248,
  1, 223, :_reduce_none,
  3, 223, :_reduce_250,
  3, 223, :_reduce_251,
  1, 224, :_reduce_none,
  3, 224, :_reduce_253,
  3, 224, :_reduce_254,
  1, 225, :_reduce_none,
  3, 225, :_reduce_256,
  3, 225, :_reduce_257,
  3, 225, :_reduce_258,
  2, 226, :_reduce_259,
  1, 226, :_reduce_none,
  1, 227, :_reduce_261,
  1, 227, :_reduce_262,
  1, 227, :_reduce_263,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  3, 228, :_reduce_266,
  1, 229, :_reduce_267,
  1, 229, :_reduce_268,
  1, 229, :_reduce_269,
  1, 229, :_reduce_270,
  1, 229, :_reduce_271,
  1, 229, :_reduce_272,
  1, 229, :_reduce_273,
  1, 229, :_reduce_274,
  1, 230, :_reduce_275,
  1, 230, :_reduce_276,
  1, 231, :_reduce_277,
  2, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 232, :_reduce_285,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 204, :_reduce_307,
  3, 204, :_reduce_308,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 238, :_reduce_311,
  1, 210, :_reduce_none,
  1, 245, :_reduce_none,
  1, 215, :_reduce_314,
  1, 215, :_reduce_315,
  2, 215, :_reduce_316,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 249, :_reduce_322,
  1, 250, :_reduce_323,
  2, 251, :_reduce_324,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  2, 252, :_reduce_328,
  2, 253, :_reduce_329,
  3, 254, :_reduce_330,
  1, 212, :_reduce_331,
  1, 213, :_reduce_332,
  1, 214, :_reduce_333,
  1, 219, :_reduce_334,
  1, 241, :_reduce_335,
  1, 187, :_reduce_336,
  2, 234, :_reduce_337,
  4, 233, :_reduce_338,
  2, 256, :_reduce_339,
  1, 255, :_reduce_340,
  1, 257, :_reduce_none,
  2, 257, :_reduce_none,
  3, 258, :_reduce_343,
  2, 236, :_reduce_344,
  4, 235, :_reduce_345,
  2, 260, :_reduce_346,
  2, 262, :_reduce_347,
  1, 259, :_reduce_348,
  4, 263, :_reduce_349,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  3, 265, :_reduce_357,
  1, 266, :_reduce_358,
  2, 266, :_reduce_359,
  3, 268, :_reduce_360,
  2, 268, :_reduce_361,
  2, 267, :_reduce_362,
  2, 237, :_reduce_363,
  2, 269, :_reduce_364,
  3, 270, :_reduce_none,
  1, 271, :_reduce_none,
  3, 271, :_reduce_none,
  1, 272, :_reduce_368,
  6, 131, :_reduce_369,
  4, 131, :_reduce_370,
  4, 216, :_reduce_371,
  1, 216, :_reduce_372,
  4, 217, :_reduce_373,
  1, 217, :_reduce_374,
  2, 246, :_reduce_375,
  1, 273, :_reduce_376,
  2, 273, :_reduce_377,
  3, 274, :_reduce_378,
  4, 155, :_reduce_379,
  4, 155, :_reduce_380,
  3, 155, :_reduce_381,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  2, 278, :_reduce_387,
  2, 279, :_reduce_388,
  1, 280, :_reduce_389,
  1, 281, :_reduce_390,
  0, 282, :_reduce_391,
  3, 277, :_reduce_392,
  2, 275, :_reduce_393,
  1, 275, :_reduce_394,
  1, 285, :_reduce_395,
  3, 285, :_reduce_396,
  2, 110, :_reduce_397,
  2, 286, :_reduce_398,
  3, 287, :_reduce_none,
  0, 288, :_reduce_none,
  2, 288, :_reduce_none,
  3, 156, :_reduce_none,
  3, 289, :_reduce_403,
  2, 289, :_reduce_404,
  1, 290, :_reduce_none,
  2, 291, :_reduce_406,
  1, 291, :_reduce_407,
  1, 291, :_reduce_408,
  0, 291, :_reduce_409,
  1, 292, :_reduce_410,
  1, 293, :_reduce_411,
  1, 293, :_reduce_412,
  2, 294, :_reduce_none,
  3, 294, :_reduce_none,
  1, 296, :_reduce_none,
  3, 296, :_reduce_none,
  3, 297, :_reduce_417,
  1, 298, :_reduce_418,
  1, 298, :_reduce_419,
  1, 298, :_reduce_420,
  4, 206, :_reduce_421,
  4, 283, :_reduce_422,
  4, 284, :_reduce_423,
  1, 143, :_reduce_424,
  3, 143, :_reduce_425,
  4, 295, :_reduce_426,
  1, 299, :_reduce_427,
  3, 299, :_reduce_428,
  1, 209, :_reduce_429,
  1, 209, :_reduce_430,
  1, 209, :_reduce_431,
  1, 209, :_reduce_432,
  6, 243, :_reduce_433,
  1, 218, :_reduce_434,
  1, 242, :_reduce_435 ]

racc_reduce_n = 436

racc_shift_n = 735

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "{" => 3,
  "}" => 4,
  "module" => 5,
  :identifier => 6,
  "<" => 7,
  ">" => 8,
  "," => 9,
  "typename" => 10,
  "interface" => 11,
  "valuetype" => 12,
  "eventtype" => 13,
  "struct" => 14,
  "union" => 15,
  "exception" => 16,
  "enum" => 17,
  "sequence" => 18,
  "const" => 19,
  "alias" => 20,
  "local" => 21,
  "abstract" => 22,
  "pseudo" => 23,
  ":" => 24,
  "home" => 25,
  "supports" => 26,
  "manages" => 27,
  "primarykey" => 28,
  "porttype" => 29,
  "component" => 30,
  "connector" => 31,
  "provides" => 32,
  "uses" => 33,
  "multiple" => 34,
  "publishes" => 35,
  "emits" => 36,
  "consumes" => 37,
  "port" => 38,
  "mirrorport" => 39,
  "::" => 40,
  "custom" => 41,
  "truncatable" => 42,
  "public" => 43,
  "private" => 44,
  "factory" => 45,
  "(" => 46,
  ")" => 47,
  "finder" => 48,
  "in" => 49,
  "typeprefix" => 50,
  :string_literal => 51,
  "typeid" => 52,
  "=" => 53,
  "|" => 54,
  "^" => 55,
  "&" => 56,
  ">>" => 57,
  "<<" => 58,
  "+" => 59,
  "-" => 60,
  "*" => 61,
  "/" => 62,
  "%" => 63,
  "~" => 64,
  :integer_literal => 65,
  :wide_string_literal => 66,
  :character_literal => 67,
  :wide_character_literal => 68,
  :fixed_pt_literal => 69,
  :floating_pt_literal => 70,
  "TRUE" => 71,
  "FALSE" => 72,
  "typedef" => 73,
  "native" => 74,
  "float" => 75,
  "double" => 76,
  "long" => 77,
  "short" => 78,
  "unsigned" => 79,
  "char" => 80,
  "wchar" => 81,
  "boolean" => 82,
  "octet" => 83,
  "any" => 84,
  "Object" => 85,
  "switch" => 86,
  "case" => 87,
  "default" => 88,
  "string" => 89,
  "wstring" => 90,
  "[" => 91,
  "]" => 92,
  "readonly" => 93,
  "attribute" => 94,
  "oneway" => 95,
  "void" => 96,
  "out" => 97,
  "inout" => 98,
  "raises" => 99,
  "getraises" => 100,
  "setraises" => 101,
  "context" => 102,
  "fixed" => 103,
  "ValueBase" => 104 }

racc_nt_base = 105

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\"module\"",
  "identifier",
  "\"<\"",
  "\">\"",
  "\",\"",
  "\"typename\"",
  "\"interface\"",
  "\"valuetype\"",
  "\"eventtype\"",
  "\"struct\"",
  "\"union\"",
  "\"exception\"",
  "\"enum\"",
  "\"sequence\"",
  "\"const\"",
  "\"alias\"",
  "\"local\"",
  "\"abstract\"",
  "\"pseudo\"",
  "\":\"",
  "\"home\"",
  "\"supports\"",
  "\"manages\"",
  "\"primarykey\"",
  "\"porttype\"",
  "\"component\"",
  "\"connector\"",
  "\"provides\"",
  "\"uses\"",
  "\"multiple\"",
  "\"publishes\"",
  "\"emits\"",
  "\"consumes\"",
  "\"port\"",
  "\"mirrorport\"",
  "\"::\"",
  "\"custom\"",
  "\"truncatable\"",
  "\"public\"",
  "\"private\"",
  "\"factory\"",
  "\"(\"",
  "\")\"",
  "\"finder\"",
  "\"in\"",
  "\"typeprefix\"",
  "string_literal",
  "\"typeid\"",
  "\"=\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\">>\"",
  "\"<<\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "integer_literal",
  "wide_string_literal",
  "character_literal",
  "wide_character_literal",
  "fixed_pt_literal",
  "floating_pt_literal",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"typedef\"",
  "\"native\"",
  "\"float\"",
  "\"double\"",
  "\"long\"",
  "\"short\"",
  "\"unsigned\"",
  "\"char\"",
  "\"wchar\"",
  "\"boolean\"",
  "\"octet\"",
  "\"any\"",
  "\"Object\"",
  "\"switch\"",
  "\"case\"",
  "\"default\"",
  "\"string\"",
  "\"wstring\"",
  "\"[\"",
  "\"]\"",
  "\"readonly\"",
  "\"attribute\"",
  "\"oneway\"",
  "\"void\"",
  "\"out\"",
  "\"inout\"",
  "\"raises\"",
  "\"getraises\"",
  "\"setraises\"",
  "\"context\"",
  "\"fixed\"",
  "\"ValueBase\"",
  "$start",
  "specification",
  "definition",
  "type_dcl",
  "const_dcl",
  "except_dcl",
  "interface",
  "porttype",
  "component",
  "connector",
  "home",
  "module",
  "template_module",
  "template_module_inst",
  "value",
  "event",
  "typeid",
  "typeprefix",
  "module_header",
  "_definition_1",
  "template_module_header",
  "template_module_parameters",
  "template_module_body",
  "scoped_name_0",
  "template_module_parameter",
  "const_type",
  "sequence_type",
  "template_module_definition",
  "fixed_module",
  "template_module_reference",
  "fixed_module_body",
  "fixed_module_definition",
  "template_module_inst_parameters",
  "template_module_inst_parameter",
  "base_type_spec",
  "template_type_spec",
  "const_exp",
  "scoped_name",
  "_scoped_name_list",
  "interface_dcl",
  "forward_dcl",
  "local_interface_",
  "abstract_interface_",
  "regular_interface_",
  "interface_header",
  "interface_body",
  "pseudo_interface_header",
  "interface_inheritance_spec",
  "pseudo_interface_",
  "export",
  "attr_dcl",
  "op_dcl",
  "_interface_name_list",
  "interface_name",
  "home_header",
  "home_body",
  "home_inheritance_spec",
  "home_supports_spec",
  "home_primarykey_spec",
  "home_export",
  "init_dcl",
  "finder_dcl",
  "porttype_header",
  "porttype_body",
  "porttype_export",
  "provides_dcl",
  "uses_dcl",
  "component_dcl",
  "component_forward_dcl",
  "component_header",
  "component_body",
  "component_inheritance_spec",
  "component_supports_spec",
  "component_export",
  "emits_dcl",
  "publishes_dcl",
  "consumes_dcl",
  "port_dcl",
  "connector_header",
  "connector_body",
  "connector_export",
  "interface_type",
  "object_type",
  "event_dcl",
  "event_forward_dcl",
  "eventtype_header",
  "value_body",
  "value_inheritance_spec",
  "value_dcl",
  "value_box_dcl",
  "value_forward_dcl",
  "type_spec",
  "valuetype_header",
  "value_element",
  "value_basevalue_list",
  "value_interface_support_list",
  "_value_name_list",
  "value_name",
  "state_member",
  "declarators",
  "init_param_decls",
  "raises_expr",
  "init_param_decl",
  "init_param_attribute",
  "param_type_spec",
  "simple_declarator",
  "integer_type",
  "char_type",
  "wide_char_type",
  "boolean_type",
  "floating_pt_type",
  "string_type",
  "wide_string_type",
  "fixed_pt_const_type",
  "octet_type",
  "or_expr",
  "xor_expr",
  "and_expr",
  "shift_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "unary_operator",
  "primary_expr",
  "literal",
  "boolean_literal",
  "positive_int_const",
  "type_declarator",
  "struct_type",
  "struct_forward_dcl",
  "union_type",
  "union_forward_dcl",
  "enum_type",
  "native_declarator",
  "simple_type_spec",
  "constr_type_spec",
  "any_type",
  "value_base_type",
  "fixed_pt_type",
  "declarator",
  "complex_declarator",
  "array_declarator",
  "signed_int",
  "unsigned_int",
  "signed_short_int",
  "signed_long_int",
  "signed_longlong_int",
  "unsigned_short_int",
  "unsigned_long_int",
  "unsigned_longlong_int",
  "struct_def",
  "struct_header",
  "member_list",
  "member",
  "union_def",
  "union_header",
  "union_body",
  "union_dcl",
  "union_switch_spec",
  "switch_type_spec",
  "union_case",
  "_case_label_1",
  "element_spec",
  "case_label",
  "_enum_header",
  "_enum_body",
  "_enumerator_list",
  "enumerator",
  "_fixed_array_size_1",
  "fixed_array_size",
  "readonly_attr_declarator",
  "attr_raises_expr",
  "attr_declarator_list",
  "attr_both_raises_expr1",
  "attr_both_raises_expr2",
  "attr_get_raises_expr",
  "attr_set_raises_expr",
  "attr_no_raises_expr",
  "get_raises_expr",
  "set_raises_expr",
  "_simple_declarator_list",
  "_except_header",
  "_except_body",
  "_member_list0",
  "_op_dcl_header",
  "_op_dcl_parameter",
  "_op_dcl_footer",
  "op_attribute",
  "op_type_spec",
  "parameter_dcls",
  "context_expr",
  "_param_dcl_list",
  "param_dcl",
  "param_attribute",
  "_string_literal_list" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.ry', 39)
  def _reduce_19(val, _values)
     @d.end_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 42)
  def _reduce_20(val, _values)
     @d.define_module(val[1])
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.ry', 48)
  def _reduce_23(val, _values)
     @d.end_template_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 51)
  def _reduce_24(val, _values)
     @d.register_template_module_name(val[1])
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.ry', 57)
  def _reduce_27(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Any.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 59)
  def _reduce_28(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Interface.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 61)
  def _reduce_29(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Valuetype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 63)
  def _reduce_30(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Eventtype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 65)
  def _reduce_31(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Struct.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 67)
  def _reduce_32(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Union.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 69)
  def _reduce_33(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Exception.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 71)
  def _reduce_34(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Enum.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 73)
  def _reduce_35(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Sequence.new(IDL::Type::Void.new, nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 75)
  def _reduce_36(val, _values)
     @d.define_template_parameter(val[2], IDL::Type::Const.new(val[1]))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 77)
  def _reduce_37(val, _values)
     @d.define_template_parameter(val[1], val[0])
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.ry', 98)
  def _reduce_54(val, _values)
     @d.end_module(val[0])
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.ry', 118)
  def _reduce_70(val, _values)
     @d.instantiate_template_module(val[4], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 121)
  def _reduce_71(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 123)
  def _reduce_72(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 126)
  def _reduce_73(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 128)
  def _reduce_74(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 130)
  def _reduce_75(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 133)
  def _reduce_76(val, _values)
     @d.declare_template_reference(val[5], val[1], val[3])
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.ry', 140)
  def _reduce_79(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 142)
  def _reduce_80(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 144)
  def _reduce_81(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 147)
  def _reduce_82(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 149)
  def _reduce_83(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 152)
  def _reduce_84(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 154)
  def _reduce_85(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 156)
  def _reduce_86(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 158)
  def _reduce_87(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 160)
  def _reduce_88(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 162)
  def _reduce_89(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 164)
  def _reduce_90(val, _values)
     :local
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 166)
  def _reduce_91(val, _values)
     :abstract
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 169)
  def _reduce_92(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 171)
  def _reduce_93(val, _values)
     :pseudo
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 173)
  def _reduce_94(val, _values)
     :none
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.ry', 187)
  def _reduce_105(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 188)
  def _reduce_106(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 190)
  def _reduce_107(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.ry', 195)
  def _reduce_109(val, _values)
     @d.end_home(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 198)
  def _reduce_110(val, _values)
     @d.define_home(val[1], val[3], val[7], val[9], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 200)
  def _reduce_111(val, _values)
     @d.define_home(val[1], val[3], val[7], nil, val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 202)
  def _reduce_112(val, _values)
     @d.define_home(val[1], val[3], val[5], val[7], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 204)
  def _reduce_113(val, _values)
     @d.define_home(val[1], nil, val[5], val[7], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 206)
  def _reduce_114(val, _values)
     @d.define_home(val[1], nil, val[5], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 208)
  def _reduce_115(val, _values)
     @d.define_home(val[1], val[3], val[5], nil, nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 210)
  def _reduce_116(val, _values)
     @d.define_home(val[1], nil, val[3], val[5], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 212)
  def _reduce_117(val, _values)
     @d.define_home(val[1], nil, val[3], nil, nil)
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.ry', 228)
  def _reduce_126(val, _values)
     @d.end_porttype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 231)
  def _reduce_127(val, _values)
     @d.define_porttype(val[1])
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.ry', 244)
  def _reduce_135(val, _values)
     @d.declare_component(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 247)
  def _reduce_136(val, _values)
     @d.end_component(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 250)
  def _reduce_137(val, _values)
     @d.define_component(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 252)
  def _reduce_138(val, _values)
     @d.define_component(val[1], val[3], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 254)
  def _reduce_139(val, _values)
     @d.define_component(val[1], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 256)
  def _reduce_140(val, _values)
     @d.define_component(val[1], nil, nil)
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.ry', 275)
  def _reduce_153(val, _values)
     @d.end_connector(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 278)
  def _reduce_154(val, _values)
     @d.define_connector(val[1], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 280)
  def _reduce_155(val, _values)
     @d.define_connector(val[1], nil)
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.ry', 292)
  def _reduce_163(val, _values)
     @d.declare_port(val[2], :facet, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 295)
  def _reduce_164(val, _values)
     @d.declare_port(val[3], :receptacle, val[2], true)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 297)
  def _reduce_165(val, _values)
     @d.declare_port(val[2], :receptacle, val[1], false)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 300)
  def _reduce_166(val, _values)
     @d.declare_port(val[2], :publisher, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 303)
  def _reduce_167(val, _values)
     @d.declare_port(val[2], :emitter, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 306)
  def _reduce_168(val, _values)
     @d.declare_port(val[2], :consumer, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 309)
  def _reduce_169(val, _values)
     @d.declare_port(val[2], :port, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 311)
  def _reduce_170(val, _values)
     @d.declare_port(val[2], :mirrorport, val[1])
  end
.,.,

# reduce 171 omitted

# reduce 172 omitted

module_eval(<<'.,.,', 'parser.ry', 316)
  def _reduce_173(val, _values)
     @d.parse_scopedname(*val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 318)
  def _reduce_174(val, _values)
     [false, [val[0]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 319)
  def _reduce_175(val, _values)
     [true,  [val[1]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 321)
  def _reduce_176(val, _values)
     val[0][1] << val[2]; val[0]
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

module_eval(<<'.,.,', 'parser.ry', 327)
  def _reduce_179(val, _values)
     @d.declare_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 329)
  def _reduce_180(val, _values)
     @d.declare_eventtype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 332)
  def _reduce_181(val, _values)
     @d.end_eventtype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 335)
  def _reduce_182(val, _values)
     @d.define_eventtype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 337)
  def _reduce_183(val, _values)
     @d.define_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 339)
  def _reduce_184(val, _values)
     @d.define_eventtype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 341)
  def _reduce_185(val, _values)
     @d.define_eventtype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 343)
  def _reduce_186(val, _values)
     @d.define_eventtype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 345)
  def _reduce_187(val, _values)
     @d.define_eventtype(val[1], :none)
  end
.,.,

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

module_eval(<<'.,.,', 'parser.ry', 352)
  def _reduce_191(val, _values)
     @d.declare_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 354)
  def _reduce_192(val, _values)
     @d.declare_valuetype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 357)
  def _reduce_193(val, _values)
     @d.define_valuebox(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 360)
  def _reduce_194(val, _values)
     @d.end_valuetype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 363)
  def _reduce_195(val, _values)
     @d.define_valuetype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 365)
  def _reduce_196(val, _values)
     @d.define_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 367)
  def _reduce_197(val, _values)
     @d.define_valuetype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 369)
  def _reduce_198(val, _values)
     @d.define_valuetype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 371)
  def _reduce_199(val, _values)
     @d.define_valuetype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 373)
  def _reduce_200(val, _values)
     @d.define_valuetype(val[1], :none)
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

module_eval(<<'.,.,', 'parser.ry', 379)
  def _reduce_203(val, _values)
     Hash[ :base => val[0], :supports => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 381)
  def _reduce_204(val, _values)
     Hash[ :base => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 383)
  def _reduce_205(val, _values)
     Hash[ :supports => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 386)
  def _reduce_206(val, _values)
     Hash[ :truncatable => true, :list => val[2] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 388)
  def _reduce_207(val, _values)
     Hash[ :truncatable => false, :list => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 391)
  def _reduce_208(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 393)
  def _reduce_209(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 394)
  def _reduce_210(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

module_eval(<<'.,.,', 'parser.ry', 404)
  def _reduce_215(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], true) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 409)
  def _reduce_216(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], false) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 414)
  def _reduce_217(val, _values)
      @d.declare_initializer(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 416)
  def _reduce_218(val, _values)
      @d.declare_initializer(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 418)
  def _reduce_219(val, _values)
      @d.declare_initializer(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 420)
  def _reduce_220(val, _values)
      @d.declare_initializer(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 423)
  def _reduce_221(val, _values)
      @d.declare_finder(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 425)
  def _reduce_222(val, _values)
      @d.declare_finder(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 427)
  def _reduce_223(val, _values)
      @d.declare_finder(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 429)
  def _reduce_224(val, _values)
      @d.declare_finder(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 431)
  def _reduce_225(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 432)
  def _reduce_226(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 435)
  def _reduce_227(val, _values)
     [val[1], val[2]]
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'parser.ry', 440)
  def _reduce_229(val, _values)
     @d.define_typeprefix(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 443)
  def _reduce_230(val, _values)
     @d.define_typeid(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 446)
  def _reduce_231(val, _values)
     @d.define_const(val[1], val[2], val[4])
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

module_eval(<<'.,.,', 'parser.ry', 463)
  def _reduce_244(val, _values)
     Expression::Operation::Or.new(val[0], val[2])
  end
.,.,

# reduce 245 omitted

module_eval(<<'.,.,', 'parser.ry', 467)
  def _reduce_246(val, _values)
     Expression::Operation::Xor.new(val[0], val[2])
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'parser.ry', 471)
  def _reduce_248(val, _values)
     Expression::Operation::And.new(val[0], val[2])
  end
.,.,

# reduce 249 omitted

module_eval(<<'.,.,', 'parser.ry', 475)
  def _reduce_250(val, _values)
     Expression::Operation::RShift.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 477)
  def _reduce_251(val, _values)
     Expression::Operation::LShift.new(val[0], val[2])
  end
.,.,

# reduce 252 omitted

module_eval(<<'.,.,', 'parser.ry', 481)
  def _reduce_253(val, _values)
     Expression::Operation::Add.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 483)
  def _reduce_254(val, _values)
     Expression::Operation::Minus.new(val[0], val[2])
  end
.,.,

# reduce 255 omitted

module_eval(<<'.,.,', 'parser.ry', 487)
  def _reduce_256(val, _values)
     Expression::Operation::Mult.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 489)
  def _reduce_257(val, _values)
     Expression::Operation::Div.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 491)
  def _reduce_258(val, _values)
     Expression::Operation::Mod.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 493)
  def _reduce_259(val, _values)
     val[0].new(val[1])
  end
.,.,

# reduce 260 omitted

module_eval(<<'.,.,', 'parser.ry', 496)
  def _reduce_261(val, _values)
     Expression::Operation::UnaryMinus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 497)
  def _reduce_262(val, _values)
     Expression::Operation::UnaryPlus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 498)
  def _reduce_263(val, _values)
     Expression::Operation::UnaryNot
  end
.,.,

# reduce 264 omitted

# reduce 265 omitted

module_eval(<<'.,.,', 'parser.ry', 503)
  def _reduce_266(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 505)
  def _reduce_267(val, _values)
     @d.parse_literal(:integer, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 506)
  def _reduce_268(val, _values)
     @d.parse_literal(:string,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 507)
  def _reduce_269(val, _values)
     @d.parse_literal(:wstring, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 508)
  def _reduce_270(val, _values)
     @d.parse_literal(:char,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 509)
  def _reduce_271(val, _values)
     @d.parse_literal(:wchar,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 510)
  def _reduce_272(val, _values)
     @d.parse_literal(:fixed,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 511)
  def _reduce_273(val, _values)
     @d.parse_literal(:float,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 512)
  def _reduce_274(val, _values)
     @d.parse_literal(:boolean, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 514)
  def _reduce_275(val, _values)
     true
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 515)
  def _reduce_276(val, _values)
     false
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 517)
  def _reduce_277(val, _values)
     @d.parse_positive_int(val[0])
  end
.,.,

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

module_eval(<<'.,.,', 'parser.ry', 529)
  def _reduce_285(val, _values)
                          dcls = parse_type_declarator(val[0], val[1])
                      dcls.each do |d|
                        @d.declare_typedef(d[0], d[1])
                      end

  end
.,.,

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

module_eval(<<'.,.,', 'parser.ry', 561)
  def _reduce_307(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 562)
  def _reduce_308(val, _values)
     val[0] << val[2]
  end
.,.,

# reduce 309 omitted

# reduce 310 omitted

module_eval(<<'.,.,', 'parser.ry', 567)
  def _reduce_311(val, _values)
     @d.declare_typedef(::IDL::Type::Native.new, val[0])
  end
.,.,

# reduce 312 omitted

# reduce 313 omitted

module_eval(<<'.,.,', 'parser.ry', 573)
  def _reduce_314(val, _values)
     ::IDL::Type::Float.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 574)
  def _reduce_315(val, _values)
     ::IDL::Type::Double.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 575)
  def _reduce_316(val, _values)
     ::IDL::Type::LongDouble.new
  end
.,.,

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

module_eval(<<'.,.,', 'parser.ry', 584)
  def _reduce_322(val, _values)
     ::IDL::Type::Short.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 586)
  def _reduce_323(val, _values)
     ::IDL::Type::Long.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 588)
  def _reduce_324(val, _values)
     ::IDL::Type::LongLong.new
  end
.,.,

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

module_eval(<<'.,.,', 'parser.ry', 594)
  def _reduce_328(val, _values)
     ::IDL::Type::UShort.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 596)
  def _reduce_329(val, _values)
     ::IDL::Type::ULong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 599)
  def _reduce_330(val, _values)
     ::IDL::Type::ULongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 601)
  def _reduce_331(val, _values)
     ::IDL::Type::Char.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 603)
  def _reduce_332(val, _values)
     ::IDL::Type::WChar.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 605)
  def _reduce_333(val, _values)
     ::IDL::Type::Boolean.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 607)
  def _reduce_334(val, _values)
     ::IDL::Type::Octet.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 609)
  def _reduce_335(val, _values)
     ::IDL::Type::Any.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 611)
  def _reduce_336(val, _values)
     ::IDL::Type::Object.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 613)
  def _reduce_337(val, _values)
     @d.declare_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 616)
  def _reduce_338(val, _values)
     @d.end_struct(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 618)
  def _reduce_339(val, _values)
     @d.define_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 620)
  def _reduce_340(val, _values)
     nil
  end
.,.,

# reduce 341 omitted

# reduce 342 omitted

module_eval(<<'.,.,', 'parser.ry', 628)
  def _reduce_343(val, _values)
                 dcls = parse_type_declarator(val[0], val[1])
             dcls.each do |d|
               @d.declare_member(d[0], d[1])
             end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 635)
  def _reduce_344(val, _values)
     @d.declare_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 638)
  def _reduce_345(val, _values)
     @d.end_union(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 641)
  def _reduce_346(val, _values)
     @d.define_union_switchtype(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 644)
  def _reduce_347(val, _values)
     @d.define_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 646)
  def _reduce_348(val, _values)
     nil
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 649)
  def _reduce_349(val, _values)
     val[2]
  end
.,.,

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

module_eval(<<'.,.,', 'parser.ry', 662)
  def _reduce_357(val, _values)
                     dcls = parse_type_declarator(val[1][0], [val[1][1]])
                 dcls.each do |d|
                   @d.define_case(val[0], d[0], d[1])
                 end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 668)
  def _reduce_358(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 669)
  def _reduce_359(val, _values)
     val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 671)
  def _reduce_360(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 672)
  def _reduce_361(val, _values)
     :default
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 675)
  def _reduce_362(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 678)
  def _reduce_363(val, _values)
     @d.end_enum(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 680)
  def _reduce_364(val, _values)
     @d.define_enum(val[1])
  end
.,.,

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

module_eval(<<'.,.,', 'parser.ry', 688)
  def _reduce_368(val, _values)
                     @d.declare_enumerator(val[0])

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 692)
  def _reduce_369(val, _values)
     ::IDL::Type::Sequence.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 694)
  def _reduce_370(val, _values)
     ::IDL::Type::Sequence.new(val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 697)
  def _reduce_371(val, _values)
     ::IDL::Type::String.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 699)
  def _reduce_372(val, _values)
     ::IDL::Type::String.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 702)
  def _reduce_373(val, _values)
     ::IDL::Type::WString.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 704)
  def _reduce_374(val, _values)
     ::IDL::Type::WString.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 706)
  def _reduce_375(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 708)
  def _reduce_376(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 709)
  def _reduce_377(val, _values)
    val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 711)
  def _reduce_378(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 714)
  def _reduce_379(val, _values)
      dcls = parse_type_declarator(val[2], val[3][0])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1], true).get_raises = val[3][1]
                        end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 720)
  def _reduce_380(val, _values)
      att = @d.declare_attribute(val[1], val[2])
                        att.get_raises = val[3][0] unless val[3][0].empty?
                        att.set_raises = val[3][1] unless val[3][1].empty?

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 725)
  def _reduce_381(val, _values)
      dcls = parse_type_declarator(val[1], val[2])
                        dcls.each do |d|
                          att = @d.declare_attribute(d[0], d[1])
                        end

  end
.,.,

# reduce 382 omitted

# reduce 383 omitted

# reduce 384 omitted

# reduce 385 omitted

# reduce 386 omitted

module_eval(<<'.,.,', 'parser.ry', 737)
  def _reduce_387(val, _values)
     [val[0], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 739)
  def _reduce_388(val, _values)
     [val[1], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 741)
  def _reduce_389(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 743)
  def _reduce_390(val, _values)
     [[], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 745)
  def _reduce_391(val, _values)
     [[], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 748)
  def _reduce_392(val, _values)
     [val[0]].concat(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 751)
  def _reduce_393(val, _values)
      [[val[0]], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 752)
  def _reduce_394(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 754)
  def _reduce_395(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 755)
  def _reduce_396(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 758)
  def _reduce_397(val, _values)
     @d.end_exception(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 760)
  def _reduce_398(val, _values)
     @d.define_exception(val[1])
  end
.,.,

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

module_eval(<<'.,.,', 'parser.ry', 769)
  def _reduce_403(val, _values)
     @d.declare_op_header(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 771)
  def _reduce_404(val, _values)
     @d.declare_op_header(nil, val[0], val[1])
  end
.,.,

# reduce 405 omitted

module_eval(<<'.,.,', 'parser.ry', 776)
  def _reduce_406(val, _values)
     @d.declare_op_footer(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 778)
  def _reduce_407(val, _values)
     @d.declare_op_footer(val[0], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 780)
  def _reduce_408(val, _values)
     @d.declare_op_footer(nil, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 782)
  def _reduce_409(val, _values)
     @d.declare_op_footer(nil,nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 784)
  def _reduce_410(val, _values)
     :oneway
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 786)
  def _reduce_411(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 787)
  def _reduce_412(val, _values)
     ::IDL::Type::Void.new
  end
.,.,

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

module_eval(<<'.,.,', 'parser.ry', 796)
  def _reduce_417(val, _values)
     @d.declare_op_parameter(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 798)
  def _reduce_418(val, _values)
     :in
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 799)
  def _reduce_419(val, _values)
     :out
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 800)
  def _reduce_420(val, _values)
     :inout
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 802)
  def _reduce_421(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 804)
  def _reduce_422(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 806)
  def _reduce_423(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 808)
  def _reduce_424(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 809)
  def _reduce_425(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 811)
  def _reduce_426(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 813)
  def _reduce_427(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 814)
  def _reduce_428(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 816)
  def _reduce_429(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 817)
  def _reduce_430(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 818)
  def _reduce_431(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 819)
  def _reduce_432(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 823)
  def _reduce_433(val, _values)
     IDL::Type::Fixed.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 825)
  def _reduce_434(val, _values)
     ::IDL::Type::Fixed.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 827)
  def _reduce_435(val, _values)
     ::IDL::Type::ValueBase.new
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end #of module IDL
