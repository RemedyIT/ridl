#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

###### racc/parser.rb begin
unless $".find {|p| p.end_with?('/racc/parser.rb')}
$".push "#{__dir__}/racc/parser.rb"
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
# frozen_string_literal: false
#--
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#++

unless $".find {|p| p.end_with?('/racc/info.rb')}
$".push "#{__dir__}/racc/info.rb"
#--
#
#
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
# see the file "COPYING".
#
#++

module Racc
  VERSION   = '1.7.1'
  Version = VERSION
  Copyright = 'Copyright (c) 1999-2006 Minero Aoki'
end

end


unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError # :nodoc:
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--executable=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+grammarfile+]
#   Racc grammar file. Any extension is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammar file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is ruby license, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extensions)
    Racc_No_Extensions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Core_Version_R = ::Racc::VERSION

    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end

      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extensions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def do_parse
      #{Racc_Main_Parsing_Routine}(_racc_setup(), false)
    end
    RUBY

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def yyparse(recv, mid)
      #{Racc_YY_Parse_Method}(recv, mid, _racc_setup(), false)
    end
    RUBY

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is +Symbol_Value_Stack[0]+.
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end

require 'ridl/delegate'

module IDL

class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 849)

def parse_type_declarator(type_spec, declarators)
  ret = Array.new
  t = type_spec
  declarators.each do |d|
    case d
    when ::String, IDL::Scanner::Identifier
      ret << [t, d]
    when ::Array # array_declarator -> [identifier, size]
      ret << [IDL::Type::Array.new(t, d[1]), d[0]]
    else
      raise RuntimeError, "unknown declarator: #{d.inspect}"
    end
  end
  ret
end

#attr_accessor :default_namespace, :output
attr_accessor :yydebug
def initialize(params = {})
  @d = ::IDL::Delegator.new(params)
  @params = params
  @idlversion = params[:idlversion]
end

alias on_error0 on_error
def on_error(err_tok, err_val, _value)
  begin
    on_error0(err_tok, err_val, _value)
  rescue IDL::ParseError
    raise
  rescue
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
end

def parse(src)
  @scanner = Scanner.new(src, self, @params)
  @d.pre_parse
  begin
    do_parse
  rescue IDL::ParseError
    raise
  rescue
    STDERR.puts "#{$!}\n#{$!.backtrace.join("\n")}" if IDL.verbose_level>0
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
  @d.post_parse
end

def visit_nodes(walker)
  @d.visit_nodes(walker)
end

def pragma_prefix(s)
  @d.pragma_prefix(s)
end

def pragma_version(id, major, minor)
  @d.pragma_version(id, major, minor)
end

def pragma_id(id, repo_id)
  @d.pragma_id(id, repo_id)
end

def handle_pragma(s)
  @d.handle_pragma(s)
end

def is_included?(s)
  @d.is_included?(s)
end

def enter_include(s, fp)
  @d.enter_include(s, fp)
end

def leave_include()
  @d.leave_include
end

def declare_include(s)
  @d.declare_include(s)
end

def define_annotation(*args)
  @d.define_annotation(*args)
end

def next_token
  ret = @scanner.next_token
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
  -199,   441,   634,   122,   627,   122,   506,   551,    76,    92,
   552,    65,    69,   455,    71,   194,    77,   122,   690,    78,
   350,   330,   349,   331,   469,   690,   122,   122,   122,   302,
   303,   721,   294,   723,   295,   296,   330,    94,   331,    94,
   633,   302,   303,    94,   315,   316,   317,   318,   319,   302,
   303,    94,   302,   303,   449,   412,   689,   122,   318,   319,
    94,    94,    94,   693,   721,    65,    69,    73,    71,   720,
    55,   722,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   190,
   191,    94,   191,    79,   195,   163,   164,   371,   372,   272,
   273,    53,   748,    54,   628,   629,   553,    80,   557,   196,
   197,   272,   273,   191,   191,   330,   557,   331,    81,   272,
   273,    82,   272,   273,    56,    62,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   190,   191,   302,   303,   721,    83,   163,
   164,   318,   319,   272,   273,   277,   279,   430,   122,   122,
    84,   122,   122,   122,   197,   558,   559,    65,    69,    73,
    71,    85,    55,   558,   559,   122,   122,   302,   303,   122,
   315,   316,   317,   318,   319,   749,   -84,   122,   122,   122,
   122,   122,    94,    94,   477,    94,    94,    94,   292,   590,
   636,   293,   640,    53,    86,    54,   496,   260,    87,    94,
    94,    88,   522,    94,    89,   272,   273,   523,    90,   122,
   122,    94,    94,    94,    94,    94,    56,    62,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   190,   191,   272,   273,   118,
   117,   163,   164,    94,    94,   272,   273,   277,   279,   482,
   248,   122,   122,   122,    91,   250,   197,   122,   122,    65,
    69,    73,    71,   -86,    55,   122,   122,   122,   122,   249,
   251,   252,   253,   254,   255,   257,   258,   122,   122,   122,
   122,   122,   122,   122,   260,    94,    94,    94,   337,   338,
   292,    94,    94,    95,   641,    53,   640,    54,    96,    94,
    94,    94,    94,   347,   348,   122,   122,   122,   122,   371,
   372,    94,    94,    94,    94,    94,    94,    94,    56,    62,
   136,   137,   138,   145,   146,   147,   148,   149,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   190,   191,    94,
    94,    94,    94,   163,   164,    97,  -139,   272,   273,   277,
   279,   490,  -186,   122,    98,  -182,  -195,    99,   197,   -88,
   100,    65,    69,    73,    71,   101,    55,   304,   105,   305,
   102,   104,   103,   330,   106,   331,   330,   330,   331,   331,
   260,   403,   404,   405,   403,   404,   405,    94,   381,   382,
   337,   338,   292,   403,   404,   405,   107,    53,   108,    54,
   391,   361,   394,   395,   109,   503,   110,   122,   399,   400,
   401,   402,   563,   564,   111,    65,    69,   112,    71,   194,
    56,    62,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   190,
   191,    94,   587,   586,   113,   163,   164,   399,   400,   272,
   273,   277,   279,   401,   402,   401,   402,   699,   698,   524,
   197,   122,   754,   721,   114,   115,   116,   119,   120,    65,
    69,   199,    71,   194,   200,   201,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   190,   191,    94,   202,   203,   195,   163,
   164,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   205,   207,   196,   197,   122,   208,   210,   211,   212,
   -20,   215,   216,    65,    69,   284,    71,   194,   285,   286,
   136,   137,   138,   145,   146,   147,   148,   149,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   190,   191,    94,
   326,   339,   195,   163,   164,   340,   215,   344,   345,   346,
   351,   352,   357,   359,   360,   361,   362,   196,   197,   363,
   122,  -349,  -357,   373,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   136,   137,   138,   145,   146,   147,
   148,   149,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   190,   191,   376,    94,   380,   195,   163,   164,   383,
   248,   384,   385,   386,   387,   250,   388,   389,   390,   393,
   396,   196,   197,   244,   243,   122,   397,   398,   245,   249,
   251,   252,   253,   254,   255,   257,   258,   414,   415,   136,
   137,   138,   145,   146,   147,   148,   149,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   190,   191,   122,    94,
   416,   417,   163,   164,   418,   248,    65,    69,    73,    71,
   250,    55,   419,   420,   421,   425,   196,   197,   244,   243,
   427,   432,   433,   245,   249,   251,   252,   253,   254,   255,
   257,   258,    94,   434,   435,   443,   444,   445,   457,   458,
   459,   460,    53,   461,    54,   462,   463,   471,   472,   473,
   474,   331,   484,   485,   491,   492,   496,   499,   357,   512,
   526,   529,   530,   542,   543,    56,    62,   136,   137,   138,
   145,   146,   147,   148,   149,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   190,   191,   545,   560,   122,   561,
   163,   164,   562,   122,   272,   273,   277,   279,   543,   565,
   566,    65,    69,    73,    71,   197,    55,   567,   569,   570,
   543,   571,   572,   573,   574,   575,   577,   543,   357,   357,
   581,   582,    94,   357,   499,   588,   589,    94,   248,   591,
   357,   593,   292,   250,   348,   293,   594,    53,   376,    54,
   393,   244,   243,   397,   398,   545,   245,   249,   251,   252,
   253,   254,   255,   257,   258,   552,   631,   632,   648,   577,
    56,    62,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   190,
   191,   496,   496,   122,   651,   163,   164,   655,   122,   272,
   273,   277,   279,   658,   659,   660,    65,    69,    73,    71,
   197,    55,   661,   662,   663,   664,   665,   666,   667,   668,
   669,   670,   671,   672,   551,   675,   629,    94,   628,   545,
   680,   681,    94,   248,   685,   337,   338,   292,   250,   545,
   551,   551,    53,   694,    54,   695,   244,   243,   696,   697,
   700,   245,   249,   251,   252,   253,   254,   255,   257,   258,
   716,   545,   675,   551,   640,    56,    62,   136,   137,   138,
   145,   146,   147,   148,   149,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   190,   191,   545,   551,   734,   735,
   163,   164,   736,   122,   272,   273,   277,   279,   737,   738,
   739,    65,    69,    73,    71,   197,    55,   740,   741,   742,
   743,   744,   745,   746,   751,   752,   753,   756,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,   nil,   nil,
   337,   338,   292,   nil,   nil,   nil,   nil,    53,   nil,    54,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    65,    69,   nil,    71,   194,
    56,    62,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   190,
   191,    94,   nil,   nil,   nil,   163,   164,   nil,   nil,   272,
   273,   277,   279,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   197,   122,   nil,   122,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   190,   191,    94,   nil,    94,   195,   163,
   164,   nil,   nil,   248,   nil,   nil,   nil,   nil,   250,   nil,
   nil,   nil,   nil,   196,   197,   122,   244,   243,   nil,   nil,
   nil,   245,   249,   251,   252,   253,   254,   255,   257,   258,
   136,   137,   138,   145,   146,   147,   148,   149,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   190,   191,    94,
   nil,   nil,   nil,   163,   164,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,   122,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,    69,   nil,
    71,   194,   nil,   nil,   136,   137,   138,   145,   146,   147,
   148,   149,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   190,   191,    94,   nil,   nil,   nil,   163,   164,   nil,
   nil,   nil,   nil,   nil,   279,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   197,   122,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    65,    69,   nil,    71,   194,   nil,   nil,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   190,   191,    94,   nil,   nil,
   195,   163,   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   196,   197,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,
   nil,   nil,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   190,
   191,    94,   nil,   nil,   195,   163,   164,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   196,
   197,   122,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   194,   nil,   nil,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   190,   191,    94,   nil,   nil,   nil,   163,
   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   196,   197,   122,   122,   nil,   nil,   nil,
   nil,   nil,   nil,    65,    69,   nil,    71,   194,   nil,   nil,
   136,   137,   138,   145,   146,   147,   148,   149,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   190,   191,    94,
    94,   nil,   nil,   163,   164,   nil,   248,   nil,   nil,   nil,
   nil,   250,   nil,   nil,   nil,   nil,   nil,   196,   197,   244,
   243,   nil,   nil,   nil,   245,   249,   251,   252,   253,   254,
   255,   257,   258,   nil,   136,   137,   138,   145,   146,   147,
   148,   149,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   190,   191,   122,   371,   372,   195,   163,   164,   nil,
   nil,   nil,   nil,   nil,   nil,   194,   nil,   nil,   nil,   nil,
   nil,   196,   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,   nil,   nil,
   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,   250,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   244,   243,   122,   nil,
   122,   245,   249,   251,   252,   253,   254,   255,   257,   258,
   nil,   nil,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   190,
   191,   nil,    94,   nil,    94,   163,   164,   nil,   nil,   nil,
   248,   nil,   nil,   nil,   nil,   250,   nil,   nil,   nil,   196,
   197,   nil,   122,   244,   243,   nil,   nil,   nil,   245,   249,
   251,   252,   253,   254,   255,   257,   258,   136,   137,   138,
   145,   146,   147,   148,   149,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   190,   191,    94,   nil,   nil,   nil,
   163,   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   197,   122,   nil,   122,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,   nil,
   nil,   136,   137,   138,   145,   146,   147,   148,   149,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   190,   191,
    94,   nil,    94,   nil,   163,   164,   nil,   nil,   248,   nil,
   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,   197,
   122,   244,   243,   nil,   nil,   nil,   245,   249,   251,   252,
   253,   254,   255,   257,   258,   136,   137,   138,   145,   146,
   147,   148,   149,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   190,   191,    94,   nil,   nil,   nil,   163,   164,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   196,   197,   122,   122,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,
   137,   138,   145,   146,   147,   148,   149,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   190,   191,    94,    94,
   nil,   nil,   163,   164,   nil,   248,   nil,   nil,   nil,   nil,
   250,   nil,   nil,   nil,   nil,   nil,   122,   197,   244,   243,
   nil,   nil,   nil,   245,   249,   251,   252,   253,   254,   255,
   257,   258,   nil,   136,   137,   138,   145,   146,   147,   148,
   149,   154,   155,   156,   157,   158,   159,   160,   161,   162,
    94,   nil,   nil,   nil,   nil,   nil,   163,   164,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,   nil,
   165,   122,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    71,
   nil,   nil,   nil,   nil,   nil,   136,   137,   138,   145,   146,
   147,   148,   149,   154,   155,   156,   157,   158,   159,   160,
   161,   162,    94,   nil,   nil,    94,   nil,   nil,   163,   164,
   nil,   248,   nil,   nil,   nil,   nil,   250,   nil,   nil,   nil,
   nil,   nil,   165,   nil,   244,   243,   nil,   nil,   nil,   245,
   249,   251,   252,   253,   254,   255,   257,   258,   nil,   513,
   145,   146,   147,   148,   149,   154,   155,   156,   157,   158,
   159,   160,   161,   162,    74,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,    32,    51,    45,    65,    69,
    73,    71,   nil,    55,   nil,    28,    29,    31,   nil,    34,
   nil,   nil,   nil,    36,    39,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,   nil,
   nil,   nil,   378,    19,   nil,   nil,   nil,    56,    62,    32,
    51,    45,    65,    69,    73,    71,   nil,    55,   nil,    28,
    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,    42,
   nil,   nil,    94,   nil,   nil,   nil,   nil,   nil,   248,    47,
   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,    53,   nil,
    54,   244,   243,   nil,   nil,   nil,   245,   249,   251,   252,
   253,   254,   255,   257,   258,   nil,   656,   596,   nil,   nil,
   nil,    56,    62,    32,    51,    45,    65,    69,    73,    71,
   nil,    55,   614,    28,    29,    31,   nil,    34,   nil,   nil,
   nil,    36,    39,    42,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    53,   nil,    54,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   732,   596,   nil,   nil,   nil,    56,    62,    32,    51,    45,
    65,    69,    73,    71,   nil,    55,   nil,    28,    29,    31,
   nil,    34,   nil,   nil,   nil,    36,    39,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    53,    19,    54,   nil,
   nil,   nil,   nil,    32,    51,    45,    65,    69,    73,    71,
   nil,    55,   nil,    28,    29,    31,   nil,    34,   nil,    56,
    62,    36,    39,    42,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    53,    19,    54,   nil,   nil,   nil,   nil,    32,
    51,    45,    65,    69,    73,    71,   nil,    55,   nil,    28,
    29,    31,   nil,    34,   nil,    56,    62,    36,    39,    42,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,   596,
    54,   nil,   nil,   nil,   nil,    32,    51,    45,    65,    69,
    73,    71,   nil,    55,   614,    28,    29,    31,   nil,    34,
   nil,    56,    62,    36,    39,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   122,   nil,   nil,   nil,    53,   596,    54,   nil,   nil,   nil,
   nil,    32,    51,    45,    65,    69,    73,    71,   nil,    55,
   nil,    28,    29,    31,   nil,    34,   nil,    56,    62,    36,
    39,    42,   nil,   nil,    94,   122,   nil,   nil,   nil,   nil,
   248,    47,   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,
    53,   nil,    54,   244,   243,   nil,   nil,   nil,   245,   249,
   251,   252,   253,   254,   255,   257,   258,   nil,   122,    94,
   nil,   nil,   nil,    56,    62,   248,   nil,   nil,   nil,   nil,
   250,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,   243,
   nil,   nil,   nil,   245,   249,   251,   252,   253,   254,   255,
   257,   258,    94,   122,   nil,   nil,   nil,   nil,   248,   nil,
   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   244,   243,   nil,   nil,   nil,   245,   249,   251,   252,
   253,   254,   255,   257,   258,   nil,   122,    94,   nil,   nil,
   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,   250,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   244,   243,   nil,   nil,
   nil,   245,   249,   251,   252,   253,   254,   255,   257,   258,
    94,   122,   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,
   nil,   250,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,
   243,   nil,   nil,   nil,   245,   249,   251,   252,   253,   254,
   255,   257,   258,   nil,   122,    94,   nil,   nil,   nil,   nil,
   nil,   248,   nil,   nil,   nil,   nil,   250,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   244,   243,   nil,   nil,   nil,   245,
   249,   251,   252,   253,   254,   255,   257,   258,    94,   122,
   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,   250,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,   243,   nil,
   nil,   nil,   245,   249,   251,   252,   253,   254,   255,   257,
   258,   nil,   122,    94,   nil,   nil,   nil,   nil,   nil,   248,
   nil,   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   244,   243,   nil,   nil,   nil,   245,   249,   251,
   252,   253,   254,   255,   257,   258,    94,   122,   nil,   nil,
   nil,   nil,   248,   nil,   nil,   nil,   nil,   250,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   243,   nil,   nil,   nil,
   245,   249,   251,   252,   253,   254,   255,   257,   258,   nil,
   nil,    94,   nil,   nil,   nil,   nil,   nil,   248,   nil,   nil,
   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   244,   243,   nil,   nil,   nil,   245,   249,   251,   252,   253,
   254,   255,   257,   258 ]

racc_action_check = [
   119,   297,   554,   119,   546,   302,   367,   423,     3,    19,
   423,   119,   119,   306,   119,   119,     4,    53,   637,     5,
   155,   119,   155,   119,   320,   642,   303,   449,    54,   297,
   297,   682,   108,   684,   108,   108,   339,   119,   339,   302,
   554,   306,   306,    19,   306,   306,   306,   306,   306,   109,
   109,    53,   320,   320,   303,   263,   637,   263,   320,   320,
   303,   449,    54,   642,   718,   263,   263,   263,   263,   682,
   263,   684,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   263,   302,     6,   119,   119,   119,   367,   367,   297,
   297,   263,   718,   263,   546,   546,   425,     7,   425,   119,
   119,   306,   306,   303,   449,   340,   634,   340,     8,   109,
   109,     9,   320,   320,   263,   263,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   113,   113,   719,    10,   263,
   263,   113,   113,   263,   263,   263,   263,   287,   330,   287,
    11,   260,   294,   295,   263,   425,   425,   287,   287,   287,
   287,    12,   287,   634,   634,   296,   304,   112,   112,   305,
   112,   112,   112,   112,   112,   719,    96,   315,   316,   317,
   318,   319,   330,   287,   330,   260,   294,   295,   287,   505,
   561,   287,   561,   287,    13,   287,   505,    96,    14,   296,
   304,    15,   374,   305,    16,   113,   113,   374,    17,   326,
   241,   315,   316,   317,   318,   319,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   112,   112,    47,
    47,   287,   287,   326,   241,   287,   287,   287,   287,   332,
   241,   332,   331,   477,    18,   241,   287,   543,   563,   332,
   332,   332,   332,    97,   332,   564,   565,   566,   570,   241,
   241,   241,   241,   241,   241,   241,   241,   577,   614,   631,
   680,   681,   694,   695,    97,   332,   331,   477,   332,   332,
   332,   543,   563,    20,   562,   332,   562,   332,    23,   564,
   565,   566,   570,   138,   138,   696,   716,   721,   752,   203,
   203,   577,   614,   631,   680,   681,   694,   695,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   332,   696,
   716,   721,   752,   332,   332,    24,   111,   332,   332,   332,
   332,   343,   115,   343,    25,   285,   286,    26,   332,    98,
    27,   343,   343,   343,   343,    28,   343,   111,    30,   111,
    29,    29,    29,   115,    31,   115,   285,   286,   285,   286,
    98,   239,   239,   239,   537,   537,   537,   343,   217,   217,
   343,   343,   343,   538,   538,   538,    33,   343,    34,   343,
   227,   227,   230,   230,    35,   364,    36,   364,   237,   237,
   238,   238,   436,   436,    39,   364,   364,    40,   364,   364,
   343,   343,   343,   343,   343,   343,   343,   343,   343,   343,
   343,   343,   343,   343,   343,   343,   343,   343,   343,   343,
   343,   364,   500,   500,    41,   343,   343,   534,   534,   343,
   343,   343,   343,   535,   535,   536,   536,   653,   653,   377,
   343,   377,   747,   747,    42,    45,    46,    51,    52,   377,
   377,    62,   377,   377,    63,    64,   364,   364,   364,   364,
   364,   364,   364,   364,   364,   364,   364,   364,   364,   364,
   364,   364,   364,   364,   364,   377,    66,    67,   364,   364,
   364,   382,   382,   382,   382,   382,   382,   382,   382,   382,
   382,    68,    70,   364,   364,    56,    71,    72,    73,    74,
    92,    93,    94,    56,    56,   100,    56,    56,   103,   104,
   377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
   377,   377,   377,   377,   377,   377,   377,   377,   377,    56,
   114,   117,   377,   377,   377,   118,   121,   123,   124,   125,
   163,   164,   167,   192,   193,   194,   195,   377,   377,   196,
    95,   200,   202,   205,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,   207,    95,   215,    56,    56,    56,   219,
    95,   220,   221,   222,   223,    95,   224,   225,   226,   229,
   234,    56,    56,    95,    95,   248,   235,   236,    95,    95,
    95,    95,    95,    95,    95,    95,    95,   265,   266,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    99,   248,
   267,   268,    95,    95,   269,   248,    99,    99,    99,    99,
   248,    99,   270,   271,   272,   274,    95,    95,   248,   248,
   276,   290,   291,   248,   248,   248,   248,   248,   248,   248,
   248,   248,    99,   292,   293,   299,   300,   301,   308,   309,
   310,   311,    99,   312,    99,   313,   314,   322,   323,   324,
   325,   328,   335,   336,   346,   350,   353,   357,   366,   372,
   381,   392,   394,   408,   409,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,   422,   426,   351,   434,
    99,    99,   435,   107,    99,    99,    99,    99,   438,   439,
   440,   107,   107,   107,   107,    99,   107,   446,   450,   451,
   453,   464,   465,   466,   467,   468,   478,   481,   486,   487,
   494,   495,   351,   496,   497,   501,   502,   107,   351,   508,
   510,   511,   107,   351,   513,   107,   514,   107,   523,   107,
   528,   351,   351,   532,   533,   544,   351,   351,   351,   351,
   351,   351,   351,   351,   351,   549,   551,   552,   568,   576,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   578,   579,   352,   585,   107,   107,   596,   116,   107,
   107,   107,   107,   599,   600,   601,   116,   116,   116,   116,
   107,   116,   602,   603,   604,   605,   606,   607,   608,   609,
   610,   611,   612,   613,   617,   618,   625,   352,   626,   627,
   628,   629,   116,   352,   632,   116,   116,   116,   352,   635,
   636,   641,   116,   643,   116,   644,   352,   352,   645,   652,
   654,   352,   352,   352,   352,   352,   352,   352,   352,   352,
   673,   675,   678,   689,   690,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   691,   693,   703,   704,
   116,   116,   705,   120,   116,   116,   116,   116,   706,   707,
   708,   120,   120,   120,   120,   116,   120,   709,   710,   711,
   712,   713,   714,   715,   723,   728,   731,   754,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   120,   nil,   nil,
   120,   120,   120,   nil,   nil,   nil,   nil,   120,   nil,   120,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   201,   201,   nil,   201,   201,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   201,   nil,   nil,   nil,   120,   120,   nil,   nil,   120,
   120,   120,   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   120,   273,   nil,   363,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   201,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   201,   201,   201,   273,   nil,   363,   201,   201,
   201,   nil,   nil,   363,   nil,   nil,   nil,   nil,   363,   nil,
   nil,   nil,   nil,   201,   201,   275,   363,   363,   nil,   nil,
   nil,   363,   363,   363,   363,   363,   363,   363,   363,   363,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   275,
   nil,   nil,   nil,   273,   273,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   273,   337,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   337,   337,   nil,
   337,   337,   nil,   nil,   275,   275,   275,   275,   275,   275,
   275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
   275,   275,   275,   337,   nil,   nil,   nil,   275,   275,   nil,
   nil,   nil,   nil,   nil,   275,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   275,   338,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   338,   338,   nil,   338,   338,   nil,   nil,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   338,   nil,   nil,
   337,   337,   337,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   337,   337,   361,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   361,
   nil,   nil,   338,   338,   338,   338,   338,   338,   338,   338,
   338,   338,   338,   338,   338,   338,   338,   338,   338,   338,
   338,   361,   nil,   nil,   338,   338,   338,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   338,
   338,   362,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   362,   nil,   nil,   361,   361,   361,   361,
   361,   361,   361,   361,   361,   361,   361,   361,   361,   361,
   361,   361,   361,   361,   361,   362,   nil,   nil,   nil,   361,
   361,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   361,   361,   369,   371,   nil,   nil,   nil,
   nil,   nil,   nil,   369,   369,   nil,   369,   369,   nil,   nil,
   362,   362,   362,   362,   362,   362,   362,   362,   362,   362,
   362,   362,   362,   362,   362,   362,   362,   362,   362,   369,
   371,   nil,   nil,   362,   362,   nil,   371,   nil,   nil,   nil,
   nil,   371,   nil,   nil,   nil,   nil,   nil,   362,   362,   371,
   371,   nil,   nil,   nil,   371,   371,   371,   371,   371,   371,
   371,   371,   371,   nil,   369,   369,   369,   369,   369,   369,
   369,   369,   369,   369,   369,   369,   369,   369,   369,   369,
   369,   369,   369,   395,   369,   369,   369,   369,   369,   nil,
   nil,   nil,   nil,   nil,   nil,   395,   nil,   nil,   nil,   nil,
   nil,   369,   369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   395,   nil,   nil,
   nil,   nil,   nil,   395,   nil,   nil,   nil,   nil,   395,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   395,   395,   421,   nil,
   396,   395,   395,   395,   395,   395,   395,   395,   395,   395,
   nil,   nil,   395,   395,   395,   395,   395,   395,   395,   395,
   395,   395,   395,   395,   395,   395,   395,   395,   395,   395,
   395,   nil,   421,   nil,   396,   395,   395,   nil,   nil,   nil,
   396,   nil,   nil,   nil,   nil,   396,   nil,   nil,   nil,   395,
   395,   nil,   556,   396,   396,   nil,   nil,   nil,   396,   396,
   396,   396,   396,   396,   396,   396,   396,   421,   421,   421,
   421,   421,   421,   421,   421,   421,   421,   421,   421,   421,
   421,   421,   421,   421,   421,   421,   556,   nil,   nil,   nil,
   421,   421,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   421,   588,   nil,   397,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   588,   nil,
   nil,   556,   556,   556,   556,   556,   556,   556,   556,   556,
   556,   556,   556,   556,   556,   556,   556,   556,   556,   556,
   588,   nil,   397,   nil,   556,   556,   nil,   nil,   397,   nil,
   nil,   nil,   nil,   397,   nil,   nil,   nil,   nil,   nil,   556,
   639,   397,   397,   nil,   nil,   nil,   397,   397,   397,   397,
   397,   397,   397,   397,   397,   588,   588,   588,   588,   588,
   588,   588,   588,   588,   588,   588,   588,   588,   588,   588,
   588,   588,   588,   588,   639,   nil,   nil,   nil,   588,   588,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   588,   588,    55,   398,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   639,
   639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
   639,   639,   639,   639,   639,   639,   639,   639,    55,   398,
   nil,   nil,   639,   639,   nil,   398,   nil,   nil,   nil,   nil,
   398,   nil,   nil,   nil,   nil,   nil,   228,   639,   398,   398,
   nil,   nil,   nil,   398,   398,   398,   398,   398,   398,   398,
   398,   398,   nil,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
   228,   nil,   nil,   nil,   nil,   nil,    55,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   373,   nil,
    55,   399,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   373,
   nil,   nil,   nil,   nil,   nil,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   373,   nil,   nil,   399,   nil,   nil,   228,   228,
   nil,   399,   nil,   nil,   nil,   nil,   399,   nil,   nil,   nil,
   nil,   nil,   228,   nil,   399,   399,   nil,   nil,   nil,   399,
   399,   399,   399,   399,   399,   399,   399,   399,   nil,   373,
   373,   373,   373,   373,   373,   373,   373,   373,   373,   373,
   373,   373,   373,   373,     1,   nil,   nil,   nil,   nil,     1,
   nil,   nil,   nil,   nil,   nil,     1,     1,     1,     1,     1,
     1,     1,   nil,     1,   nil,     1,     1,     1,   nil,     1,
   nil,   nil,   nil,     1,     1,     1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     1,   nil,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   400,   nil,
   nil,   nil,   213,   213,   nil,   nil,   nil,     1,     1,   213,
   213,   213,   213,   213,   213,   213,   nil,   213,   nil,   213,
   213,   213,   nil,   213,   nil,   nil,   nil,   213,   213,   213,
   nil,   nil,   400,   nil,   nil,   nil,   nil,   nil,   400,   213,
   nil,   nil,   nil,   400,   nil,   nil,   nil,   nil,   213,   nil,
   213,   400,   400,   nil,   nil,   nil,   400,   400,   400,   400,
   400,   400,   400,   400,   400,   nil,   597,   597,   nil,   nil,
   nil,   213,   213,   597,   597,   597,   597,   597,   597,   597,
   nil,   597,   597,   597,   597,   597,   nil,   597,   nil,   nil,
   nil,   597,   597,   597,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   597,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   597,   nil,   597,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   701,   701,   nil,   nil,   nil,   597,   597,   701,   701,   701,
   701,   701,   701,   701,   nil,   701,   nil,   701,   701,   701,
   nil,   701,   nil,   nil,   nil,   701,   701,   701,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   701,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   701,     0,   701,   nil,
   nil,   nil,   nil,     0,     0,     0,     0,     0,     0,     0,
   nil,     0,   nil,     0,     0,     0,   nil,     0,   nil,   701,
   701,     0,     0,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     0,    91,     0,   nil,   nil,   nil,   nil,    91,
    91,    91,    91,    91,    91,    91,   nil,    91,   nil,    91,
    91,    91,   nil,    91,   nil,     0,     0,    91,    91,    91,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,   526,
    91,   nil,   nil,   nil,   nil,   526,   526,   526,   526,   526,
   526,   526,   nil,   526,   526,   526,   526,   526,   nil,   526,
   nil,    91,    91,   526,   526,   526,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   526,   nil,   nil,   nil,   nil,
   401,   nil,   nil,   nil,   526,   672,   526,   nil,   nil,   nil,
   nil,   672,   672,   672,   672,   672,   672,   672,   nil,   672,
   nil,   672,   672,   672,   nil,   672,   nil,   526,   526,   672,
   672,   672,   nil,   nil,   401,   402,   nil,   nil,   nil,   nil,
   401,   672,   nil,   nil,   nil,   401,   nil,   nil,   nil,   nil,
   672,   nil,   672,   401,   401,   nil,   nil,   nil,   401,   401,
   401,   401,   401,   401,   401,   401,   401,   nil,   403,   402,
   nil,   nil,   nil,   672,   672,   402,   nil,   nil,   nil,   nil,
   402,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   402,   402,
   nil,   nil,   nil,   402,   402,   402,   402,   402,   402,   402,
   402,   402,   403,   404,   nil,   nil,   nil,   nil,   403,   nil,
   nil,   nil,   nil,   403,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   403,   403,   nil,   nil,   nil,   403,   403,   403,   403,
   403,   403,   403,   403,   403,   nil,   405,   404,   nil,   nil,
   nil,   nil,   nil,   404,   nil,   nil,   nil,   nil,   404,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   404,   404,   nil,   nil,
   nil,   404,   404,   404,   404,   404,   404,   404,   404,   404,
   405,   491,   nil,   nil,   nil,   nil,   405,   nil,   nil,   nil,
   nil,   405,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   405,
   405,   nil,   nil,   nil,   405,   405,   405,   405,   405,   405,
   405,   405,   405,   nil,   499,   491,   nil,   nil,   nil,   nil,
   nil,   491,   nil,   nil,   nil,   nil,   491,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   491,   491,   nil,   nil,   nil,   491,
   491,   491,   491,   491,   491,   491,   491,   491,   499,   586,
   nil,   nil,   nil,   nil,   499,   nil,   nil,   nil,   nil,   499,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   499,   499,   nil,
   nil,   nil,   499,   499,   499,   499,   499,   499,   499,   499,
   499,   nil,   589,   586,   nil,   nil,   nil,   nil,   nil,   586,
   nil,   nil,   nil,   nil,   586,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   586,   586,   nil,   nil,   nil,   586,   586,   586,
   586,   586,   586,   586,   586,   586,   589,   698,   nil,   nil,
   nil,   nil,   589,   nil,   nil,   nil,   nil,   589,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   589,   589,   nil,   nil,   nil,
   589,   589,   589,   589,   589,   589,   589,   589,   589,   nil,
   nil,   698,   nil,   nil,   nil,   nil,   nil,   698,   nil,   nil,
   nil,   nil,   698,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   698,   698,   nil,   nil,   nil,   698,   698,   698,   698,   698,
   698,   698,   698,   698 ]

racc_action_pointer = [
  2172,  1934,   nil,     6,    14,    17,    91,   105,   116,   119,
   146,   158,   169,   202,   206,   209,   212,   216,   261,     3,
   296,   nil,   nil,   302,   349,   358,   364,   367,   364,   369,
   372,   373,   nil,   403,   402,   411,   410,   nil,   nil,   418,
   424,   451,   468,   nil,   nil,   469,   473,   237,   nil,   nil,
   nil,   471,   475,    11,    22,  1738,   519,   nil,   nil,   nil,
   nil,   nil,   475,   478,   482,   nil,   500,   504,   427,   nil,
   519,   520,   524,   522,   529,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  2218,   527,   491,   526,   574,   183,   270,   366,   662,
   531,   nil,   nil,   532,   533,   nil,   nil,   757,     8,    17,
   nil,   353,   145,   113,   536,   359,   852,   555,   559,    -3,
   947,   526,   nil,   516,   517,   563,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   237,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -57,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   563,   564,   nil,   nil,   566,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   567,   568,   568,   569,   572,   nil,   nil,   nil,
   578,  1001,   488,   224,   nil,   537,   nil,   607,   nil,   nil,
   nil,   nil,   nil,  1998,   nil,   609,   nil,   390,   nil,   613,
   615,   616,   617,   618,   620,   621,   622,   404,  1790,   623,
   404,   nil,   nil,   nil,   576,   581,   581,   361,   361,   330,
   nil,   214,   nil,   nil,   nil,   nil,   nil,   nil,   629,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   155,   nil,   nil,    51,   nil,   645,   646,   668,   669,   672,
   680,   681,   581,  1055,   639,  1109,   684,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   362,   363,   153,   nil,   nil,
   689,   690,   697,   698,   156,   157,   169,    -3,   nil,   703,
   704,   705,    -1,    20,   170,   173,     9,   nil,   706,   707,
   708,   709,   711,   713,   714,   181,   182,   183,   184,   185,
    20,   nil,   715,   716,   717,   718,   213,   nil,   695,   nil,
   152,   256,   255,   nil,   nil,   720,   721,  1163,  1217,    12,
    91,   nil,   nil,   357,   nil,   nil,   671,   nil,   nil,   nil,
   648,   752,   847,   717,   nil,   nil,   nil,   627,   nil,   nil,
   nil,  1271,  1325,  1057,   411,   nil,   722,     2,   nil,  1379,
   nil,  1380,   705,  1842,   208,   nil,   nil,   465,   nil,   nil,
   nil,   727,   501,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   725,   nil,   726,  1467,  1524,  1632,  1739,  1845,
  1992,  2304,  2339,  2372,  2407,  2440,   nil,   nil,   686,   725,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1522,   750,  -101,   nil,    59,   751,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   713,   716,   396,   nil,   759,   742,
   742,   nil,   nil,   nil,   nil,   nil,   771,   nil,   nil,    21,
   772,   753,   nil,   771,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   775,   776,   777,   778,   779,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   257,   777,   nil,
   nil,   778,   nil,   nil,   nil,   nil,   782,   783,   nil,   nil,
   nil,  2475,   nil,   nil,   782,   783,   787,   694,   nil,  2508,
   444,   786,   787,   nil,   nil,   197,   nil,   nil,   797,   nil,
   794,   777,   nil,   727,   759,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   802,   nil,   nil,  2264,   nil,   804,   nil,
   nil,   nil,   758,   758,   400,   404,   406,   333,   342,   nil,
   nil,   nil,   nil,   261,   809,   nil,    -5,   nil,   nil,   714,
   nil,   780,   781,   nil,    -7,   nil,  1576,   nil,   nil,   nil,
   nil,   153,   257,   262,   269,   270,   271,   nil,   822,   nil,
   272,   nil,   nil,   nil,   nil,   nil,   820,   281,   842,   843,
   nil,   nil,   nil,   nil,   nil,   753,  2543,   nil,  1630,  2576,
   nil,   nil,   nil,   nil,   nil,   nil,   851,  2062,   nil,   861,
   862,   863,   870,   871,   872,   873,   874,   875,   876,   877,
   878,   879,   880,   880,   282,   nil,   nil,   776,   876,   nil,
   nil,   nil,   nil,   nil,   nil,   776,   779,   883,   844,   845,
   nil,   283,   843,   nil,    67,   893,   792,     9,   nil,  1684,
   nil,   793,    16,   876,   877,   880,   nil,   nil,   nil,   nil,
   nil,   nil,   901,   459,   902,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  2310,   913,   nil,   915,   nil,   nil,   913,   nil,
   284,   285,    22,   nil,    24,   nil,   nil,   nil,   nil,   815,
   875,   940,   nil,   839,   286,   287,   309,   nil,  2611,   nil,
   nil,  2126,   nil,   946,   947,   950,   956,   957,   958,   965,
   966,   967,   968,   969,   970,   971,   310,   nil,    55,   138,
   nil,   311,   nil,   923,   nil,   nil,   nil,   nil,   947,   nil,
   nil,   968,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   464,   nil,   nil,
   nil,   nil,   312,   nil,   971,   nil,   nil ]

racc_action_default = [
   -18,  -450,    -1,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
  -450,   -76,   -77,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
  -450,  -450,   -93,  -450,  -450,  -450,  -450,  -132,  -133,  -450,
  -450,  -450,  -450,  -176,  -177,  -450,  -450,  -450,  -187,  -188,
  -189,  -450,  -450,  -450,  -450,  -450,  -450,  -278,  -279,  -280,
  -281,  -282,  -450,  -450,  -450,  -350,  -450,  -450,  -450,  -358,
  -450,  -450,  -450,  -450,  -450,    -2,    -3,    -4,    -5,    -6,
    -7,    -8,    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,
   -17,   -18,  -173,   -24,  -450,  -450,   -78,   -79,   -80,  -103,
  -450,   -89,   -90,  -450,  -450,   -91,   -92,  -103,  -450,  -450,
  -126,  -134,  -151,  -161,  -154,  -179,  -103,  -450,  -450,  -191,
  -103,  -172,  -173,  -450,  -450,  -450,  -231,  -232,  -233,  -234,
  -235,  -236,  -237,  -238,  -239,  -240,  -314,  -315,  -326,  -317,
  -318,  -319,  -320,  -321,  -322,  -323,  -324,  -325,  -327,  -329,
  -330,  -331,  -332,  -333,  -334,  -450,  -336,  -338,  -340,  -341,
  -342,  -343,  -344,  -386,  -388,  -448,  -277,  -450,  -285,  -286,
  -287,  -288,  -289,  -290,  -291,  -292,  -293,  -294,  -295,  -296,
  -297,  -298,  -299,  -300,  -301,  -302,  -303,  -304,  -305,  -306,
  -345,  -346,  -450,  -450,  -450,  -450,  -450,  -449,  -283,  -311,
  -347,  -450,  -354,  -450,  -356,  -450,  -375,  -450,  -376,  -411,
  -414,  -412,   757,  -450,   -21,  -450,  -174,  -450,   -25,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -299,
  -450,   -71,   -73,   -74,  -241,  -242,  -244,  -246,  -248,  -251,
  -254,  -450,  -259,  -260,  -261,  -262,  -263,  -264,  -450,  -266,
  -267,  -268,  -269,  -270,  -271,  -272,  -273,  -274,  -275,   -83,
  -450,   -85,   -87,  -450,   -94,  -450,  -450,  -450,  -450,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -424,  -425,  -426,
  -443,  -444,  -445,  -446,   -82,  -178,  -190,  -450,  -120,  -122,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -127,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -142,  -450,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
  -450,  -155,  -450,  -450,  -450,  -450,  -450,  -185,  -203,  -204,
  -450,  -450,  -450,  -200,  -211,  -450,  -450,  -450,  -450,  -184,
  -197,  -192,  -198,  -450,  -228,  -229,  -450,  -316,  -328,  -335,
  -337,  -450,  -450,  -284,  -307,  -309,  -310,  -312,  -313,  -349,
  -357,  -450,  -450,  -450,  -450,  -351,  -450,  -450,  -367,  -450,
  -370,  -450,  -450,  -450,  -450,  -378,  -380,  -450,   -19,   -22,
  -175,  -450,  -450,   -27,   -28,   -29,   -30,   -31,   -32,   -33,
   -34,   -35,  -450,   -37,  -450,  -450,  -450,  -450,  -450,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -258,  -263,  -450,  -104,
  -105,  -107,   -81,   -95,   -96,   -97,   -98,   -99,  -100,  -101,
  -102,  -450,  -450,  -423,  -419,  -450,  -450,  -418,  -181,  -194,
  -108,  -121,  -123,  -124,  -450,  -450,  -450,  -117,  -118,  -450,
  -116,  -125,  -128,  -129,  -130,  -131,  -450,  -170,  -171,  -450,
  -450,  -137,  -140,  -141,  -138,  -135,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -450,  -450,  -450,  -450,  -450,  -152,
  -156,  -157,  -158,  -159,  -160,  -153,  -202,  -450,  -206,  -208,
  -210,  -207,  -180,  -201,  -212,  -213,  -450,  -450,  -183,  -196,
  -193,  -450,  -339,  -276,  -450,  -450,  -450,  -389,  -390,  -450,
  -450,  -450,  -450,  -348,  -352,  -450,  -355,  -368,  -450,  -371,
  -450,  -450,  -373,  -326,  -450,  -360,  -361,  -362,  -363,  -364,
  -365,  -366,  -377,  -450,  -413,  -415,  -450,   -26,  -450,   -36,
   -70,   -72,  -243,  -245,  -247,  -249,  -250,  -252,  -253,  -255,
  -256,  -257,  -265,  -450,  -450,  -312,  -405,  -395,  -416,  -421,
  -422,  -450,  -450,  -427,  -450,  -429,  -450,  -432,  -433,  -434,
  -417,  -450,  -450,  -450,  -450,  -450,  -450,  -162,  -450,  -164,
  -450,  -165,  -166,  -167,  -168,  -169,  -205,  -450,  -214,  -215,
  -230,  -385,  -387,  -308,  -391,  -450,  -450,  -382,  -450,  -450,
  -353,  -369,  -374,  -372,  -359,  -379,  -450,  -450,   -38,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
  -450,  -450,  -450,  -450,  -450,  -106,  -393,  -409,  -408,  -394,
  -396,  -397,  -398,  -399,  -400,  -403,  -404,  -450,  -450,  -450,
  -420,  -450,  -450,  -428,  -450,  -450,  -216,  -450,  -224,  -450,
  -227,  -220,  -450,  -450,  -114,  -113,  -115,  -119,  -163,  -136,
  -209,  -392,  -450,  -450,  -450,   -20,   -23,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -51,
   -52,   -53,  -450,  -450,  -407,  -450,  -401,  -402,  -406,  -409,
  -450,  -450,  -450,  -438,  -450,  -441,  -430,  -431,  -218,  -217,
  -450,  -450,  -222,  -221,  -450,  -450,  -450,  -381,  -450,  -384,
  -447,  -450,   -55,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -410,  -450,  -450,
  -435,  -450,  -440,  -450,  -219,  -225,  -226,  -223,  -110,  -111,
  -112,  -450,   -54,   -56,   -57,   -58,   -59,   -60,   -61,   -62,
   -63,   -64,   -65,   -66,   -67,   -68,   -69,  -450,  -436,  -437,
  -439,  -442,  -450,  -383,  -450,  -109,   -75 ]

racc_goto_table = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
   233,   232,   494,   495,   131,   280,   422,   439,   375,   454,
   218,   231,   555,   280,   502,   126,   229,   186,   324,   327,
   298,   353,   280,   342,   321,   498,   280,   132,   127,   128,
   301,   167,   307,   314,   325,   550,   478,   187,   602,     2,
    75,   129,   646,   135,   123,   124,   134,   172,   281,   618,
   288,   264,   308,   322,   188,   483,   281,   625,   603,   289,
   626,   192,   290,   409,   682,   281,   483,   711,   368,   281,
   598,   282,   702,     1,   332,   309,   323,   583,   343,   282,
   186,     3,   213,     4,   193,     5,   246,    16,   282,    17,
   283,   592,   282,   217,   341,   365,   711,   125,   283,   130,
   187,   733,   637,   642,   604,   535,   536,   283,   453,   602,
   172,   283,   597,   718,   719,   605,   606,   188,   446,   450,
   259,   261,   262,    93,   192,   701,   546,   609,   230,   603,
   214,   263,   678,   615,   481,   448,   448,   677,   549,   676,
   287,   657,   539,   540,   541,   537,   538,   193,   436,   747,
   585,   297,   306,   408,   544,   451,   320,   476,   650,   725,
   532,   630,   186,   533,   534,   584,   406,   166,   198,   280,
   364,   729,   730,   367,   204,   604,   514,   131,   508,   280,
   509,   280,   187,   576,   706,   206,   605,   606,   126,   428,
   429,   374,   172,   280,   497,   616,   619,   547,   609,   188,
   132,   127,   128,     3,   707,     4,   192,     5,   442,    16,
   620,    17,   281,   706,   129,   413,   135,   621,   301,   134,
   505,   686,   281,   622,   281,   324,   456,   314,   755,   193,
   431,   470,   507,   707,   610,   282,   281,   652,   280,   289,
   654,   325,   290,   488,   489,   282,   308,   282,   617,   280,
   708,   411,   379,   623,   283,   613,   624,   209,   504,   282,
   322,   709,   710,   377,   283,   568,   283,   500,   501,   309,
   392,   525,   130,   712,   649,   643,   511,   423,   283,   708,
   548,   281,   448,   323,   426,   437,   411,   440,   424,   635,
   709,   710,   281,   447,   447,   452,   411,   527,   186,   186,
   233,   232,   712,   528,   282,   610,   464,   465,   466,   467,
   468,   531,   486,   487,   554,   282,   684,   475,   187,   187,
   nil,   480,   411,   283,   595,   186,   613,   280,   172,   172,
   186,   679,   674,   515,   283,   188,   188,   nil,   186,   687,
   578,   579,   192,   192,   510,   187,   516,   521,   nil,   731,
   187,   688,   172,   172,   nil,   172,   692,   nil,   187,   517,
   172,   520,   188,   nil,   519,   193,   193,   188,   172,   192,
   281,   518,   691,   453,   192,   188,   nil,   nil,   nil,   717,
   713,   nil,   192,   nil,   nil,   nil,   246,   nil,   nil,   nil,
   nil,   nil,   193,   282,   nil,   726,   580,   193,   nil,   nil,
   nil,   613,   nil,   nil,   724,   193,   nil,   nil,   727,   713,
   nil,   nil,   283,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   613,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   447,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   280,   nil,   nil,   nil,   nil,   nil,   480,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   653,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   281,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   599,   nil,   600,   nil,
   601,   nil,   611,   nil,   612,   nil,   nil,   nil,   282,   nil,
   nil,   nil,   nil,   nil,   411,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   280,   nil,   283,   nil,   nil,
   nil,   nil,   nil,   nil,   411,   644,   645,   647,   nil,   nil,
   nil,   411,   nil,   nil,   nil,   nil,   nil,   nil,   480,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   172,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   599,   281,   600,
   nil,   601,   nil,   611,   nil,   612,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   673,   nil,   nil,   nil,   nil,
   nil,   282,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   683,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   283,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   703,   nil,   704,   nil,   705,   nil,   714,   nil,
   715,   683,   683,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   728,   647,   647,   nil,   nil,
   nil,   703,   nil,   704,   nil,   705,   nil,   714,   nil,   715,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   683,   nil,   nil,
   nil,   nil,   750,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   647 ]

racc_goto_check = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
    35,    34,   125,   125,   110,   134,   103,    56,   170,    71,
    24,    33,   195,   134,   125,   105,    26,   127,    76,    86,
    63,    98,   134,    86,    79,   172,   134,   111,   106,   107,
    49,    90,    72,    49,    49,   193,    95,   129,     6,     2,
     2,   108,    57,   113,    36,    36,    36,    36,   110,   183,
    58,    48,    64,    64,   131,    92,   110,   181,     7,    48,
   182,   153,    59,    51,    37,   110,    92,    28,   163,   110,
    27,   111,    31,     1,    85,    65,    65,   140,    85,   111,
   127,     3,    19,     4,   157,     5,    36,    16,   111,    17,
    36,   140,   111,    21,    90,   156,    28,    25,    36,   109,
   129,    31,    99,    99,     8,   118,   118,    36,    51,     6,
    36,    36,    22,    37,    37,     9,    10,   131,    80,    80,
    46,    46,    46,    23,   153,    30,   104,    14,    32,     7,
     2,    44,   183,    52,    51,    81,    81,   181,   100,   182,
    54,    27,   120,   120,   120,   119,   119,   157,    55,    37,
   125,    62,    69,    35,   103,    70,    78,    94,    96,   101,
   115,   193,   127,   116,   117,   172,   122,   126,   132,   134,
   155,    57,    57,   159,   161,     8,   162,   110,   165,   134,
   166,   134,   129,    95,     6,   168,     9,    10,   105,    86,
    86,   169,    36,   134,   171,   173,   174,   175,    14,   131,
   111,   106,   107,     3,     7,     4,   153,     5,    63,    16,
   176,    17,   110,     6,   108,    48,   113,   177,    49,    36,
    98,   195,   110,   178,   110,    76,    72,    49,    57,   157,
    58,    79,   163,     7,    15,   111,   110,   125,   134,    48,
   125,    49,    59,    86,    86,   111,    64,   111,   104,   134,
     8,    36,     2,   179,    36,    18,   180,   185,   156,   111,
    64,     9,    10,   186,    36,    80,    36,    34,    34,    65,
    25,   156,   109,    14,    71,    56,    35,   188,    36,     8,
   189,   110,    81,    65,   191,    36,    36,    36,   192,   103,
     9,    10,   110,    36,    36,    36,    36,    24,   127,   127,
    35,    34,    14,    26,   111,    15,    36,    36,    36,    36,
    36,    33,    90,    90,   194,   111,   197,    36,   129,   129,
   nil,    36,    36,    36,   170,   127,    18,   134,    36,    36,
   127,   104,   100,   105,    36,   131,   131,   nil,   127,   104,
    98,    98,   153,   153,    90,   129,   106,   107,   nil,   125,
   129,   100,    36,    36,   nil,    36,   100,   nil,   129,   108,
    36,   113,   131,   nil,    36,   157,   157,   131,    36,   153,
   110,   131,   103,    51,   153,   131,   nil,   nil,   nil,   104,
    15,   nil,   153,   nil,   nil,   nil,    36,   nil,   nil,   nil,
   nil,   nil,   157,   111,   nil,   104,    35,   157,   nil,   nil,
   nil,    18,   nil,   nil,   100,   157,   nil,   nil,   100,    15,
   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     4,   nil,
     5,   nil,    16,   nil,    17,   nil,   nil,   nil,   111,   nil,
   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   134,   nil,    36,   nil,   nil,
   nil,   nil,   nil,   nil,    36,    36,    36,    36,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   110,     4,
   nil,     5,   nil,    16,   nil,    17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,   111,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,     4,   nil,     5,   nil,    16,   nil,
    17,    36,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,    36,    36,   nil,   nil,
   nil,     3,   nil,     4,   nil,     5,   nil,    16,   nil,    17,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36 ]

racc_goto_pointer = [
   nil,    83,    49,     0,     2,     4,  -478,  -458,  -412,  -401,
  -400,   nil,   nil,   nil,  -389,  -282,     6,     8,  -261,     1,
   nil,     8,  -404,   114,   -75,    52,   -69,  -446,  -595,   nil,
  -537,  -590,    43,   -74,   -84,   -85,     1,  -557,   nil,   nil,
   nil,   nil,   nil,   nil,    42,   nil,    34,   nil,   -38,   -69,
   nil,  -187,  -400,   nil,    43,  -136,  -278,  -514,   -47,   -35,
   nil,   nil,    52,   -79,   -50,   -27,   nil,   nil,   nil,    50,
  -139,  -286,   -70,   nil,   nil,   nil,   -85,   nil,    53,   -79,
  -174,  -157,   nil,   nil,   nil,   -32,   -86,   nil,   nil,   nil,
   -15,   nil,  -267,   nil,  -161,  -284,  -409,   nil,  -136,  -449,
  -275,  -521,   nil,  -257,  -286,   -30,   -17,   -16,    -4,    54,
   -41,   -18,   nil,    -2,   nil,  -226,  -224,  -224,  -284,  -246,
  -251,   nil,   -65,   nil,   nil,  -339,   121,   -29,   nil,    -9,
   nil,     8,   116,   nil,   -84,   nil,   nil,   nil,   nil,   nil,
  -409,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   -21,   -96,    38,   nil,   -20,
   nil,   116,  -187,  -125,   nil,  -181,  -179,   nil,   125,    -6,
  -189,  -153,  -322,  -339,  -340,  -215,  -326,  -319,  -313,  -283,
  -280,  -479,  -476,  -485,   nil,   195,    63,   nil,    13,  -133,
   nil,    19,    24,  -378,  -101,  -403,   nil,  -306 ]

racc_goto_default = [
   nil,   nil,   nil,   265,   266,   267,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,   270,   271,    18,   nil,
    20,   nil,   nil,   121,   nil,   nil,   182,   nil,   607,   608,
   nil,   nil,   nil,   nil,   168,   493,   407,   nil,    21,    22,
    23,    24,    25,    26,   nil,    27,   nil,    30,   334,   268,
   269,   438,   410,    33,   nil,   nil,   nil,   nil,   nil,   336,
   291,    35,   nil,   nil,   299,   300,    37,    38,    40,   nil,
   nil,   nil,   nil,   310,   311,   312,   313,    41,   nil,   nil,
   nil,   180,    43,    44,    46,   nil,   nil,    48,    49,    50,
   366,    52,   333,   328,   329,   nil,   479,   335,   nil,   nil,
   nil,   638,   639,   278,   355,   174,   175,   176,   177,   173,
   183,   184,   133,   178,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   247,   256,   nil,   nil,    57,    58,    59,
    60,    61,   nil,   169,   170,   171,   179,   181,   185,   189,
   354,   356,   358,   139,   140,   141,   142,   143,   144,   150,
   151,   152,   153,    63,    64,   nil,   nil,    66,    67,   nil,
    68,   nil,   nil,   nil,   369,   nil,   370,    70,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    72,   nil,   nil,   274,   nil,   nil,
   275,   276,   nil,   nil,   nil,   nil,   556,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 116, :_reduce_none,
  0, 116, :_reduce_none,
  4, 125, :_reduce_19,
  2, 132, :_reduce_20,
  1, 133, :_reduce_none,
  2, 133, :_reduce_none,
  7, 126, :_reduce_23,
  2, 134, :_reduce_24,
  1, 135, :_reduce_none,
  3, 135, :_reduce_none,
  2, 138, :_reduce_27,
  2, 138, :_reduce_28,
  2, 138, :_reduce_29,
  2, 138, :_reduce_30,
  2, 138, :_reduce_31,
  2, 138, :_reduce_32,
  2, 138, :_reduce_33,
  2, 138, :_reduce_34,
  2, 138, :_reduce_35,
  3, 138, :_reduce_36,
  2, 138, :_reduce_37,
  1, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  2, 141, :_reduce_none,
  4, 142, :_reduce_54,
  1, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 145, :_reduce_none,
  5, 127, :_reduce_70,
  1, 146, :_reduce_71,
  3, 146, :_reduce_72,
  1, 147, :_reduce_73,
  1, 147, :_reduce_74,
  6, 143, :_reduce_75,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  2, 153, :_reduce_78,
  2, 153, :_reduce_79,
  2, 153, :_reduce_80,
  4, 152, :_reduce_81,
  3, 152, :_reduce_82,
  3, 157, :_reduce_83,
  2, 157, :_reduce_84,
  3, 157, :_reduce_85,
  2, 157, :_reduce_86,
  3, 157, :_reduce_87,
  2, 157, :_reduce_88,
  2, 154, :_reduce_89,
  2, 155, :_reduce_90,
  2, 159, :_reduce_91,
  2, 161, :_reduce_92,
  1, 156, :_reduce_93,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  0, 162, :_reduce_none,
  2, 160, :_reduce_104,
  1, 165, :_reduce_105,
  3, 165, :_reduce_106,
  1, 166, :_reduce_none,
  4, 124, :_reduce_108,
  10, 167, :_reduce_109,
  8, 167, :_reduce_110,
  8, 167, :_reduce_111,
  8, 167, :_reduce_112,
  6, 167, :_reduce_113,
  6, 167, :_reduce_114,
  6, 167, :_reduce_115,
  4, 167, :_reduce_116,
  1, 169, :_reduce_none,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 168, :_reduce_none,
  2, 168, :_reduce_none,
  1, 172, :_reduce_none,
  2, 172, :_reduce_none,
  2, 172, :_reduce_none,
  4, 121, :_reduce_125,
  2, 175, :_reduce_126,
  1, 176, :_reduce_none,
  2, 176, :_reduce_none,
  2, 177, :_reduce_none,
  2, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  2, 181, :_reduce_134,
  4, 180, :_reduce_135,
  6, 182, :_reduce_136,
  4, 182, :_reduce_137,
  4, 182, :_reduce_138,
  2, 182, :_reduce_139,
  1, 184, :_reduce_none,
  1, 185, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_none,
  2, 186, :_reduce_none,
  2, 186, :_reduce_none,
  2, 186, :_reduce_none,
  2, 186, :_reduce_none,
  2, 186, :_reduce_none,
  2, 186, :_reduce_none,
  2, 186, :_reduce_none,
  0, 186, :_reduce_none,
  4, 123, :_reduce_152,
  4, 191, :_reduce_153,
  2, 191, :_reduce_154,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  2, 193, :_reduce_none,
  2, 193, :_reduce_none,
  2, 193, :_reduce_none,
  2, 193, :_reduce_none,
  0, 193, :_reduce_none,
  3, 178, :_reduce_162,
  4, 179, :_reduce_163,
  3, 179, :_reduce_164,
  3, 188, :_reduce_165,
  3, 187, :_reduce_166,
  3, 189, :_reduce_167,
  3, 190, :_reduce_168,
  3, 190, :_reduce_169,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 150, :_reduce_172,
  1, 137, :_reduce_173,
  2, 137, :_reduce_174,
  3, 137, :_reduce_175,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 197, :_reduce_178,
  2, 197, :_reduce_179,
  4, 196, :_reduce_180,
  4, 198, :_reduce_181,
  3, 198, :_reduce_182,
  4, 198, :_reduce_183,
  3, 198, :_reduce_184,
  3, 198, :_reduce_185,
  2, 198, :_reduce_186,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 203, :_reduce_190,
  2, 203, :_reduce_191,
  3, 202, :_reduce_192,
  4, 201, :_reduce_193,
  4, 205, :_reduce_194,
  3, 205, :_reduce_195,
  4, 205, :_reduce_196,
  3, 205, :_reduce_197,
  3, 205, :_reduce_198,
  2, 205, :_reduce_199,
  1, 199, :_reduce_none,
  2, 199, :_reduce_none,
  2, 200, :_reduce_202,
  1, 200, :_reduce_203,
  1, 200, :_reduce_204,
  3, 207, :_reduce_205,
  2, 207, :_reduce_206,
  2, 208, :_reduce_207,
  1, 209, :_reduce_208,
  3, 209, :_reduce_209,
  1, 210, :_reduce_none,
  1, 206, :_reduce_none,
  2, 206, :_reduce_none,
  2, 206, :_reduce_none,
  3, 211, :_reduce_214,
  3, 211, :_reduce_215,
  4, 173, :_reduce_216,
  5, 173, :_reduce_217,
  5, 173, :_reduce_218,
  6, 173, :_reduce_219,
  4, 174, :_reduce_220,
  5, 174, :_reduce_221,
  5, 174, :_reduce_222,
  6, 174, :_reduce_223,
  1, 213, :_reduce_224,
  3, 213, :_reduce_225,
  3, 215, :_reduce_226,
  1, 216, :_reduce_none,
  3, 131, :_reduce_228,
  3, 130, :_reduce_229,
  5, 118, :_reduce_230,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 149, :_reduce_none,
  1, 228, :_reduce_none,
  3, 228, :_reduce_243,
  1, 229, :_reduce_none,
  3, 229, :_reduce_245,
  1, 230, :_reduce_none,
  3, 230, :_reduce_247,
  1, 231, :_reduce_none,
  3, 231, :_reduce_249,
  3, 231, :_reduce_250,
  1, 232, :_reduce_none,
  3, 232, :_reduce_252,
  3, 232, :_reduce_253,
  1, 233, :_reduce_none,
  3, 233, :_reduce_255,
  3, 233, :_reduce_256,
  3, 233, :_reduce_257,
  2, 234, :_reduce_258,
  1, 234, :_reduce_none,
  1, 235, :_reduce_260,
  1, 235, :_reduce_261,
  1, 235, :_reduce_262,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  3, 236, :_reduce_265,
  1, 237, :_reduce_266,
  1, 237, :_reduce_267,
  1, 237, :_reduce_268,
  1, 237, :_reduce_269,
  1, 237, :_reduce_270,
  1, 237, :_reduce_271,
  1, 237, :_reduce_272,
  1, 237, :_reduce_273,
  1, 238, :_reduce_274,
  1, 238, :_reduce_275,
  1, 239, :_reduce_276,
  2, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 240, :_reduce_284,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 212, :_reduce_307,
  3, 212, :_reduce_308,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 246, :_reduce_311,
  1, 218, :_reduce_none,
  1, 255, :_reduce_none,
  1, 223, :_reduce_314,
  1, 223, :_reduce_315,
  2, 223, :_reduce_316,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  1, 262, :_reduce_323,
  1, 259, :_reduce_324,
  1, 259, :_reduce_325,
  1, 260, :_reduce_326,
  1, 260, :_reduce_327,
  2, 261, :_reduce_328,
  1, 261, :_reduce_329,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 266, :_reduce_334,
  2, 263, :_reduce_335,
  1, 263, :_reduce_336,
  2, 264, :_reduce_337,
  1, 264, :_reduce_338,
  3, 265, :_reduce_339,
  1, 265, :_reduce_340,
  1, 220, :_reduce_341,
  1, 221, :_reduce_342,
  1, 222, :_reduce_343,
  1, 227, :_reduce_344,
  1, 250, :_reduce_345,
  1, 195, :_reduce_346,
  2, 242, :_reduce_347,
  4, 241, :_reduce_348,
  2, 268, :_reduce_349,
  1, 267, :_reduce_350,
  1, 269, :_reduce_none,
  2, 269, :_reduce_none,
  3, 270, :_reduce_353,
  2, 244, :_reduce_354,
  4, 243, :_reduce_355,
  2, 272, :_reduce_356,
  2, 274, :_reduce_357,
  1, 271, :_reduce_358,
  4, 275, :_reduce_359,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 277, :_reduce_369,
  1, 278, :_reduce_370,
  2, 278, :_reduce_371,
  3, 280, :_reduce_372,
  2, 280, :_reduce_373,
  2, 279, :_reduce_374,
  2, 245, :_reduce_375,
  2, 281, :_reduce_376,
  3, 282, :_reduce_none,
  1, 283, :_reduce_none,
  3, 283, :_reduce_none,
  1, 284, :_reduce_380,
  6, 140, :_reduce_381,
  4, 140, :_reduce_382,
  8, 253, :_reduce_383,
  6, 253, :_reduce_384,
  4, 224, :_reduce_385,
  1, 224, :_reduce_386,
  4, 225, :_reduce_387,
  1, 225, :_reduce_388,
  2, 256, :_reduce_389,
  1, 285, :_reduce_390,
  2, 285, :_reduce_391,
  3, 286, :_reduce_392,
  4, 163, :_reduce_393,
  4, 163, :_reduce_394,
  3, 163, :_reduce_395,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 290, :_reduce_401,
  2, 291, :_reduce_402,
  1, 292, :_reduce_403,
  1, 293, :_reduce_404,
  0, 294, :_reduce_405,
  3, 289, :_reduce_406,
  2, 287, :_reduce_407,
  1, 287, :_reduce_408,
  1, 297, :_reduce_409,
  3, 297, :_reduce_410,
  2, 119, :_reduce_411,
  2, 298, :_reduce_412,
  3, 299, :_reduce_none,
  0, 300, :_reduce_none,
  2, 300, :_reduce_none,
  3, 164, :_reduce_none,
  3, 301, :_reduce_417,
  2, 301, :_reduce_418,
  1, 302, :_reduce_none,
  2, 303, :_reduce_420,
  1, 303, :_reduce_421,
  1, 303, :_reduce_422,
  0, 303, :_reduce_423,
  1, 304, :_reduce_424,
  1, 305, :_reduce_425,
  1, 305, :_reduce_426,
  2, 306, :_reduce_none,
  3, 306, :_reduce_none,
  1, 308, :_reduce_none,
  3, 308, :_reduce_none,
  3, 309, :_reduce_431,
  1, 310, :_reduce_432,
  1, 310, :_reduce_433,
  1, 310, :_reduce_434,
  4, 214, :_reduce_435,
  4, 295, :_reduce_436,
  4, 296, :_reduce_437,
  1, 151, :_reduce_438,
  3, 151, :_reduce_439,
  4, 307, :_reduce_440,
  1, 311, :_reduce_441,
  3, 311, :_reduce_442,
  1, 217, :_reduce_443,
  1, 217, :_reduce_444,
  1, 217, :_reduce_445,
  1, 217, :_reduce_446,
  6, 252, :_reduce_447,
  1, 226, :_reduce_448,
  1, 251, :_reduce_449 ]

racc_reduce_n = 450

racc_shift_n = 757

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "{" => 3,
  "}" => 4,
  "module" => 5,
  :identifier => 6,
  "<" => 7,
  ">" => 8,
  "," => 9,
  "typename" => 10,
  "interface" => 11,
  "valuetype" => 12,
  "eventtype" => 13,
  "struct" => 14,
  "union" => 15,
  "exception" => 16,
  "enum" => 17,
  "sequence" => 18,
  "const" => 19,
  "alias" => 20,
  "local" => 21,
  "abstract" => 22,
  "pseudo" => 23,
  ":" => 24,
  "home" => 25,
  "supports" => 26,
  "manages" => 27,
  "primarykey" => 28,
  "porttype" => 29,
  "component" => 30,
  "connector" => 31,
  "provides" => 32,
  "uses" => 33,
  "multiple" => 34,
  "publishes" => 35,
  "emits" => 36,
  "consumes" => 37,
  "port" => 38,
  "mirrorport" => 39,
  "::" => 40,
  "custom" => 41,
  "truncatable" => 42,
  "public" => 43,
  "private" => 44,
  "factory" => 45,
  "(" => 46,
  ")" => 47,
  "finder" => 48,
  "in" => 49,
  "typeprefix" => 50,
  :string_literal => 51,
  "typeid" => 52,
  "=" => 53,
  "|" => 54,
  "^" => 55,
  "&" => 56,
  ">>" => 57,
  "<<" => 58,
  "+" => 59,
  "-" => 60,
  "*" => 61,
  "/" => 62,
  "%" => 63,
  "~" => 64,
  :integer_literal => 65,
  :wide_string_literal => 66,
  :character_literal => 67,
  :wide_character_literal => 68,
  :fixed_pt_literal => 69,
  :floating_pt_literal => 70,
  "TRUE" => 71,
  "FALSE" => 72,
  "typedef" => 73,
  "native" => 74,
  "float" => 75,
  "double" => 76,
  "long" => 77,
  "int8" => 78,
  "short" => 79,
  "int16" => 80,
  "int32" => 81,
  "int64" => 82,
  "uint8" => 83,
  "unsigned" => 84,
  "uint16" => 85,
  "uint32" => 86,
  "uint64" => 87,
  "char" => 88,
  "wchar" => 89,
  "boolean" => 90,
  "octet" => 91,
  "any" => 92,
  "Object" => 93,
  "switch" => 94,
  "case" => 95,
  "default" => 96,
  "map" => 97,
  "string" => 98,
  "wstring" => 99,
  "[" => 100,
  "]" => 101,
  "readonly" => 102,
  "attribute" => 103,
  "oneway" => 104,
  "void" => 105,
  "out" => 106,
  "inout" => 107,
  "raises" => 108,
  "getraises" => 109,
  "setraises" => 110,
  "context" => 111,
  "fixed" => 112,
  "ValueBase" => 113 }

racc_nt_base = 114

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\"module\"",
  "identifier",
  "\"<\"",
  "\">\"",
  "\",\"",
  "\"typename\"",
  "\"interface\"",
  "\"valuetype\"",
  "\"eventtype\"",
  "\"struct\"",
  "\"union\"",
  "\"exception\"",
  "\"enum\"",
  "\"sequence\"",
  "\"const\"",
  "\"alias\"",
  "\"local\"",
  "\"abstract\"",
  "\"pseudo\"",
  "\":\"",
  "\"home\"",
  "\"supports\"",
  "\"manages\"",
  "\"primarykey\"",
  "\"porttype\"",
  "\"component\"",
  "\"connector\"",
  "\"provides\"",
  "\"uses\"",
  "\"multiple\"",
  "\"publishes\"",
  "\"emits\"",
  "\"consumes\"",
  "\"port\"",
  "\"mirrorport\"",
  "\"::\"",
  "\"custom\"",
  "\"truncatable\"",
  "\"public\"",
  "\"private\"",
  "\"factory\"",
  "\"(\"",
  "\")\"",
  "\"finder\"",
  "\"in\"",
  "\"typeprefix\"",
  "string_literal",
  "\"typeid\"",
  "\"=\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\">>\"",
  "\"<<\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "integer_literal",
  "wide_string_literal",
  "character_literal",
  "wide_character_literal",
  "fixed_pt_literal",
  "floating_pt_literal",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"typedef\"",
  "\"native\"",
  "\"float\"",
  "\"double\"",
  "\"long\"",
  "\"int8\"",
  "\"short\"",
  "\"int16\"",
  "\"int32\"",
  "\"int64\"",
  "\"uint8\"",
  "\"unsigned\"",
  "\"uint16\"",
  "\"uint32\"",
  "\"uint64\"",
  "\"char\"",
  "\"wchar\"",
  "\"boolean\"",
  "\"octet\"",
  "\"any\"",
  "\"Object\"",
  "\"switch\"",
  "\"case\"",
  "\"default\"",
  "\"map\"",
  "\"string\"",
  "\"wstring\"",
  "\"[\"",
  "\"]\"",
  "\"readonly\"",
  "\"attribute\"",
  "\"oneway\"",
  "\"void\"",
  "\"out\"",
  "\"inout\"",
  "\"raises\"",
  "\"getraises\"",
  "\"setraises\"",
  "\"context\"",
  "\"fixed\"",
  "\"ValueBase\"",
  "$start",
  "specification",
  "definition",
  "type_dcl",
  "const_dcl",
  "except_dcl",
  "interface",
  "porttype",
  "component",
  "connector",
  "home",
  "module",
  "template_module",
  "template_module_inst",
  "value",
  "event",
  "typeid",
  "typeprefix",
  "module_header",
  "_definition_1",
  "template_module_header",
  "template_module_parameters",
  "template_module_body",
  "scoped_name_0",
  "template_module_parameter",
  "const_type",
  "sequence_type",
  "template_module_definition",
  "fixed_module",
  "template_module_reference",
  "fixed_module_body",
  "fixed_module_definition",
  "template_module_inst_parameters",
  "template_module_inst_parameter",
  "simple_type_spec",
  "const_exp",
  "scoped_name",
  "_scoped_name_list",
  "interface_dcl",
  "forward_dcl",
  "local_interface_",
  "abstract_interface_",
  "regular_interface_",
  "interface_header",
  "interface_body",
  "pseudo_interface_header",
  "interface_inheritance_spec",
  "pseudo_interface_",
  "export",
  "attr_dcl",
  "op_dcl",
  "_interface_name_list",
  "interface_name",
  "home_header",
  "home_body",
  "home_inheritance_spec",
  "home_supports_spec",
  "home_primarykey_spec",
  "home_export",
  "init_dcl",
  "finder_dcl",
  "porttype_header",
  "porttype_body",
  "porttype_export",
  "provides_dcl",
  "uses_dcl",
  "component_dcl",
  "component_forward_dcl",
  "component_header",
  "component_body",
  "component_inheritance_spec",
  "component_supports_spec",
  "component_export",
  "emits_dcl",
  "publishes_dcl",
  "consumes_dcl",
  "port_dcl",
  "connector_header",
  "connector_body",
  "connector_export",
  "interface_type",
  "object_type",
  "event_dcl",
  "event_forward_dcl",
  "eventtype_header",
  "value_body",
  "value_inheritance_spec",
  "value_dcl",
  "value_box_dcl",
  "value_forward_dcl",
  "type_spec",
  "valuetype_header",
  "value_element",
  "value_basevalue_list",
  "value_interface_support_list",
  "_value_name_list",
  "value_name",
  "state_member",
  "declarators",
  "init_param_decls",
  "raises_expr",
  "init_param_decl",
  "init_param_attribute",
  "param_type_spec",
  "simple_declarator",
  "integer_type",
  "char_type",
  "wide_char_type",
  "boolean_type",
  "floating_pt_type",
  "string_type",
  "wide_string_type",
  "fixed_pt_const_type",
  "octet_type",
  "or_expr",
  "xor_expr",
  "and_expr",
  "shift_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "unary_operator",
  "primary_expr",
  "literal",
  "boolean_literal",
  "positive_int_const",
  "type_declarator",
  "struct_type",
  "struct_forward_dcl",
  "union_type",
  "union_forward_dcl",
  "enum_type",
  "native_declarator",
  "constr_type_spec",
  "base_type_spec",
  "template_type_spec",
  "any_type",
  "value_base_type",
  "fixed_pt_type",
  "map_type",
  "declarator",
  "complex_declarator",
  "array_declarator",
  "signed_int",
  "unsigned_int",
  "signed_short_int",
  "signed_long_int",
  "signed_longlong_int",
  "tiny_short_int",
  "unsigned_short_int",
  "unsigned_long_int",
  "unsigned_longlong_int",
  "unsigned_tiny_short_int",
  "struct_def",
  "struct_header",
  "member_list",
  "member",
  "union_def",
  "union_header",
  "union_body",
  "union_dcl",
  "union_switch_spec",
  "switch_type_spec",
  "union_case",
  "_case_label_1",
  "element_spec",
  "case_label",
  "_enum_header",
  "_enum_body",
  "_enumerator_list",
  "enumerator",
  "_fixed_array_size_1",
  "fixed_array_size",
  "readonly_attr_declarator",
  "attr_raises_expr",
  "attr_declarator_list",
  "attr_both_raises_expr1",
  "attr_both_raises_expr2",
  "attr_get_raises_expr",
  "attr_set_raises_expr",
  "attr_no_raises_expr",
  "get_raises_expr",
  "set_raises_expr",
  "_simple_declarator_list",
  "_except_header",
  "_except_body",
  "_member_list0",
  "_op_dcl_header",
  "_op_dcl_parameter",
  "_op_dcl_footer",
  "op_attribute",
  "op_type_spec",
  "parameter_dcls",
  "context_expr",
  "_param_dcl_list",
  "param_dcl",
  "param_attribute",
  "_string_literal_list" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_19(val, _values)
     @d.end_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 41)
  def _reduce_20(val, _values)
     @d.define_module(val[1])
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.ry', 47)
  def _reduce_23(val, _values)
     @d.end_template_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_24(val, _values)
     @d.register_template_module_name(val[1])
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_27(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Any.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_28(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Interface.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 60)
  def _reduce_29(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Valuetype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 62)
  def _reduce_30(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Eventtype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_31(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Struct.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 66)
  def _reduce_32(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Union.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 68)
  def _reduce_33(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Exception.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_34(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Enum.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 72)
  def _reduce_35(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Sequence.new(IDL::Type::Void.new, nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 74)
  def _reduce_36(val, _values)
     @d.define_template_parameter(val[2], IDL::Type::Const.new(val[1]))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 76)
  def _reduce_37(val, _values)
     @d.define_template_parameter(val[1], val[0])
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.ry', 97)
  def _reduce_54(val, _values)
     @d.end_module(val[0])
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.ry', 117)
  def _reduce_70(val, _values)
     @d.instantiate_template_module(val[4], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 120)
  def _reduce_71(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 122)
  def _reduce_72(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 125)
  def _reduce_73(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 127)
  def _reduce_74(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 130)
  def _reduce_75(val, _values)
     @d.declare_template_reference(val[5], val[1], val[3])
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.ry', 137)
  def _reduce_78(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 139)
  def _reduce_79(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 141)
  def _reduce_80(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 144)
  def _reduce_81(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 146)
  def _reduce_82(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 149)
  def _reduce_83(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 151)
  def _reduce_84(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 153)
  def _reduce_85(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 155)
  def _reduce_86(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 157)
  def _reduce_87(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 159)
  def _reduce_88(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 161)
  def _reduce_89(val, _values)
     :local
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 163)
  def _reduce_90(val, _values)
     :abstract
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 166)
  def _reduce_91(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 168)
  def _reduce_92(val, _values)
     :pseudo
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 170)
  def _reduce_93(val, _values)
     :none
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.ry', 184)
  def _reduce_104(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 185)
  def _reduce_105(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 187)
  def _reduce_106(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.ry', 192)
  def _reduce_108(val, _values)
     @d.end_home(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 195)
  def _reduce_109(val, _values)
     @d.define_home(val[1], val[3], val[7], val[9], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 197)
  def _reduce_110(val, _values)
     @d.define_home(val[1], val[3], val[7], nil, val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 199)
  def _reduce_111(val, _values)
     @d.define_home(val[1], val[3], val[5], val[7], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 201)
  def _reduce_112(val, _values)
     @d.define_home(val[1], nil, val[5], val[7], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 203)
  def _reduce_113(val, _values)
     @d.define_home(val[1], nil, val[5], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 205)
  def _reduce_114(val, _values)
     @d.define_home(val[1], val[3], val[5], nil, nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 207)
  def _reduce_115(val, _values)
     @d.define_home(val[1], nil, val[3], val[5], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 209)
  def _reduce_116(val, _values)
     @d.define_home(val[1], nil, val[3], nil, nil)
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.ry', 225)
  def _reduce_125(val, _values)
     @d.end_porttype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 228)
  def _reduce_126(val, _values)
     @d.define_porttype(val[1])
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.ry', 241)
  def _reduce_134(val, _values)
     @d.declare_component(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 244)
  def _reduce_135(val, _values)
     @d.end_component(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 247)
  def _reduce_136(val, _values)
     @d.define_component(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 249)
  def _reduce_137(val, _values)
     @d.define_component(val[1], val[3], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 251)
  def _reduce_138(val, _values)
     @d.define_component(val[1], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 253)
  def _reduce_139(val, _values)
     @d.define_component(val[1], nil, nil)
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.ry', 272)
  def _reduce_152(val, _values)
     @d.end_connector(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 275)
  def _reduce_153(val, _values)
     @d.define_connector(val[1], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 277)
  def _reduce_154(val, _values)
     @d.define_connector(val[1], nil)
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.ry', 289)
  def _reduce_162(val, _values)
     @d.declare_port(val[2], :facet, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 292)
  def _reduce_163(val, _values)
     @d.declare_port(val[3], :receptacle, val[2], true)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 294)
  def _reduce_164(val, _values)
     @d.declare_port(val[2], :receptacle, val[1], false)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 297)
  def _reduce_165(val, _values)
     @d.declare_port(val[2], :publisher, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 300)
  def _reduce_166(val, _values)
     @d.declare_port(val[2], :emitter, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 303)
  def _reduce_167(val, _values)
     @d.declare_port(val[2], :consumer, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 306)
  def _reduce_168(val, _values)
     @d.declare_port(val[2], :port, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 308)
  def _reduce_169(val, _values)
     @d.declare_port(val[2], :mirrorport, val[1])
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.ry', 313)
  def _reduce_172(val, _values)
     @d.parse_scopedname(*val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 315)
  def _reduce_173(val, _values)
     [false, [val[0]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 316)
  def _reduce_174(val, _values)
     [true,  [val[1]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 318)
  def _reduce_175(val, _values)
     val[0][1] << val[2]; val[0]
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'parser.ry', 324)
  def _reduce_178(val, _values)
     @d.declare_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 326)
  def _reduce_179(val, _values)
     @d.declare_eventtype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 329)
  def _reduce_180(val, _values)
     @d.end_eventtype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 332)
  def _reduce_181(val, _values)
     @d.define_eventtype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 334)
  def _reduce_182(val, _values)
     @d.define_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 336)
  def _reduce_183(val, _values)
     @d.define_eventtype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 338)
  def _reduce_184(val, _values)
     @d.define_eventtype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 340)
  def _reduce_185(val, _values)
     @d.define_eventtype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 342)
  def _reduce_186(val, _values)
     @d.define_eventtype(val[1], :none)
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.ry', 349)
  def _reduce_190(val, _values)
     @d.declare_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 351)
  def _reduce_191(val, _values)
     @d.declare_valuetype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 354)
  def _reduce_192(val, _values)
     @d.define_valuebox(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 357)
  def _reduce_193(val, _values)
     @d.end_valuetype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 360)
  def _reduce_194(val, _values)
     @d.define_valuetype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 362)
  def _reduce_195(val, _values)
     @d.define_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 364)
  def _reduce_196(val, _values)
     @d.define_valuetype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 366)
  def _reduce_197(val, _values)
     @d.define_valuetype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 368)
  def _reduce_198(val, _values)
     @d.define_valuetype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 370)
  def _reduce_199(val, _values)
     @d.define_valuetype(val[1], :none)
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'parser.ry', 376)
  def _reduce_202(val, _values)
     Hash[ :base => val[0], :supports => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 378)
  def _reduce_203(val, _values)
     Hash[ :base => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 380)
  def _reduce_204(val, _values)
     Hash[ :supports => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 383)
  def _reduce_205(val, _values)
     Hash[ :truncatable => true, :list => val[2] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 385)
  def _reduce_206(val, _values)
     Hash[ :truncatable => false, :list => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 388)
  def _reduce_207(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 390)
  def _reduce_208(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 391)
  def _reduce_209(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.ry', 401)
  def _reduce_214(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], true) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 406)
  def _reduce_215(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], false) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 411)
  def _reduce_216(val, _values)
      @d.declare_initializer(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 413)
  def _reduce_217(val, _values)
      @d.declare_initializer(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 415)
  def _reduce_218(val, _values)
      @d.declare_initializer(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 417)
  def _reduce_219(val, _values)
      @d.declare_initializer(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 420)
  def _reduce_220(val, _values)
      @d.declare_finder(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 422)
  def _reduce_221(val, _values)
      @d.declare_finder(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 424)
  def _reduce_222(val, _values)
      @d.declare_finder(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 426)
  def _reduce_223(val, _values)
      @d.declare_finder(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 428)
  def _reduce_224(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 429)
  def _reduce_225(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 432)
  def _reduce_226(val, _values)
     [val[1], val[2]]
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.ry', 437)
  def _reduce_228(val, _values)
     @d.define_typeprefix(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 440)
  def _reduce_229(val, _values)
     @d.define_typeid(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 443)
  def _reduce_230(val, _values)
     @d.define_const(val[1], val[2], val[4])
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'parser.ry', 460)
  def _reduce_243(val, _values)
     Expression::Operation::Or.new(val[0], val[2])
  end
.,.,

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.ry', 464)
  def _reduce_245(val, _values)
     Expression::Operation::Xor.new(val[0], val[2])
  end
.,.,

# reduce 246 omitted

module_eval(<<'.,.,', 'parser.ry', 468)
  def _reduce_247(val, _values)
     Expression::Operation::And.new(val[0], val[2])
  end
.,.,

# reduce 248 omitted

module_eval(<<'.,.,', 'parser.ry', 472)
  def _reduce_249(val, _values)
     Expression::Operation::RShift.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 474)
  def _reduce_250(val, _values)
     Expression::Operation::LShift.new(val[0], val[2])
  end
.,.,

# reduce 251 omitted

module_eval(<<'.,.,', 'parser.ry', 478)
  def _reduce_252(val, _values)
     Expression::Operation::Add.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 480)
  def _reduce_253(val, _values)
     Expression::Operation::Minus.new(val[0], val[2])
  end
.,.,

# reduce 254 omitted

module_eval(<<'.,.,', 'parser.ry', 484)
  def _reduce_255(val, _values)
     Expression::Operation::Mult.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 486)
  def _reduce_256(val, _values)
     Expression::Operation::Div.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 488)
  def _reduce_257(val, _values)
     Expression::Operation::Mod.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 490)
  def _reduce_258(val, _values)
     val[0].new(val[1])
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'parser.ry', 493)
  def _reduce_260(val, _values)
     Expression::Operation::UnaryMinus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 494)
  def _reduce_261(val, _values)
     Expression::Operation::UnaryPlus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 495)
  def _reduce_262(val, _values)
     Expression::Operation::UnaryNot
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'parser.ry', 500)
  def _reduce_265(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 502)
  def _reduce_266(val, _values)
     @d.parse_literal(:integer, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 503)
  def _reduce_267(val, _values)
     @d.parse_literal(:string,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 504)
  def _reduce_268(val, _values)
     @d.parse_literal(:wstring, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 505)
  def _reduce_269(val, _values)
     @d.parse_literal(:char,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 506)
  def _reduce_270(val, _values)
     @d.parse_literal(:wchar,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 507)
  def _reduce_271(val, _values)
     @d.parse_literal(:fixed,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 508)
  def _reduce_272(val, _values)
     @d.parse_literal(:float,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 509)
  def _reduce_273(val, _values)
     @d.parse_literal(:boolean, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 511)
  def _reduce_274(val, _values)
     true
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 512)
  def _reduce_275(val, _values)
     false
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 514)
  def _reduce_276(val, _values)
     @d.parse_positive_int(val[0])
  end
.,.,

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'parser.ry', 526)
  def _reduce_284(val, _values)
                          dcls = parse_type_declarator(val[0], val[1])
                      dcls.each do |d|
                        @d.declare_typedef(d[0], d[1])
                      end

  end
.,.,

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

module_eval(<<'.,.,', 'parser.ry', 559)
  def _reduce_307(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 560)
  def _reduce_308(val, _values)
     val[0] << val[2]
  end
.,.,

# reduce 309 omitted

# reduce 310 omitted

module_eval(<<'.,.,', 'parser.ry', 565)
  def _reduce_311(val, _values)
     @d.declare_typedef(::IDL::Type::Native.new, val[0])
  end
.,.,

# reduce 312 omitted

# reduce 313 omitted

module_eval(<<'.,.,', 'parser.ry', 571)
  def _reduce_314(val, _values)
     ::IDL::Type::Float.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 572)
  def _reduce_315(val, _values)
     ::IDL::Type::Double.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 573)
  def _reduce_316(val, _values)
     ::IDL::Type::LongDouble.new
  end
.,.,

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

# reduce 322 omitted

module_eval(<<'.,.,', 'parser.ry', 583)
  def _reduce_323(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::TinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 585)
  def _reduce_324(val, _values)
     ::IDL::Type::Short.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 586)
  def _reduce_325(val, _values)
     if @idlversion < 4 then raise "int16 is only supported with IDL4 or newer" else ::IDL::Type::Short.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 588)
  def _reduce_326(val, _values)
     ::IDL::Type::Long.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 589)
  def _reduce_327(val, _values)
     if @idlversion < 4 then raise "int32 is only supported with IDL4 or newer" else ::IDL::Type::Long.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 591)
  def _reduce_328(val, _values)
     ::IDL::Type::LongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 592)
  def _reduce_329(val, _values)
     if @idlversion < 4 then raise "int64 is only supported with IDL4 or newer" else ::IDL::Type::LongLong.new end
  end
.,.,

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

module_eval(<<'.,.,', 'parser.ry', 599)
  def _reduce_334(val, _values)
     if @idlversion < 4 then raise "uint8 is only supported with IDL4 or newer" else ::IDL::Type::UTinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 601)
  def _reduce_335(val, _values)
     ::IDL::Type::UShort.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 602)
  def _reduce_336(val, _values)
     if @idlversion < 4 then raise "uint16 is only supported with IDL4 or newer" else ::IDL::Type::UShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 604)
  def _reduce_337(val, _values)
     ::IDL::Type::ULong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 605)
  def _reduce_338(val, _values)
     if @idlversion < 4 then raise "uint32 is only supported with IDL4 or newer" else ::IDL::Type::ULong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 607)
  def _reduce_339(val, _values)
     ::IDL::Type::ULongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 608)
  def _reduce_340(val, _values)
     if @idlversion < 4 then raise "uint64 is only supported with IDL4 or newer" else ::IDL::Type::ULongLong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 610)
  def _reduce_341(val, _values)
     ::IDL::Type::Char.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 612)
  def _reduce_342(val, _values)
     ::IDL::Type::WChar.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 614)
  def _reduce_343(val, _values)
     ::IDL::Type::Boolean.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 616)
  def _reduce_344(val, _values)
     ::IDL::Type::Octet.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 618)
  def _reduce_345(val, _values)
     ::IDL::Type::Any.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 620)
  def _reduce_346(val, _values)
     ::IDL::Type::Object.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 622)
  def _reduce_347(val, _values)
     @d.declare_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 625)
  def _reduce_348(val, _values)
     @d.end_struct(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 627)
  def _reduce_349(val, _values)
     @d.define_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 629)
  def _reduce_350(val, _values)
     nil
  end
.,.,

# reduce 351 omitted

# reduce 352 omitted

module_eval(<<'.,.,', 'parser.ry', 637)
  def _reduce_353(val, _values)
                 dcls = parse_type_declarator(val[0], val[1])
             dcls.each do |d|
               @d.declare_member(d[0], d[1])
             end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 644)
  def _reduce_354(val, _values)
     @d.declare_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 647)
  def _reduce_355(val, _values)
     @d.end_union(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 650)
  def _reduce_356(val, _values)
     @d.define_union_switchtype(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 653)
  def _reduce_357(val, _values)
     @d.define_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 655)
  def _reduce_358(val, _values)
     nil
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 658)
  def _reduce_359(val, _values)
     val[2]
  end
.,.,

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

module_eval(<<'.,.,', 'parser.ry', 673)
  def _reduce_369(val, _values)
                     dcls = parse_type_declarator(val[1][0], [val[1][1]])
                 dcls.each do |d|
                   @d.define_case(val[0], d[0], d[1])
                 end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 679)
  def _reduce_370(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 680)
  def _reduce_371(val, _values)
     val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 682)
  def _reduce_372(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 683)
  def _reduce_373(val, _values)
     :default
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 686)
  def _reduce_374(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 689)
  def _reduce_375(val, _values)
     @d.end_enum(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 691)
  def _reduce_376(val, _values)
     @d.define_enum(val[1])
  end
.,.,

# reduce 377 omitted

# reduce 378 omitted

# reduce 379 omitted

module_eval(<<'.,.,', 'parser.ry', 699)
  def _reduce_380(val, _values)
                     @d.declare_enumerator(val[0])

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 703)
  def _reduce_381(val, _values)
     ::IDL::Type::Sequence.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 705)
  def _reduce_382(val, _values)
     ::IDL::Type::Sequence.new(val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 708)
  def _reduce_383(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::Map.new(val[2], val[4], val[6]) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 710)
  def _reduce_384(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::Map.new(val[2], val[4], nil) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 713)
  def _reduce_385(val, _values)
     ::IDL::Type::String.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 715)
  def _reduce_386(val, _values)
     ::IDL::Type::String.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 718)
  def _reduce_387(val, _values)
     ::IDL::Type::WString.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 720)
  def _reduce_388(val, _values)
     ::IDL::Type::WString.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 722)
  def _reduce_389(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 724)
  def _reduce_390(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 725)
  def _reduce_391(val, _values)
    val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 727)
  def _reduce_392(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 730)
  def _reduce_393(val, _values)
      dcls = parse_type_declarator(val[2], val[3][0])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1], true).get_raises = val[3][1]
                        end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 736)
  def _reduce_394(val, _values)
      att = @d.declare_attribute(val[1], val[2])
                        att.get_raises = val[3][0] unless val[3][0].empty?
                        att.set_raises = val[3][1] unless val[3][1].empty?

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 741)
  def _reduce_395(val, _values)
      dcls = parse_type_declarator(val[1], val[2])
                        dcls.each do |d|
                          att = @d.declare_attribute(d[0], d[1])
                        end

  end
.,.,

# reduce 396 omitted

# reduce 397 omitted

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

module_eval(<<'.,.,', 'parser.ry', 753)
  def _reduce_401(val, _values)
     [val[0], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 755)
  def _reduce_402(val, _values)
     [val[1], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 757)
  def _reduce_403(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 759)
  def _reduce_404(val, _values)
     [[], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 761)
  def _reduce_405(val, _values)
     [[], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 764)
  def _reduce_406(val, _values)
     [val[0]].concat(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 767)
  def _reduce_407(val, _values)
      [[val[0]], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 768)
  def _reduce_408(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 770)
  def _reduce_409(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 771)
  def _reduce_410(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 774)
  def _reduce_411(val, _values)
     @d.end_exception(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 776)
  def _reduce_412(val, _values)
     @d.define_exception(val[1])
  end
.,.,

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

module_eval(<<'.,.,', 'parser.ry', 785)
  def _reduce_417(val, _values)
     @d.declare_op_header(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 787)
  def _reduce_418(val, _values)
     @d.declare_op_header(nil, val[0], val[1])
  end
.,.,

# reduce 419 omitted

module_eval(<<'.,.,', 'parser.ry', 792)
  def _reduce_420(val, _values)
     @d.declare_op_footer(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 794)
  def _reduce_421(val, _values)
     @d.declare_op_footer(val[0], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 796)
  def _reduce_422(val, _values)
     @d.declare_op_footer(nil, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 798)
  def _reduce_423(val, _values)
     @d.declare_op_footer(nil,nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 800)
  def _reduce_424(val, _values)
     :oneway
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 802)
  def _reduce_425(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 803)
  def _reduce_426(val, _values)
     ::IDL::Type::Void.new
  end
.,.,

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

module_eval(<<'.,.,', 'parser.ry', 812)
  def _reduce_431(val, _values)
     @d.declare_op_parameter(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 814)
  def _reduce_432(val, _values)
     :in
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 815)
  def _reduce_433(val, _values)
     :out
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 816)
  def _reduce_434(val, _values)
     :inout
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 818)
  def _reduce_435(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 820)
  def _reduce_436(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 822)
  def _reduce_437(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 824)
  def _reduce_438(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 825)
  def _reduce_439(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 827)
  def _reduce_440(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 829)
  def _reduce_441(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 830)
  def _reduce_442(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 832)
  def _reduce_443(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 833)
  def _reduce_444(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 834)
  def _reduce_445(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 835)
  def _reduce_446(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 839)
  def _reduce_447(val, _values)
     IDL::Type::Fixed.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 841)
  def _reduce_448(val, _values)
     ::IDL::Type::Fixed.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 843)
  def _reduce_449(val, _values)
     ::IDL::Type::ValueBase.new
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end #of module IDL
