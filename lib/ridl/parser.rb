#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

###### racc/parser.rb begin
unless $".find {|p| p.end_with?('/racc/parser.rb')}
$".push "#{__dir__}/racc/parser.rb"
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
# frozen_string_literal: false
#--
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#++

unless $".find {|p| p.end_with?('/racc/info.rb')}
$".push "#{__dir__}/racc/info.rb"
#--
#
#
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
# see the file "COPYING".
#
#++

module Racc
  VERSION   = '1.7.1'
  Version = VERSION
  Copyright = 'Copyright (c) 1999-2006 Minero Aoki'
end

end


unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError # :nodoc:
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--executable=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+grammarfile+]
#   Racc grammar file. Any extension is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammar file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is ruby license, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extensions)
    Racc_No_Extensions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Core_Version_R = ::Racc::VERSION

    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end

      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extensions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def do_parse
      #{Racc_Main_Parsing_Routine}(_racc_setup(), false)
    end
    RUBY

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def yyparse(recv, mid)
      #{Racc_YY_Parse_Method}(recv, mid, _racc_setup(), false)
    end
    RUBY

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is +Symbol_Value_Stack[0]+.
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end

require 'ridl/delegate'

module IDL

class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 841)

def parse_type_declarator(type_spec, declarators)
  ret = Array.new
  t = type_spec
  declarators.each do |d|
    case d
    when ::String, IDL::Scanner::Identifier
      ret << [t, d]
    when ::Array # array_declarator -> [identifier, size]
      ret << [IDL::Type::Array.new(t, d[1]), d[0]]
    else
      raise RuntimeError, "unknown declarator: #{d.inspect}"
    end
  end
  ret
end

#attr_accessor :default_namespace, :output
attr_accessor :yydebug
def initialize(params = {})
  @d = ::IDL::Delegator.new(params)
  @params = params
  @idlversion = 4
end

alias on_error0 on_error
def on_error(err_tok, err_val, _value)
  begin
    on_error0(err_tok, err_val, _value)
  rescue IDL::ParseError
    raise
  rescue
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
end

def parse(src)
  @scanner = Scanner.new(src, self, @params)
  @d.pre_parse
  begin
    do_parse
  rescue IDL::ParseError
    raise
  rescue
    STDERR.puts "#{$!}\n#{$!.backtrace.join("\n")}" if IDL.verbose_level>0
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
  @d.post_parse
end

def visit_nodes(walker)
  @d.visit_nodes(walker)
end

def pragma_prefix(s)
  @d.pragma_prefix(s)
end

def pragma_version(id, major, minor)
  @d.pragma_version(id, major, minor)
end

def pragma_id(id, repo_id)
  @d.pragma_id(id, repo_id)
end

def handle_pragma(s)
  @d.handle_pragma(s)
end

def is_included?(s)
  @d.is_included?(s)
end

def enter_include(s, fp)
  @d.enter_include(s, fp)
end

def leave_include()
  @d.leave_include
end

def declare_include(s)
  @d.declare_include(s)
end

def define_annotation(*args)
  @d.define_annotation(*args)
end

def next_token
  ret = @scanner.next_token
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
  -199,   438,   547,   122,   551,   620,   122,   551,   348,   122,
   347,    65,    69,   452,    71,   193,   627,    92,   -84,   583,
   516,   328,   502,   329,   466,   517,   493,    76,   122,   300,
   301,   682,   292,   682,   293,   294,   328,    94,   329,   258,
    94,   300,   301,    94,   313,   314,   315,   316,   317,   300,
   301,    94,   300,   301,   626,   409,   446,   122,   316,   317,
   552,   553,    94,   552,   553,    65,    69,    73,    71,   681,
    55,   685,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   189,
   190,    94,    77,   190,   163,   164,   190,   545,   270,   271,
   546,    53,    78,    54,   621,   622,    79,   711,   194,   195,
   270,   271,   713,   368,   369,   190,    80,   122,   270,   271,
    81,   270,   271,   711,    56,    62,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   189,   190,   710,    82,   711,   163,   164,
   712,    94,   270,   271,   275,   277,   427,   122,   122,    83,
   122,   737,   122,   195,   122,   122,    65,    69,    73,    71,
   328,    55,   329,   122,   122,   122,   122,   300,   301,   122,
   313,   314,   315,   316,   317,   738,   122,   122,   122,   122,
   122,    94,    94,   474,    94,   -86,    94,   290,    94,    94,
   291,   629,    53,   633,    54,   300,   301,    94,    94,    94,
    94,   316,   317,    94,   122,    84,   258,   122,   122,    85,
    94,    94,    94,    94,    94,    56,    62,   136,   137,   138,
   145,   146,   147,   148,   149,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   189,   190,   270,   271,    94,   163,
   164,    94,    94,   270,   271,   275,   277,   479,   246,   122,
   122,   122,    86,   248,   195,   122,   122,    65,    69,    73,
    71,   -88,    55,   122,   270,   271,   122,   247,   249,   250,
   251,   252,   253,   255,   256,   122,   122,   122,   122,   122,
   122,   122,   258,    94,    94,    94,   335,   336,   290,    94,
    94,    87,   634,    53,   633,    54,    88,    94,   118,   117,
    94,   345,   346,   122,   122,   122,   102,   104,   103,    94,
    94,    94,    94,    94,    94,    94,    56,    62,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   189,   190,    94,    94,    94,
   163,   164,    89,  -139,   270,   271,   275,   277,   487,  -186,
   122,    90,  -182,  -195,    91,   195,   368,   369,    65,    69,
    73,    71,    95,    55,   302,    96,   303,   400,   401,   402,
   328,    97,   329,   328,   328,   329,   329,   400,   401,   402,
   400,   401,   402,    98,    94,   378,   379,   335,   336,   290,
   388,   359,   391,   392,    53,    99,    54,   396,   397,   398,
   399,   100,   499,   101,   122,   557,   558,   581,   580,   396,
   397,   105,    65,    69,   106,    71,   193,    56,    62,   136,
   137,   138,   145,   146,   147,   148,   149,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   189,   190,    94,   398,
   399,   163,   164,   398,   399,   270,   271,   275,   277,   742,
   711,   107,   108,   109,   110,   111,   195,   518,   112,   122,
   113,   114,   115,   116,   119,   120,   197,    65,    69,   198,
    71,   193,   199,   136,   137,   138,   145,   146,   147,   148,
   149,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   189,   190,   200,    94,   201,   163,   164,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   203,   205,   194,
   195,   206,   208,   122,   209,   210,   -20,   213,   214,   282,
   283,    65,    69,   284,    71,   193,   324,   337,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   189,   190,    94,   338,   213,
   163,   164,   342,   343,   344,   349,   350,   355,   357,   358,
   359,   360,  -348,  -356,   194,   195,   370,   122,   373,   377,
   380,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   381,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   189,
   190,    94,   382,   383,   163,   164,   384,   246,   385,   386,
   387,   390,   248,   393,   394,   395,   411,   412,   194,   195,
   242,   241,   122,   413,   414,   243,   247,   249,   250,   251,
   252,   253,   255,   256,   415,   416,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   189,   190,   122,    94,   417,   163,   164,
   418,   422,   246,    65,    69,    73,    71,   248,    55,   424,
   429,   430,   194,   195,   431,   242,   241,   432,   440,   441,
   243,   247,   249,   250,   251,   252,   253,   255,   256,    94,
   442,   454,   455,   456,   457,   458,   459,   460,   468,    53,
   469,    54,   470,   471,   329,   481,   482,   488,   489,   493,
   496,   355,   508,   520,   523,   524,   536,   537,   539,   554,
   555,   556,    56,    62,   136,   137,   138,   145,   146,   147,
   148,   149,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   189,   190,   537,   122,   559,   163,   164,   560,   122,
   270,   271,   275,   277,   561,   563,   564,    65,    69,    73,
    71,   195,    55,   537,   565,   566,   567,   568,   569,   571,
   537,   355,   355,   575,   576,   355,   496,   582,    94,   584,
   355,   586,   346,    94,   246,   587,   373,   390,   290,   248,
   394,   291,   395,    53,   539,    54,   546,   242,   241,   624,
   625,   641,   243,   247,   249,   250,   251,   252,   253,   255,
   256,   571,   493,   493,   644,   647,    56,    62,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   189,   190,   650,   122,   651,
   163,   164,   652,   122,   270,   271,   275,   277,   653,   654,
   655,    65,    69,    73,    71,   195,    55,   656,   657,   658,
   659,   660,   661,   662,   663,   664,   545,   667,   622,   621,
   539,   672,    94,   673,   677,   539,   545,    94,   246,   545,
   335,   336,   290,   248,   686,   687,   688,    53,   689,    54,
   690,   242,   241,   706,   539,   667,   243,   247,   249,   250,
   251,   252,   253,   255,   256,   545,   633,   539,   545,   723,
    56,    62,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   189,
   190,   724,   725,   726,   163,   164,   727,   122,   270,   271,
   275,   277,   728,   729,   730,    65,    69,    73,    71,   195,
    55,   731,   732,   733,   734,   735,   740,   741,   744,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    94,   nil,   nil,   335,   336,   290,   nil,   nil,   nil,
   nil,    53,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   122,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,
    69,   nil,    71,   193,    56,    62,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   189,   190,    94,   nil,   nil,   163,   164,
   nil,   nil,   270,   271,   275,   277,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   195,   nil,   122,   nil,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   136,   137,   138,   145,   146,   147,   148,   149,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   189,   190,    94,
   nil,    94,   163,   164,   nil,   nil,   nil,   246,   nil,   nil,
   nil,   nil,   248,   nil,   nil,   nil,   194,   195,   nil,   122,
   242,   241,   nil,   nil,   nil,   243,   247,   249,   250,   251,
   252,   253,   255,   256,   136,   137,   138,   145,   146,   147,
   148,   149,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   189,   190,    94,   nil,   nil,   163,   164,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   195,   nil,   122,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    65,    69,   nil,    71,   193,   nil,   nil,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   189,   190,    94,   nil,   nil,
   163,   164,   nil,   nil,   nil,   nil,   nil,   277,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   195,   nil,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    65,    69,   nil,    71,   193,
   nil,   nil,   136,   137,   138,   145,   146,   147,   148,   149,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   189,
   190,    94,   nil,   nil,   163,   164,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,   195,
   nil,   122,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   193,   nil,   nil,   136,   137,   138,   145,
   146,   147,   148,   149,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   189,   190,    94,   nil,   nil,   163,   164,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   194,   195,   nil,   122,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    65,    69,   nil,    71,   193,   nil,   nil,
   136,   137,   138,   145,   146,   147,   148,   149,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   189,   190,    94,
   nil,   nil,   163,   164,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   194,   195,   nil,   122,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   193,   nil,   nil,   136,   137,   138,   145,   146,   147,
   148,   149,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   189,   190,    94,   368,   369,   163,   164,   nil,   246,
   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,
   194,   195,   242,   241,   122,   nil,   nil,   243,   247,   249,
   250,   251,   252,   253,   255,   256,   nil,   nil,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   189,   190,   nil,    94,   nil,
   163,   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   194,   195,   nil,   nil,   122,   nil,
   122,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   136,   137,   138,   145,   146,   147,   148,
   149,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   189,   190,    94,   nil,    94,   163,   164,   nil,   nil,   nil,
   246,   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,
   195,   nil,   122,   242,   241,   nil,   nil,   nil,   243,   247,
   249,   250,   251,   252,   253,   255,   256,   136,   137,   138,
   145,   146,   147,   148,   149,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   189,   190,    94,   nil,   nil,   163,
   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   195,   nil,   122,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   136,   137,   138,   145,   146,   147,   148,   149,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   189,   190,
    94,    94,   nil,   163,   164,   nil,   nil,   246,   nil,   nil,
   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,   195,   122,
   242,   241,   nil,   nil,   nil,   243,   247,   249,   250,   251,
   252,   253,   255,   256,   nil,   136,   137,   138,   145,   146,
   147,   148,   149,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   nil,    94,   nil,   nil,   nil,   163,   164,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   165,   122,   122,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    71,   nil,   nil,   nil,   nil,   136,   137,
   138,   145,   146,   147,   148,   149,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   nil,    94,    94,   nil,   nil,
   163,   164,   nil,   246,   nil,   nil,   nil,   nil,   248,   nil,
   nil,   nil,   nil,   nil,   165,   nil,   242,   241,   nil,   nil,
   nil,   243,   247,   249,   250,   251,   252,   253,   255,   256,
   nil,   nil,   nil,   509,   145,   146,   147,   148,   149,   154,
   155,   156,   157,   158,   159,    74,   161,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,    32,    51,    45,    65,
    69,    73,    71,   nil,    55,   nil,    28,    29,    31,   nil,
    34,   nil,   nil,   nil,    36,    39,    42,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,
   nil,   nil,   nil,   375,    19,   nil,   nil,   nil,    56,    62,
    32,    51,    45,    65,    69,    73,    71,   nil,    55,   nil,
    28,    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,
    42,   nil,   nil,    94,   nil,   nil,   nil,   nil,   nil,   246,
    47,   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,    53,
   nil,    54,   242,   241,   nil,   nil,   nil,   243,   247,   249,
   250,   251,   252,   253,   255,   256,   nil,   648,   589,   nil,
   nil,   nil,    56,    62,    32,    51,    45,    65,    69,    73,
    71,   nil,    55,   607,    28,    29,    31,   nil,    34,   nil,
   nil,   nil,    36,    39,    42,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   721,   589,   nil,   nil,   nil,    56,    62,    32,    51,
    45,    65,    69,    73,    71,   nil,    55,   nil,    28,    29,
    31,   nil,    34,   nil,   nil,   nil,    36,    39,    42,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,    19,    54,
   nil,   nil,   nil,   nil,    32,    51,    45,    65,    69,    73,
    71,   nil,    55,   nil,    28,    29,    31,   nil,    34,   nil,
    56,    62,    36,    39,    42,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    53,    19,    54,   nil,   nil,   nil,   nil,
    32,    51,    45,    65,    69,    73,    71,   nil,    55,   nil,
    28,    29,    31,   nil,    34,   nil,    56,    62,    36,    39,
    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
   589,    54,   nil,   nil,   nil,   nil,    32,    51,    45,    65,
    69,    73,    71,   nil,    55,   607,    28,    29,    31,   nil,
    34,   nil,    56,    62,    36,    39,    42,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   122,   nil,   nil,   nil,    53,   589,    54,   nil,   nil,
   nil,   nil,    32,    51,    45,    65,    69,    73,    71,   nil,
    55,   nil,    28,    29,    31,   nil,    34,   nil,    56,    62,
    36,    39,    42,   nil,   nil,    94,   122,   nil,   nil,   nil,
   nil,   246,    47,   nil,   nil,   nil,   248,   nil,   nil,   nil,
   nil,    53,   nil,    54,   242,   241,   nil,   nil,   nil,   243,
   247,   249,   250,   251,   252,   253,   255,   256,   nil,   122,
    94,   nil,   nil,   nil,    56,    62,   246,   nil,   nil,   nil,
   nil,   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,
   241,   nil,   nil,   nil,   243,   247,   249,   250,   251,   252,
   253,   255,   256,    94,   122,   nil,   nil,   nil,   nil,   246,
   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   242,   241,   nil,   nil,   nil,   243,   247,   249,
   250,   251,   252,   253,   255,   256,   nil,   122,    94,   nil,
   nil,   nil,   nil,   nil,   246,   nil,   nil,   nil,   nil,   248,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,   241,   nil,
   nil,   nil,   243,   247,   249,   250,   251,   252,   253,   255,
   256,    94,   122,   nil,   nil,   nil,   nil,   246,   nil,   nil,
   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   242,   241,   nil,   nil,   nil,   243,   247,   249,   250,   251,
   252,   253,   255,   256,   nil,   122,    94,   nil,   nil,   nil,
   nil,   nil,   246,   nil,   nil,   nil,   nil,   248,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   242,   241,   nil,   nil,   nil,
   243,   247,   249,   250,   251,   252,   253,   255,   256,    94,
   122,   nil,   nil,   nil,   nil,   246,   nil,   nil,   nil,   nil,
   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,   241,
   nil,   nil,   nil,   243,   247,   249,   250,   251,   252,   253,
   255,   256,   nil,   122,    94,   nil,   nil,   nil,   nil,   nil,
   246,   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   242,   241,   nil,   nil,   nil,   243,   247,
   249,   250,   251,   252,   253,   255,   256,    94,   122,   nil,
   nil,   nil,   nil,   246,   nil,   nil,   nil,   nil,   248,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   242,   241,   nil,   nil,
   nil,   243,   247,   249,   250,   251,   252,   253,   255,   256,
   nil,   122,    94,   nil,   nil,   nil,   nil,   nil,   246,   nil,
   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   242,   241,   nil,   nil,   nil,   243,   247,   249,   250,
   251,   252,   253,   255,   256,    94,   nil,   nil,   nil,   nil,
   nil,   246,   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   242,   241,   nil,   nil,   nil,   243,
   247,   249,   250,   251,   252,   253,   255,   256 ]

racc_action_check = [
   119,   295,   422,   119,   422,   540,   300,   627,   155,   446,
   155,   119,   119,   304,   119,   119,   548,    19,    96,   501,
   371,   119,   364,   119,   318,   371,   501,     3,   301,   295,
   295,   630,   108,   635,   108,   108,   337,   119,   337,    96,
   300,   304,   304,   446,   304,   304,   304,   304,   304,   109,
   109,    19,   318,   318,   548,   261,   301,   261,   318,   318,
   422,   422,   301,   627,   627,   261,   261,   261,   261,   630,
   261,   635,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   261,     4,   300,   119,   119,   446,   420,   295,   295,
   420,   261,     5,   261,   540,   540,     6,   674,   119,   119,
   304,   304,   676,   364,   364,   301,     7,    53,   109,   109,
     8,   318,   318,   708,   261,   261,   261,   261,   261,   261,
   261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
   261,   261,   261,   261,   261,   674,     9,   709,   261,   261,
   676,    53,   261,   261,   261,   261,   285,   328,   285,    10,
    54,   708,   258,   261,   292,   293,   285,   285,   285,   285,
   338,   285,   338,   294,   302,   303,   313,   112,   112,   314,
   112,   112,   112,   112,   112,   709,   315,   316,   317,   324,
   329,   328,   285,   328,    54,    97,   258,   285,   292,   293,
   285,   555,   285,   555,   285,   113,   113,   294,   302,   303,
   313,   113,   113,   314,   474,    11,    97,   537,   239,    12,
   315,   316,   317,   324,   329,   285,   285,   285,   285,   285,
   285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
   285,   285,   285,   285,   285,   285,   112,   112,   474,   285,
   285,   537,   239,   285,   285,   285,   285,   330,   239,   330,
   557,   558,    13,   239,   285,   559,   560,   330,   330,   330,
   330,    98,   330,   564,   113,   113,   571,   239,   239,   239,
   239,   239,   239,   239,   239,   607,   624,   672,   673,   686,
   687,   688,    98,   330,   557,   558,   330,   330,   330,   559,
   560,    14,   556,   330,   556,   330,    15,   564,    47,    47,
   571,   138,   138,   706,   711,   741,    29,    29,    29,   607,
   624,   672,   673,   686,   687,   688,   330,   330,   330,   330,
   330,   330,   330,   330,   330,   330,   330,   330,   330,   330,
   330,   330,   330,   330,   330,   330,   330,   706,   711,   741,
   330,   330,    16,   111,   330,   330,   330,   330,   341,   115,
   341,    17,   283,   284,    18,   330,   201,   201,   341,   341,
   341,   341,    20,   341,   111,    23,   111,   237,   237,   237,
   115,    24,   115,   283,   284,   283,   284,   531,   531,   531,
   532,   532,   532,    25,   341,   215,   215,   341,   341,   341,
   225,   225,   228,   228,   341,    26,   341,   235,   235,   236,
   236,    27,   361,    28,   361,   433,   433,   497,   497,   528,
   528,    30,   361,   361,    31,   361,   361,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   361,   529,
   529,   341,   341,   530,   530,   341,   341,   341,   341,   736,
   736,    33,    34,    35,    36,    39,   341,   374,    40,   374,
    41,    42,    45,    46,    51,    52,    62,   374,   374,    63,
   374,   374,    64,   361,   361,   361,   361,   361,   361,   361,
   361,   361,   361,   361,   361,   361,   361,   361,   361,   361,
   361,   361,    66,   374,    67,   361,   361,   379,   379,   379,
   379,   379,   379,   379,   379,   379,   379,    68,    70,   361,
   361,    71,    72,    56,    73,    74,    92,    93,    94,   100,
   103,    56,    56,   104,    56,    56,   114,   117,   374,   374,
   374,   374,   374,   374,   374,   374,   374,   374,   374,   374,
   374,   374,   374,   374,   374,   374,   374,    56,   118,   121,
   374,   374,   123,   124,   125,   163,   164,   167,   191,   192,
   193,   194,   198,   200,   374,   374,   203,    95,   205,   213,
   217,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,   218,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    95,   219,   220,    56,    56,   221,    95,   222,   223,
   224,   227,    95,   232,   233,   234,   263,   264,    56,    56,
    95,    95,   246,   265,   266,    95,    95,    95,    95,    95,
    95,    95,    95,    95,   267,   268,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    99,   246,   269,    95,    95,
   270,   272,   246,    99,    99,    99,    99,   246,    99,   274,
   288,   289,    95,    95,   290,   246,   246,   291,   297,   298,
   246,   246,   246,   246,   246,   246,   246,   246,   246,    99,
   299,   306,   307,   308,   309,   310,   311,   312,   320,    99,
   321,    99,   322,   323,   326,   333,   334,   344,   348,   351,
   355,   363,   369,   378,   389,   391,   405,   406,   419,   423,
   431,   432,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,   435,   349,   436,    99,    99,   437,   107,
    99,    99,    99,    99,   443,   447,   448,   107,   107,   107,
   107,    99,   107,   450,   461,   462,   463,   464,   465,   475,
   478,   483,   484,   491,   492,   493,   494,   498,   349,   504,
   506,   507,   509,   107,   349,   510,   517,   522,   107,   349,
   526,   107,   527,   107,   538,   107,   543,   349,   349,   545,
   546,   562,   349,   349,   349,   349,   349,   349,   349,   349,
   349,   570,   572,   573,   579,   589,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   592,   350,   593,
   107,   107,   594,   116,   107,   107,   107,   107,   595,   596,
   597,   116,   116,   116,   116,   107,   116,   598,   599,   600,
   601,   602,   603,   604,   605,   606,   610,   611,   618,   619,
   620,   621,   350,   622,   625,   628,   629,   116,   350,   634,
   116,   116,   116,   350,   636,   637,   638,   116,   645,   116,
   646,   350,   350,   665,   667,   670,   350,   350,   350,   350,
   350,   350,   350,   350,   350,   681,   682,   683,   685,   693,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   694,   695,   696,   116,   116,   697,   120,   116,   116,
   116,   116,   698,   699,   700,   120,   120,   120,   120,   116,
   120,   701,   702,   703,   704,   705,   713,   718,   742,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   120,   nil,   nil,   120,   120,   120,   nil,   nil,   nil,
   nil,   120,   nil,   120,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   199,
   199,   nil,   199,   199,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   199,   nil,   nil,   120,   120,
   nil,   nil,   120,   120,   120,   120,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   120,   nil,   271,   nil,   360,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   271,
   nil,   360,   199,   199,   nil,   nil,   nil,   360,   nil,   nil,
   nil,   nil,   360,   nil,   nil,   nil,   199,   199,   nil,   273,
   360,   360,   nil,   nil,   nil,   360,   360,   360,   360,   360,
   360,   360,   360,   360,   271,   271,   271,   271,   271,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
   271,   271,   271,   273,   nil,   nil,   271,   271,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   271,   nil,   335,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   335,   335,   nil,   335,   335,   nil,   nil,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   335,   nil,   nil,
   273,   273,   nil,   nil,   nil,   nil,   nil,   273,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   273,   nil,   336,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   336,   336,   nil,   336,   336,
   nil,   nil,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   336,   nil,   nil,   335,   335,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   335,   335,
   nil,   359,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   359,   nil,   nil,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   359,   nil,   nil,   336,   336,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   336,   336,   nil,   366,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   366,   366,   nil,   366,   366,   nil,   nil,
   359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
   359,   359,   359,   359,   359,   359,   359,   359,   359,   366,
   nil,   nil,   359,   359,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   359,   359,   nil,   392,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   392,   nil,   nil,   366,   366,   366,   366,   366,   366,
   366,   366,   366,   366,   366,   366,   366,   366,   366,   366,
   366,   366,   366,   392,   366,   366,   366,   366,   nil,   392,
   nil,   nil,   nil,   nil,   392,   nil,   nil,   nil,   nil,   nil,
   366,   366,   392,   392,   418,   nil,   nil,   392,   392,   392,
   392,   392,   392,   392,   392,   392,   nil,   nil,   392,   392,
   392,   392,   392,   392,   392,   392,   392,   392,   392,   392,
   392,   392,   392,   392,   392,   392,   392,   nil,   418,   nil,
   392,   392,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   392,   392,   nil,   nil,   550,   nil,
   368,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   418,   418,   418,   418,   418,   418,   418,
   418,   418,   418,   418,   418,   418,   418,   418,   418,   418,
   418,   418,   550,   nil,   368,   418,   418,   nil,   nil,   nil,
   368,   nil,   nil,   nil,   nil,   368,   nil,   nil,   nil,   nil,
   418,   nil,   632,   368,   368,   nil,   nil,   nil,   368,   368,
   368,   368,   368,   368,   368,   368,   368,   550,   550,   550,
   550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
   550,   550,   550,   550,   550,   550,   632,   nil,   nil,   550,
   550,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   550,   nil,    55,   393,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   632,   632,   632,   632,   632,   632,   632,   632,   632,
   632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
    55,   393,   nil,   632,   632,   nil,   nil,   393,   nil,   nil,
   nil,   nil,   393,   nil,   nil,   nil,   nil,   nil,   632,   226,
   393,   393,   nil,   nil,   nil,   393,   393,   393,   393,   393,
   393,   393,   393,   393,   nil,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,   nil,   226,   nil,   nil,   nil,    55,    55,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    55,   370,   394,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   370,   nil,   nil,   nil,   nil,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   nil,   370,   394,   nil,   nil,
   226,   226,   nil,   394,   nil,   nil,   nil,   nil,   394,   nil,
   nil,   nil,   nil,   nil,   226,   nil,   394,   394,   nil,   nil,
   nil,   394,   394,   394,   394,   394,   394,   394,   394,   394,
   nil,   nil,   nil,   370,   370,   370,   370,   370,   370,   370,
   370,   370,   370,   370,   370,     1,   370,   nil,   nil,   nil,
     1,   nil,   nil,   nil,   nil,   nil,     1,     1,     1,     1,
     1,     1,     1,   nil,     1,   nil,     1,     1,     1,   nil,
     1,   nil,   nil,   nil,     1,     1,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     1,   nil,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   395,
   nil,   nil,   nil,   211,   211,   nil,   nil,   nil,     1,     1,
   211,   211,   211,   211,   211,   211,   211,   nil,   211,   nil,
   211,   211,   211,   nil,   211,   nil,   nil,   nil,   211,   211,
   211,   nil,   nil,   395,   nil,   nil,   nil,   nil,   nil,   395,
   211,   nil,   nil,   nil,   395,   nil,   nil,   nil,   nil,   211,
   nil,   211,   395,   395,   nil,   nil,   nil,   395,   395,   395,
   395,   395,   395,   395,   395,   395,   nil,   590,   590,   nil,
   nil,   nil,   211,   211,   590,   590,   590,   590,   590,   590,
   590,   nil,   590,   590,   590,   590,   590,   nil,   590,   nil,
   nil,   nil,   590,   590,   590,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   590,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   590,   nil,   590,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   691,   691,   nil,   nil,   nil,   590,   590,   691,   691,
   691,   691,   691,   691,   691,   nil,   691,   nil,   691,   691,
   691,   nil,   691,   nil,   nil,   nil,   691,   691,   691,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   691,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   691,     0,   691,
   nil,   nil,   nil,   nil,     0,     0,     0,     0,     0,     0,
     0,   nil,     0,   nil,     0,     0,     0,   nil,     0,   nil,
   691,   691,     0,     0,     0,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     0,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     0,    91,     0,   nil,   nil,   nil,   nil,
    91,    91,    91,    91,    91,    91,    91,   nil,    91,   nil,
    91,    91,    91,   nil,    91,   nil,     0,     0,    91,    91,
    91,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    91,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,
   520,    91,   nil,   nil,   nil,   nil,   520,   520,   520,   520,
   520,   520,   520,   nil,   520,   520,   520,   520,   520,   nil,
   520,   nil,    91,    91,   520,   520,   520,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   520,   nil,   nil,   nil,
   nil,   396,   nil,   nil,   nil,   520,   664,   520,   nil,   nil,
   nil,   nil,   664,   664,   664,   664,   664,   664,   664,   nil,
   664,   nil,   664,   664,   664,   nil,   664,   nil,   520,   520,
   664,   664,   664,   nil,   nil,   396,   397,   nil,   nil,   nil,
   nil,   396,   664,   nil,   nil,   nil,   396,   nil,   nil,   nil,
   nil,   664,   nil,   664,   396,   396,   nil,   nil,   nil,   396,
   396,   396,   396,   396,   396,   396,   396,   396,   nil,   398,
   397,   nil,   nil,   nil,   664,   664,   397,   nil,   nil,   nil,
   nil,   397,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   397,
   397,   nil,   nil,   nil,   397,   397,   397,   397,   397,   397,
   397,   397,   397,   398,   399,   nil,   nil,   nil,   nil,   398,
   nil,   nil,   nil,   nil,   398,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   398,   398,   nil,   nil,   nil,   398,   398,   398,
   398,   398,   398,   398,   398,   398,   nil,   400,   399,   nil,
   nil,   nil,   nil,   nil,   399,   nil,   nil,   nil,   nil,   399,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   399,   399,   nil,
   nil,   nil,   399,   399,   399,   399,   399,   399,   399,   399,
   399,   400,   401,   nil,   nil,   nil,   nil,   400,   nil,   nil,
   nil,   nil,   400,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   400,   400,   nil,   nil,   nil,   400,   400,   400,   400,   400,
   400,   400,   400,   400,   nil,   402,   401,   nil,   nil,   nil,
   nil,   nil,   401,   nil,   nil,   nil,   nil,   401,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   401,   401,   nil,   nil,   nil,
   401,   401,   401,   401,   401,   401,   401,   401,   401,   402,
   488,   nil,   nil,   nil,   nil,   402,   nil,   nil,   nil,   nil,
   402,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   402,   402,
   nil,   nil,   nil,   402,   402,   402,   402,   402,   402,   402,
   402,   402,   nil,   496,   488,   nil,   nil,   nil,   nil,   nil,
   488,   nil,   nil,   nil,   nil,   488,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   488,   488,   nil,   nil,   nil,   488,   488,
   488,   488,   488,   488,   488,   488,   488,   496,   580,   nil,
   nil,   nil,   nil,   496,   nil,   nil,   nil,   nil,   496,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   496,   496,   nil,   nil,
   nil,   496,   496,   496,   496,   496,   496,   496,   496,   496,
   nil,   582,   580,   nil,   nil,   nil,   nil,   nil,   580,   nil,
   nil,   nil,   nil,   580,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   580,   580,   nil,   nil,   nil,   580,   580,   580,   580,
   580,   580,   580,   580,   580,   582,   nil,   nil,   nil,   nil,
   nil,   582,   nil,   nil,   nil,   nil,   582,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   582,   582,   nil,   nil,   nil,   582,
   582,   582,   582,   582,   582,   582,   582,   582 ]

racc_action_pointer = [
  2023,  1785,   nil,    25,    90,   100,   104,   114,   118,   144,
   157,   213,   217,   260,   299,   304,   350,   359,   361,    11,
   365,   nil,   nil,   369,   375,   387,   402,   408,   402,   305,
   415,   413,   nil,   458,   456,   460,   458,   nil,   nil,   459,
   465,   467,   465,   nil,   nil,   466,   470,   296,   nil,   nil,
   nil,   468,   472,   111,   154,  1590,   517,   nil,   nil,   nil,
   nil,   nil,   470,   473,   479,   nil,   496,   501,   423,   nil,
   515,   515,   519,   518,   525,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  2069,   523,   487,   522,   571,    15,   192,   268,   659,
   525,   nil,   nil,   524,   527,   nil,   nil,   753,     8,    17,
   nil,   350,   145,   173,   512,   356,   847,   531,   552,    -3,
   941,   519,   nil,   511,   512,   558,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   235,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -69,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   558,   559,   nil,   nil,   561,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   562,   563,   563,   564,   nil,   nil,   nil,   569,   995,
   479,   271,   nil,   530,   nil,   572,   nil,   nil,   nil,   nil,
   nil,  1849,   nil,   573,   nil,   387,   nil,   574,   585,   606,
   607,   610,   612,   613,   614,   394,  1643,   615,   394,   nil,
   nil,   nil,   569,   569,   569,   350,   350,   316,   nil,   212,
   nil,   nil,   nil,   nil,   nil,   nil,   626,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   156,   nil,
   nil,    51,   nil,   624,   625,   631,   632,   642,   643,   665,
   568,  1049,   625,  1103,   673,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   359,   360,   152,   nil,   nil,   678,   679,
   678,   681,   158,   159,   167,    -3,   nil,   686,   687,   698,
     0,    22,   168,   169,     9,   nil,   699,   700,   701,   702,
   703,   704,   705,   170,   173,   180,   181,   182,    20,   nil,
   706,   708,   710,   711,   183,   nil,   688,   nil,   151,   184,
   253,   nil,   nil,   713,   714,  1157,  1211,    12,   146,   nil,
   nil,   354,   nil,   nil,   664,   nil,   nil,   nil,   641,   748,
   842,   710,   nil,   nil,   nil,   621,   nil,   nil,   nil,  1265,
  1051,   408,   nil,   715,    18,   nil,  1319,   nil,  1484,   698,
  1696,    16,   nil,   nil,   463,   nil,   nil,   nil,   720,   497,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   718,
   nil,   719,  1373,  1591,  1697,  1843,  2155,  2190,  2223,  2258,
  2291,  2326,  2359,   nil,   nil,   679,   718,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1428,   722,
   -10,   nil,   -45,   723,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   684,   685,   389,   nil,   744,   728,   730,   nil,   nil,
   nil,   nil,   nil,   758,   nil,   nil,     3,   759,   740,   nil,
   764,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   768,   769,   770,   771,   772,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   208,   770,   nil,   nil,   771,   nil,
   nil,   nil,   nil,   775,   776,   nil,   nil,   nil,  2394,   nil,
   nil,   775,   776,   779,   687,   nil,  2427,   409,   778,   nil,
   nil,    17,   nil,   nil,   787,   nil,   784,   767,   nil,   715,
   748,   nil,   nil,   nil,   nil,   nil,   nil,   790,   nil,   nil,
  2115,   nil,   791,   nil,   nil,   nil,   745,   746,   362,   390,
   394,   326,   329,   nil,   nil,   nil,   nil,   211,   798,   nil,
    -4,   nil,   nil,   696,   nil,   763,   764,   nil,     7,   nil,
  1482,   nil,   nil,   nil,   nil,   154,   255,   254,   255,   259,
   260,   nil,   805,   nil,   267,   nil,   nil,   nil,   nil,   nil,
   812,   270,   813,   814,   nil,   nil,   nil,   nil,   nil,   724,
  2462,   nil,  2495,   nil,   nil,   nil,   nil,   nil,   nil,   819,
  1913,   nil,   845,   847,   850,   856,   857,   858,   865,   866,
   867,   868,   869,   870,   871,   872,   872,   279,   nil,   nil,
   769,   868,   nil,   nil,   nil,   nil,   nil,   nil,   769,   771,
   874,   835,   837,   nil,   280,   833,   nil,   -42,   879,   779,
    22,   nil,  1536,   nil,   782,    24,   867,   867,   868,   nil,
   nil,   nil,   nil,   nil,   nil,   890,   892,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  2161,   896,   nil,   898,   nil,   nil,
   896,   nil,   281,   282,    98,   nil,   103,   nil,   nil,   nil,
   nil,   808,   867,   911,   nil,   811,   283,   284,   285,   nil,
   nil,  1977,   nil,   917,   939,   940,   941,   944,   950,   951,
   952,   959,   960,   961,   962,   963,   307,   nil,   114,   138,
   nil,   308,   nil,   915,   nil,   nil,   nil,   nil,   939,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   451,   nil,   nil,   nil,
   nil,   309,   962,   nil,   nil ]

racc_action_default = [
   -18,  -445,    -1,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
  -445,   -76,   -77,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
  -445,  -445,   -93,  -445,  -445,  -445,  -445,  -132,  -133,  -445,
  -445,  -445,  -445,  -176,  -177,  -445,  -445,  -445,  -187,  -188,
  -189,  -445,  -445,  -445,  -445,  -445,  -445,  -278,  -279,  -280,
  -281,  -282,  -445,  -445,  -445,  -349,  -445,  -445,  -445,  -357,
  -445,  -445,  -445,  -445,  -445,    -2,    -3,    -4,    -5,    -6,
    -7,    -8,    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,
   -17,   -18,  -173,   -24,  -445,  -445,   -78,   -79,   -80,  -103,
  -445,   -89,   -90,  -445,  -445,   -91,   -92,  -103,  -445,  -445,
  -126,  -134,  -151,  -161,  -154,  -179,  -103,  -445,  -445,  -191,
  -103,  -172,  -173,  -445,  -445,  -445,  -231,  -232,  -233,  -234,
  -235,  -236,  -237,  -238,  -239,  -240,  -313,  -314,  -325,  -316,
  -317,  -318,  -319,  -320,  -321,  -322,  -323,  -324,  -326,  -328,
  -329,  -330,  -331,  -332,  -333,  -445,  -335,  -337,  -339,  -340,
  -341,  -342,  -343,  -381,  -383,  -443,  -277,  -445,  -285,  -286,
  -287,  -288,  -289,  -290,  -291,  -292,  -293,  -294,  -295,  -296,
  -297,  -298,  -299,  -300,  -301,  -302,  -303,  -304,  -305,  -344,
  -345,  -445,  -445,  -445,  -445,  -444,  -283,  -310,  -346,  -445,
  -353,  -445,  -355,  -445,  -372,  -445,  -373,  -406,  -409,  -407,
   745,  -445,   -21,  -445,  -174,  -445,   -25,  -445,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -299,  -445,   -71,
   -73,   -74,  -241,  -242,  -244,  -246,  -248,  -251,  -254,  -445,
  -259,  -260,  -261,  -262,  -263,  -264,  -445,  -266,  -267,  -268,
  -269,  -270,  -271,  -272,  -273,  -274,  -275,   -83,  -445,   -85,
   -87,  -445,   -94,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -419,  -420,  -421,  -438,  -439,
  -440,  -441,   -82,  -178,  -190,  -445,  -120,  -122,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -445,  -127,  -445,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -142,  -445,  -445,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -155,
  -445,  -445,  -445,  -445,  -445,  -185,  -203,  -204,  -445,  -445,
  -445,  -200,  -211,  -445,  -445,  -445,  -445,  -184,  -197,  -192,
  -198,  -445,  -228,  -229,  -445,  -315,  -327,  -334,  -336,  -445,
  -445,  -284,  -306,  -308,  -309,  -311,  -312,  -348,  -356,  -445,
  -445,  -445,  -350,  -445,  -445,  -364,  -445,  -367,  -445,  -445,
  -445,  -445,  -375,  -377,  -445,   -19,   -22,  -175,  -445,  -445,
   -27,   -28,   -29,   -30,   -31,   -32,   -33,   -34,   -35,  -445,
   -37,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
  -445,  -445,  -445,  -258,  -263,  -445,  -104,  -105,  -107,   -81,
   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -445,  -445,
  -418,  -414,  -445,  -445,  -413,  -181,  -194,  -108,  -121,  -123,
  -124,  -445,  -445,  -445,  -117,  -118,  -445,  -116,  -125,  -128,
  -129,  -130,  -131,  -445,  -170,  -171,  -445,  -445,  -137,  -140,
  -141,  -138,  -135,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -445,  -445,  -445,  -445,  -445,  -152,  -156,  -157,  -158,
  -159,  -160,  -153,  -202,  -445,  -206,  -208,  -210,  -207,  -180,
  -201,  -212,  -213,  -445,  -445,  -183,  -196,  -193,  -445,  -338,
  -276,  -445,  -445,  -445,  -384,  -385,  -445,  -445,  -445,  -347,
  -351,  -445,  -354,  -365,  -445,  -368,  -445,  -445,  -370,  -325,
  -445,  -359,  -360,  -361,  -362,  -363,  -374,  -445,  -408,  -410,
  -445,   -26,  -445,   -36,   -70,   -72,  -243,  -245,  -247,  -249,
  -250,  -252,  -253,  -255,  -256,  -257,  -265,  -445,  -445,  -311,
  -400,  -390,  -411,  -416,  -417,  -445,  -445,  -422,  -445,  -424,
  -445,  -427,  -428,  -429,  -412,  -445,  -445,  -445,  -445,  -445,
  -445,  -162,  -445,  -164,  -445,  -165,  -166,  -167,  -168,  -169,
  -205,  -445,  -214,  -215,  -230,  -380,  -382,  -307,  -386,  -445,
  -445,  -379,  -445,  -352,  -366,  -371,  -369,  -358,  -376,  -445,
  -445,   -38,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -106,  -388,
  -404,  -403,  -389,  -391,  -392,  -393,  -394,  -395,  -398,  -399,
  -445,  -445,  -445,  -415,  -445,  -445,  -423,  -445,  -445,  -216,
  -445,  -224,  -445,  -227,  -220,  -445,  -445,  -114,  -113,  -115,
  -119,  -163,  -136,  -209,  -387,  -445,  -445,   -20,   -23,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,  -445,  -445,  -402,  -445,  -396,  -397,
  -401,  -404,  -445,  -445,  -445,  -433,  -445,  -436,  -425,  -426,
  -218,  -217,  -445,  -445,  -222,  -221,  -445,  -445,  -445,  -378,
  -442,  -445,   -55,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -405,  -445,  -445,
  -430,  -445,  -435,  -445,  -219,  -225,  -226,  -223,  -110,  -111,
  -112,   -54,   -56,   -57,   -58,   -59,   -60,   -61,   -62,   -63,
   -64,   -65,   -66,   -67,   -68,   -69,  -445,  -431,  -432,  -434,
  -437,  -445,  -445,  -109,   -75 ]

racc_goto_table = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
   231,   419,   372,   126,   229,   406,   230,   167,   127,   322,
   129,   216,   227,   436,   543,   319,   325,   540,   131,   183,
   340,   451,   296,   491,   492,   351,   125,   549,   286,   132,
   184,     2,    75,   170,   498,   306,   320,   305,   299,   307,
   321,   312,   323,   544,   123,   124,   134,   172,   595,   262,
   450,   611,   288,   365,   596,   639,   475,   287,   183,   618,
   495,   619,   591,   128,   701,   674,   480,   186,   692,   184,
   339,   577,   170,   130,     1,   135,   478,   480,   362,   187,
   211,     3,   183,     4,   585,     5,   244,    16,   330,    17,
   281,   701,   341,   184,   188,   722,   170,   215,   281,   590,
   191,    93,   443,   447,   445,   445,   691,   281,   630,   635,
   172,   281,   192,   708,   709,   529,   530,   597,   595,   257,
   259,   260,   212,   228,   596,   533,   534,   535,   531,   532,
   186,   261,   649,   670,   608,   285,   610,   433,   669,   668,
   295,   304,   187,   448,   318,   598,   473,   736,   538,   643,
   715,   405,   526,   527,   528,   403,   166,   188,   196,   361,
   364,   202,   183,   191,   510,   504,   623,   505,   204,   371,
   579,   494,   609,   184,   126,   192,   170,   612,   541,   127,
   613,   129,   719,   720,   425,   426,   614,   597,   615,   131,
   172,   616,   696,   617,   207,   374,   420,   389,   697,   578,
   132,     3,   570,     4,   666,     5,   428,    16,   439,    17,
   186,   410,   542,   423,   322,   598,   503,   134,   671,   696,
   467,   501,   187,   680,   299,   697,   679,   306,   684,   453,
   288,   307,   678,   312,   128,   287,   743,   188,   485,   486,
   500,   320,   376,   191,   130,   321,   135,   323,   562,   408,
   445,   421,   281,   519,   645,   192,   646,   548,   599,   676,
   nil,   698,   281,   nil,   281,   707,   nil,   nil,   nil,   602,
   497,   nil,   nil,   507,   nil,   714,   281,   636,   nil,   717,
   628,   716,   642,   434,   408,   437,   483,   484,   698,   699,
   603,   444,   444,   449,   408,   521,   522,   231,   183,   183,
   606,   525,   nil,   230,   461,   462,   463,   464,   465,   184,
   184,   450,   170,   170,   588,   472,   699,   506,   511,   477,
   408,   281,   183,   512,   183,   513,   172,   172,   599,   183,
   nil,   nil,   281,   184,   nil,   184,   170,   183,   170,   602,
   184,   572,   573,   170,   nil,   nil,   186,   186,   184,   nil,
   172,   170,   172,   nil,   nil,   183,   nil,   172,   187,   187,
   603,   515,   683,   nil,   nil,   172,   184,   nil,   nil,   170,
   606,   nil,   186,   188,   188,   nil,   nil,   186,   nil,   191,
   191,   nil,   nil,   244,   187,   186,   nil,   nil,   nil,   187,
   nil,   192,   192,   574,   nil,   nil,   nil,   187,   nil,   188,
   nil,   nil,   700,   nil,   188,   191,   nil,   nil,   514,   281,
   191,   nil,   188,   702,   nil,   nil,   nil,   192,   191,   nil,
   nil,   nil,   192,   nil,   nil,   nil,   nil,   nil,   nil,   700,
   192,   nil,   nil,   nil,   703,   nil,   nil,   444,   nil,   nil,
   702,   nil,   nil,   nil,   606,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   703,   nil,   nil,   nil,   477,   nil,   nil,   nil,   nil,
   nil,   606,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   592,   nil,   593,   nil,   594,   nil,   604,   nil,   605,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   408,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   281,   nil,   nil,   nil,   nil,   nil,   nil,   408,   637,
   638,   640,   nil,   nil,   nil,   408,   nil,   nil,   nil,   nil,
   nil,   nil,   477,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   592,   nil,   593,   nil,   594,   nil,   604,   nil,   605,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   665,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   675,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   281,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   693,   nil,   694,   nil,   695,   nil,
   704,   nil,   705,   675,   675,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   718,   640,   640,
   nil,   693,   nil,   694,   nil,   695,   nil,   704,   nil,   705,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   675,   nil,   nil,
   nil,   nil,   739,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   640 ]

racc_goto_check = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
    35,   103,   169,   105,    33,    51,    34,    90,   106,    76,
   108,    24,    26,    56,   100,    79,    86,   104,   110,   110,
    86,    71,    63,   125,   125,    98,    25,   194,    58,   111,
   111,     2,     2,   134,   125,    64,    64,    72,    49,    65,
    65,    49,    49,   192,    36,    36,    36,    36,     6,    48,
    51,   182,    59,   162,     7,    57,    95,    48,   110,   180,
   171,   181,    27,   107,    28,    37,    92,   127,    31,   111,
    90,   139,   134,   109,     1,   113,    51,    92,   155,   129,
    19,     3,   110,     4,   139,     5,    36,    16,    85,    17,
    36,    28,    85,   111,   131,    31,   134,    21,    36,    22,
   152,    23,    80,    80,    81,    81,    30,    36,    99,    99,
    36,    36,   156,    37,    37,   118,   118,     8,     6,    46,
    46,    46,     2,    32,     7,   120,   120,   120,   119,   119,
   127,    44,    27,   182,    52,    54,   104,    55,   180,   181,
    62,    69,   129,    70,    78,     9,    94,    37,   103,    96,
   101,    35,   115,   116,   117,   122,   126,   131,   132,   154,
   158,   160,   110,   152,   161,   164,   192,   165,   167,   168,
   125,   170,   172,   111,   105,   156,   134,   173,   174,   106,
   175,   108,    57,    57,    86,    86,   176,     8,   177,   110,
    36,   178,     6,   179,   184,   185,   187,    25,     7,   171,
   111,     3,    95,     4,   100,     5,    58,    16,    63,    17,
   127,    48,   188,   190,    76,     9,   162,    36,   104,     6,
    79,    98,   129,   100,    49,     7,   104,    64,   100,    72,
    59,    65,   194,    49,   107,    48,    57,   131,    86,    86,
   155,    64,     2,   152,   109,    65,   113,    49,    80,    36,
    81,   191,    36,   155,   125,   156,   125,   193,    10,   196,
   nil,     8,    36,   nil,    36,   104,   nil,   nil,   nil,    14,
    34,   nil,   nil,    35,   nil,   100,    36,    56,   nil,   100,
   103,   104,    71,    36,    36,    36,    90,    90,     8,     9,
    15,    36,    36,    36,    36,    24,    26,    35,   110,   110,
    18,    33,   nil,    34,    36,    36,    36,    36,    36,   111,
   111,    51,   134,   134,   169,    36,     9,    90,   105,    36,
    36,    36,   110,   106,   110,   108,    36,    36,    10,   110,
   nil,   nil,    36,   111,   nil,   111,   134,   110,   134,    14,
   111,    98,    98,   134,   nil,   nil,   127,   127,   111,   nil,
    36,   134,    36,   nil,   nil,   110,   nil,    36,   129,   129,
    15,    36,   103,   nil,   nil,    36,   111,   nil,   nil,   134,
    18,   nil,   127,   131,   131,   nil,   nil,   127,   nil,   152,
   152,   nil,   nil,    36,   129,   127,   nil,   nil,   nil,   129,
   nil,   156,   156,    35,   nil,   nil,   nil,   129,   nil,   131,
   nil,   nil,    10,   nil,   131,   152,   nil,   nil,   131,    36,
   152,   nil,   131,    14,   nil,   nil,   nil,   156,   152,   nil,
   nil,   nil,   156,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   156,   nil,   nil,   nil,    15,   nil,   nil,    36,   nil,   nil,
    14,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,     4,   nil,     5,   nil,    16,   nil,    17,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,    36,    36,
    36,    36,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,     4,   nil,     5,   nil,    16,   nil,    17,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     3,   nil,     4,   nil,     5,   nil,
    16,   nil,    17,    36,    36,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,    36,    36,
   nil,     3,   nil,     4,   nil,     5,   nil,    16,   nil,    17,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36 ]

racc_goto_pointer = [
   nil,    84,    41,     0,     2,     4,  -462,  -456,  -393,  -365,
  -252,   nil,   nil,   nil,  -241,  -220,     6,     8,  -210,    -1,
   nil,    12,  -411,    92,   -74,   -19,   -73,  -448,  -590,   nil,
  -548,  -586,    38,   -81,   -79,   -85,     1,  -549,   nil,   nil,
   nil,   nil,   nil,   nil,    42,   nil,    33,   nil,   -40,   -61,
   nil,  -243,  -393,   nil,    38,  -145,  -270,  -495,   -69,   -45,
   nil,   nil,    41,   -77,   -67,   -63,   nil,   nil,   nil,    39,
  -149,  -272,   -65,   nil,   nil,   nil,   -94,   nil,    41,   -88,
  -188,  -186,   nil,   nil,   nil,   -18,   -89,   nil,   nil,   nil,
   -39,   nil,  -254,   nil,  -170,  -262,  -412,   nil,  -132,  -437,
  -396,  -522,   nil,  -260,  -392,   -42,   -37,    18,   -35,    28,
   -27,   -16,   nil,    30,   nil,  -231,  -231,  -231,  -271,  -260,
  -265,   nil,   -74,   nil,   nil,  -316,   110,    21,   nil,    33,
   nil,    48,   106,   nil,   -13,   nil,   nil,   nil,   nil,  -412,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    54,   nil,   -30,  -111,    66,   nil,   -31,   nil,
   103,  -196,  -138,   nil,  -191,  -189,   nil,   108,   -26,  -193,
  -174,  -285,  -356,  -353,  -231,  -350,  -344,  -342,  -339,  -337,
  -471,  -469,  -477,   nil,   132,    -3,   nil,   -66,  -198,   nil,
   -50,   -11,  -367,  -155,  -385,   nil,  -356 ]

racc_goto_default = [
   nil,   nil,   nil,   263,   264,   265,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,   268,   269,    18,   nil,
    20,   nil,   nil,   121,   nil,   nil,   182,   nil,   600,   601,
   nil,   nil,   nil,   nil,   168,   490,   404,   nil,    21,    22,
    23,    24,    25,    26,   nil,    27,   nil,    30,   332,   266,
   267,   435,   407,    33,   nil,   nil,   nil,   nil,   nil,   334,
   289,    35,   nil,   nil,   297,   298,    37,    38,    40,   nil,
   nil,   nil,   nil,   308,   309,   310,   311,    41,   nil,   nil,
   nil,   180,    43,    44,    46,   nil,   nil,    48,    49,    50,
   363,    52,   331,   326,   327,   nil,   476,   333,   nil,   nil,
   nil,   631,   632,   276,   353,   174,   175,   176,   177,   173,
   279,   280,   133,   178,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   245,   254,   nil,   nil,    57,    58,    59,
    60,    61,   nil,   169,   278,   171,   179,   181,   185,   352,
   354,   356,   139,   140,   141,   142,   143,   144,   150,   151,
   152,   153,    63,    64,   nil,   nil,    66,    67,   nil,    68,
   nil,   nil,   nil,   366,   nil,   367,    70,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    72,   nil,   nil,   272,   nil,   nil,   273,
   274,   nil,   nil,   nil,   nil,   550,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 114, :_reduce_none,
  2, 114, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  2, 115, :_reduce_none,
  0, 115, :_reduce_none,
  4, 124, :_reduce_19,
  2, 131, :_reduce_20,
  1, 132, :_reduce_none,
  2, 132, :_reduce_none,
  7, 125, :_reduce_23,
  2, 133, :_reduce_24,
  1, 134, :_reduce_none,
  3, 134, :_reduce_none,
  2, 137, :_reduce_27,
  2, 137, :_reduce_28,
  2, 137, :_reduce_29,
  2, 137, :_reduce_30,
  2, 137, :_reduce_31,
  2, 137, :_reduce_32,
  2, 137, :_reduce_33,
  2, 137, :_reduce_34,
  2, 137, :_reduce_35,
  3, 137, :_reduce_36,
  2, 137, :_reduce_37,
  1, 135, :_reduce_none,
  2, 135, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  4, 141, :_reduce_54,
  1, 143, :_reduce_none,
  2, 143, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  5, 126, :_reduce_70,
  1, 145, :_reduce_71,
  3, 145, :_reduce_72,
  1, 146, :_reduce_73,
  1, 146, :_reduce_74,
  6, 142, :_reduce_75,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  2, 152, :_reduce_78,
  2, 152, :_reduce_79,
  2, 152, :_reduce_80,
  4, 151, :_reduce_81,
  3, 151, :_reduce_82,
  3, 156, :_reduce_83,
  2, 156, :_reduce_84,
  3, 156, :_reduce_85,
  2, 156, :_reduce_86,
  3, 156, :_reduce_87,
  2, 156, :_reduce_88,
  2, 153, :_reduce_89,
  2, 154, :_reduce_90,
  2, 158, :_reduce_91,
  2, 160, :_reduce_92,
  1, 155, :_reduce_93,
  1, 157, :_reduce_none,
  2, 157, :_reduce_none,
  2, 161, :_reduce_none,
  2, 161, :_reduce_none,
  2, 161, :_reduce_none,
  2, 161, :_reduce_none,
  2, 161, :_reduce_none,
  2, 161, :_reduce_none,
  2, 161, :_reduce_none,
  0, 161, :_reduce_none,
  2, 159, :_reduce_104,
  1, 164, :_reduce_105,
  3, 164, :_reduce_106,
  1, 165, :_reduce_none,
  4, 123, :_reduce_108,
  10, 166, :_reduce_109,
  8, 166, :_reduce_110,
  8, 166, :_reduce_111,
  8, 166, :_reduce_112,
  6, 166, :_reduce_113,
  6, 166, :_reduce_114,
  6, 166, :_reduce_115,
  4, 166, :_reduce_116,
  1, 168, :_reduce_none,
  1, 169, :_reduce_none,
  1, 170, :_reduce_none,
  1, 167, :_reduce_none,
  2, 167, :_reduce_none,
  1, 171, :_reduce_none,
  2, 171, :_reduce_none,
  2, 171, :_reduce_none,
  4, 120, :_reduce_125,
  2, 174, :_reduce_126,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 176, :_reduce_none,
  2, 176, :_reduce_none,
  2, 176, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  2, 180, :_reduce_134,
  4, 179, :_reduce_135,
  6, 181, :_reduce_136,
  4, 181, :_reduce_137,
  4, 181, :_reduce_138,
  2, 181, :_reduce_139,
  1, 183, :_reduce_none,
  1, 184, :_reduce_none,
  1, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  0, 185, :_reduce_none,
  4, 122, :_reduce_152,
  4, 190, :_reduce_153,
  2, 190, :_reduce_154,
  1, 191, :_reduce_none,
  2, 191, :_reduce_none,
  2, 192, :_reduce_none,
  2, 192, :_reduce_none,
  2, 192, :_reduce_none,
  2, 192, :_reduce_none,
  0, 192, :_reduce_none,
  3, 177, :_reduce_162,
  4, 178, :_reduce_163,
  3, 178, :_reduce_164,
  3, 187, :_reduce_165,
  3, 186, :_reduce_166,
  3, 188, :_reduce_167,
  3, 189, :_reduce_168,
  3, 189, :_reduce_169,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 149, :_reduce_172,
  1, 136, :_reduce_173,
  2, 136, :_reduce_174,
  3, 136, :_reduce_175,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 196, :_reduce_178,
  2, 196, :_reduce_179,
  4, 195, :_reduce_180,
  4, 197, :_reduce_181,
  3, 197, :_reduce_182,
  4, 197, :_reduce_183,
  3, 197, :_reduce_184,
  3, 197, :_reduce_185,
  2, 197, :_reduce_186,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 202, :_reduce_190,
  2, 202, :_reduce_191,
  3, 201, :_reduce_192,
  4, 200, :_reduce_193,
  4, 204, :_reduce_194,
  3, 204, :_reduce_195,
  4, 204, :_reduce_196,
  3, 204, :_reduce_197,
  3, 204, :_reduce_198,
  2, 204, :_reduce_199,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  2, 199, :_reduce_202,
  1, 199, :_reduce_203,
  1, 199, :_reduce_204,
  3, 206, :_reduce_205,
  2, 206, :_reduce_206,
  2, 207, :_reduce_207,
  1, 208, :_reduce_208,
  3, 208, :_reduce_209,
  1, 209, :_reduce_none,
  1, 205, :_reduce_none,
  2, 205, :_reduce_none,
  2, 205, :_reduce_none,
  3, 210, :_reduce_214,
  3, 210, :_reduce_215,
  4, 172, :_reduce_216,
  5, 172, :_reduce_217,
  5, 172, :_reduce_218,
  6, 172, :_reduce_219,
  4, 173, :_reduce_220,
  5, 173, :_reduce_221,
  5, 173, :_reduce_222,
  6, 173, :_reduce_223,
  1, 212, :_reduce_224,
  3, 212, :_reduce_225,
  3, 214, :_reduce_226,
  1, 215, :_reduce_none,
  3, 130, :_reduce_228,
  3, 129, :_reduce_229,
  5, 117, :_reduce_230,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 148, :_reduce_none,
  1, 227, :_reduce_none,
  3, 227, :_reduce_243,
  1, 228, :_reduce_none,
  3, 228, :_reduce_245,
  1, 229, :_reduce_none,
  3, 229, :_reduce_247,
  1, 230, :_reduce_none,
  3, 230, :_reduce_249,
  3, 230, :_reduce_250,
  1, 231, :_reduce_none,
  3, 231, :_reduce_252,
  3, 231, :_reduce_253,
  1, 232, :_reduce_none,
  3, 232, :_reduce_255,
  3, 232, :_reduce_256,
  3, 232, :_reduce_257,
  2, 233, :_reduce_258,
  1, 233, :_reduce_none,
  1, 234, :_reduce_260,
  1, 234, :_reduce_261,
  1, 234, :_reduce_262,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  3, 235, :_reduce_265,
  1, 236, :_reduce_266,
  1, 236, :_reduce_267,
  1, 236, :_reduce_268,
  1, 236, :_reduce_269,
  1, 236, :_reduce_270,
  1, 236, :_reduce_271,
  1, 236, :_reduce_272,
  1, 236, :_reduce_273,
  1, 237, :_reduce_274,
  1, 237, :_reduce_275,
  1, 238, :_reduce_276,
  2, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 239, :_reduce_284,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  1, 211, :_reduce_306,
  3, 211, :_reduce_307,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 245, :_reduce_310,
  1, 217, :_reduce_none,
  1, 253, :_reduce_none,
  1, 222, :_reduce_313,
  1, 222, :_reduce_314,
  2, 222, :_reduce_315,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  1, 260, :_reduce_322,
  1, 257, :_reduce_323,
  1, 257, :_reduce_324,
  1, 258, :_reduce_325,
  1, 258, :_reduce_326,
  2, 259, :_reduce_327,
  1, 259, :_reduce_328,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  1, 264, :_reduce_333,
  2, 261, :_reduce_334,
  1, 261, :_reduce_335,
  2, 262, :_reduce_336,
  1, 262, :_reduce_337,
  3, 263, :_reduce_338,
  1, 263, :_reduce_339,
  1, 219, :_reduce_340,
  1, 220, :_reduce_341,
  1, 221, :_reduce_342,
  1, 226, :_reduce_343,
  1, 249, :_reduce_344,
  1, 194, :_reduce_345,
  2, 241, :_reduce_346,
  4, 240, :_reduce_347,
  2, 266, :_reduce_348,
  1, 265, :_reduce_349,
  1, 267, :_reduce_none,
  2, 267, :_reduce_none,
  3, 268, :_reduce_352,
  2, 243, :_reduce_353,
  4, 242, :_reduce_354,
  2, 270, :_reduce_355,
  2, 272, :_reduce_356,
  1, 269, :_reduce_357,
  4, 273, :_reduce_358,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  1, 271, :_reduce_none,
  2, 271, :_reduce_none,
  3, 275, :_reduce_366,
  1, 276, :_reduce_367,
  2, 276, :_reduce_368,
  3, 278, :_reduce_369,
  2, 278, :_reduce_370,
  2, 277, :_reduce_371,
  2, 244, :_reduce_372,
  2, 279, :_reduce_373,
  3, 280, :_reduce_none,
  1, 281, :_reduce_none,
  3, 281, :_reduce_none,
  1, 282, :_reduce_377,
  6, 139, :_reduce_378,
  4, 139, :_reduce_379,
  4, 223, :_reduce_380,
  1, 223, :_reduce_381,
  4, 224, :_reduce_382,
  1, 224, :_reduce_383,
  2, 254, :_reduce_384,
  1, 283, :_reduce_385,
  2, 283, :_reduce_386,
  3, 284, :_reduce_387,
  4, 162, :_reduce_388,
  4, 162, :_reduce_389,
  3, 162, :_reduce_390,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 288, :_reduce_396,
  2, 289, :_reduce_397,
  1, 290, :_reduce_398,
  1, 291, :_reduce_399,
  0, 292, :_reduce_400,
  3, 287, :_reduce_401,
  2, 285, :_reduce_402,
  1, 285, :_reduce_403,
  1, 295, :_reduce_404,
  3, 295, :_reduce_405,
  2, 118, :_reduce_406,
  2, 296, :_reduce_407,
  3, 297, :_reduce_none,
  0, 298, :_reduce_none,
  2, 298, :_reduce_none,
  3, 163, :_reduce_none,
  3, 299, :_reduce_412,
  2, 299, :_reduce_413,
  1, 300, :_reduce_none,
  2, 301, :_reduce_415,
  1, 301, :_reduce_416,
  1, 301, :_reduce_417,
  0, 301, :_reduce_418,
  1, 302, :_reduce_419,
  1, 303, :_reduce_420,
  1, 303, :_reduce_421,
  2, 304, :_reduce_none,
  3, 304, :_reduce_none,
  1, 306, :_reduce_none,
  3, 306, :_reduce_none,
  3, 307, :_reduce_426,
  1, 308, :_reduce_427,
  1, 308, :_reduce_428,
  1, 308, :_reduce_429,
  4, 213, :_reduce_430,
  4, 293, :_reduce_431,
  4, 294, :_reduce_432,
  1, 150, :_reduce_433,
  3, 150, :_reduce_434,
  4, 305, :_reduce_435,
  1, 309, :_reduce_436,
  3, 309, :_reduce_437,
  1, 216, :_reduce_438,
  1, 216, :_reduce_439,
  1, 216, :_reduce_440,
  1, 216, :_reduce_441,
  6, 251, :_reduce_442,
  1, 225, :_reduce_443,
  1, 250, :_reduce_444 ]

racc_reduce_n = 445

racc_shift_n = 745

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "{" => 3,
  "}" => 4,
  "module" => 5,
  :identifier => 6,
  "<" => 7,
  ">" => 8,
  "," => 9,
  "typename" => 10,
  "interface" => 11,
  "valuetype" => 12,
  "eventtype" => 13,
  "struct" => 14,
  "union" => 15,
  "exception" => 16,
  "enum" => 17,
  "sequence" => 18,
  "const" => 19,
  "alias" => 20,
  "local" => 21,
  "abstract" => 22,
  "pseudo" => 23,
  ":" => 24,
  "home" => 25,
  "supports" => 26,
  "manages" => 27,
  "primarykey" => 28,
  "porttype" => 29,
  "component" => 30,
  "connector" => 31,
  "provides" => 32,
  "uses" => 33,
  "multiple" => 34,
  "publishes" => 35,
  "emits" => 36,
  "consumes" => 37,
  "port" => 38,
  "mirrorport" => 39,
  "::" => 40,
  "custom" => 41,
  "truncatable" => 42,
  "public" => 43,
  "private" => 44,
  "factory" => 45,
  "(" => 46,
  ")" => 47,
  "finder" => 48,
  "in" => 49,
  "typeprefix" => 50,
  :string_literal => 51,
  "typeid" => 52,
  "=" => 53,
  "|" => 54,
  "^" => 55,
  "&" => 56,
  ">>" => 57,
  "<<" => 58,
  "+" => 59,
  "-" => 60,
  "*" => 61,
  "/" => 62,
  "%" => 63,
  "~" => 64,
  :integer_literal => 65,
  :wide_string_literal => 66,
  :character_literal => 67,
  :wide_character_literal => 68,
  :fixed_pt_literal => 69,
  :floating_pt_literal => 70,
  "TRUE" => 71,
  "FALSE" => 72,
  "typedef" => 73,
  "native" => 74,
  "float" => 75,
  "double" => 76,
  "long" => 77,
  "int8" => 78,
  "short" => 79,
  "int16" => 80,
  "int32" => 81,
  "int64" => 82,
  "uint8" => 83,
  "unsigned" => 84,
  "uint16" => 85,
  "uint32" => 86,
  "uint64" => 87,
  "char" => 88,
  "wchar" => 89,
  "boolean" => 90,
  "octet" => 91,
  "any" => 92,
  "Object" => 93,
  "switch" => 94,
  "case" => 95,
  "default" => 96,
  "string" => 97,
  "wstring" => 98,
  "[" => 99,
  "]" => 100,
  "readonly" => 101,
  "attribute" => 102,
  "oneway" => 103,
  "void" => 104,
  "out" => 105,
  "inout" => 106,
  "raises" => 107,
  "getraises" => 108,
  "setraises" => 109,
  "context" => 110,
  "fixed" => 111,
  "ValueBase" => 112 }

racc_nt_base = 113

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\"module\"",
  "identifier",
  "\"<\"",
  "\">\"",
  "\",\"",
  "\"typename\"",
  "\"interface\"",
  "\"valuetype\"",
  "\"eventtype\"",
  "\"struct\"",
  "\"union\"",
  "\"exception\"",
  "\"enum\"",
  "\"sequence\"",
  "\"const\"",
  "\"alias\"",
  "\"local\"",
  "\"abstract\"",
  "\"pseudo\"",
  "\":\"",
  "\"home\"",
  "\"supports\"",
  "\"manages\"",
  "\"primarykey\"",
  "\"porttype\"",
  "\"component\"",
  "\"connector\"",
  "\"provides\"",
  "\"uses\"",
  "\"multiple\"",
  "\"publishes\"",
  "\"emits\"",
  "\"consumes\"",
  "\"port\"",
  "\"mirrorport\"",
  "\"::\"",
  "\"custom\"",
  "\"truncatable\"",
  "\"public\"",
  "\"private\"",
  "\"factory\"",
  "\"(\"",
  "\")\"",
  "\"finder\"",
  "\"in\"",
  "\"typeprefix\"",
  "string_literal",
  "\"typeid\"",
  "\"=\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\">>\"",
  "\"<<\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "integer_literal",
  "wide_string_literal",
  "character_literal",
  "wide_character_literal",
  "fixed_pt_literal",
  "floating_pt_literal",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"typedef\"",
  "\"native\"",
  "\"float\"",
  "\"double\"",
  "\"long\"",
  "\"int8\"",
  "\"short\"",
  "\"int16\"",
  "\"int32\"",
  "\"int64\"",
  "\"uint8\"",
  "\"unsigned\"",
  "\"uint16\"",
  "\"uint32\"",
  "\"uint64\"",
  "\"char\"",
  "\"wchar\"",
  "\"boolean\"",
  "\"octet\"",
  "\"any\"",
  "\"Object\"",
  "\"switch\"",
  "\"case\"",
  "\"default\"",
  "\"string\"",
  "\"wstring\"",
  "\"[\"",
  "\"]\"",
  "\"readonly\"",
  "\"attribute\"",
  "\"oneway\"",
  "\"void\"",
  "\"out\"",
  "\"inout\"",
  "\"raises\"",
  "\"getraises\"",
  "\"setraises\"",
  "\"context\"",
  "\"fixed\"",
  "\"ValueBase\"",
  "$start",
  "specification",
  "definition",
  "type_dcl",
  "const_dcl",
  "except_dcl",
  "interface",
  "porttype",
  "component",
  "connector",
  "home",
  "module",
  "template_module",
  "template_module_inst",
  "value",
  "event",
  "typeid",
  "typeprefix",
  "module_header",
  "_definition_1",
  "template_module_header",
  "template_module_parameters",
  "template_module_body",
  "scoped_name_0",
  "template_module_parameter",
  "const_type",
  "sequence_type",
  "template_module_definition",
  "fixed_module",
  "template_module_reference",
  "fixed_module_body",
  "fixed_module_definition",
  "template_module_inst_parameters",
  "template_module_inst_parameter",
  "simple_type_spec",
  "const_exp",
  "scoped_name",
  "_scoped_name_list",
  "interface_dcl",
  "forward_dcl",
  "local_interface_",
  "abstract_interface_",
  "regular_interface_",
  "interface_header",
  "interface_body",
  "pseudo_interface_header",
  "interface_inheritance_spec",
  "pseudo_interface_",
  "export",
  "attr_dcl",
  "op_dcl",
  "_interface_name_list",
  "interface_name",
  "home_header",
  "home_body",
  "home_inheritance_spec",
  "home_supports_spec",
  "home_primarykey_spec",
  "home_export",
  "init_dcl",
  "finder_dcl",
  "porttype_header",
  "porttype_body",
  "porttype_export",
  "provides_dcl",
  "uses_dcl",
  "component_dcl",
  "component_forward_dcl",
  "component_header",
  "component_body",
  "component_inheritance_spec",
  "component_supports_spec",
  "component_export",
  "emits_dcl",
  "publishes_dcl",
  "consumes_dcl",
  "port_dcl",
  "connector_header",
  "connector_body",
  "connector_export",
  "interface_type",
  "object_type",
  "event_dcl",
  "event_forward_dcl",
  "eventtype_header",
  "value_body",
  "value_inheritance_spec",
  "value_dcl",
  "value_box_dcl",
  "value_forward_dcl",
  "type_spec",
  "valuetype_header",
  "value_element",
  "value_basevalue_list",
  "value_interface_support_list",
  "_value_name_list",
  "value_name",
  "state_member",
  "declarators",
  "init_param_decls",
  "raises_expr",
  "init_param_decl",
  "init_param_attribute",
  "param_type_spec",
  "simple_declarator",
  "integer_type",
  "char_type",
  "wide_char_type",
  "boolean_type",
  "floating_pt_type",
  "string_type",
  "wide_string_type",
  "fixed_pt_const_type",
  "octet_type",
  "or_expr",
  "xor_expr",
  "and_expr",
  "shift_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "unary_operator",
  "primary_expr",
  "literal",
  "boolean_literal",
  "positive_int_const",
  "type_declarator",
  "struct_type",
  "struct_forward_dcl",
  "union_type",
  "union_forward_dcl",
  "enum_type",
  "native_declarator",
  "constr_type_spec",
  "base_type_spec",
  "template_type_spec",
  "any_type",
  "value_base_type",
  "fixed_pt_type",
  "declarator",
  "complex_declarator",
  "array_declarator",
  "signed_int",
  "unsigned_int",
  "signed_short_int",
  "signed_long_int",
  "signed_longlong_int",
  "tiny_short_int",
  "unsigned_short_int",
  "unsigned_long_int",
  "unsigned_longlong_int",
  "unsigned_tiny_short_int",
  "struct_def",
  "struct_header",
  "member_list",
  "member",
  "union_def",
  "union_header",
  "union_body",
  "union_dcl",
  "union_switch_spec",
  "switch_type_spec",
  "union_case",
  "_case_label_1",
  "element_spec",
  "case_label",
  "_enum_header",
  "_enum_body",
  "_enumerator_list",
  "enumerator",
  "_fixed_array_size_1",
  "fixed_array_size",
  "readonly_attr_declarator",
  "attr_raises_expr",
  "attr_declarator_list",
  "attr_both_raises_expr1",
  "attr_both_raises_expr2",
  "attr_get_raises_expr",
  "attr_set_raises_expr",
  "attr_no_raises_expr",
  "get_raises_expr",
  "set_raises_expr",
  "_simple_declarator_list",
  "_except_header",
  "_except_body",
  "_member_list0",
  "_op_dcl_header",
  "_op_dcl_parameter",
  "_op_dcl_footer",
  "op_attribute",
  "op_type_spec",
  "parameter_dcls",
  "context_expr",
  "_param_dcl_list",
  "param_dcl",
  "param_attribute",
  "_string_literal_list" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_19(val, _values)
     @d.end_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 41)
  def _reduce_20(val, _values)
     @d.define_module(val[1])
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.ry', 47)
  def _reduce_23(val, _values)
     @d.end_template_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_24(val, _values)
     @d.register_template_module_name(val[1])
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_27(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Any.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_28(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Interface.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 60)
  def _reduce_29(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Valuetype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 62)
  def _reduce_30(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Eventtype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_31(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Struct.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 66)
  def _reduce_32(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Union.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 68)
  def _reduce_33(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Exception.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_34(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Enum.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 72)
  def _reduce_35(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Sequence.new(IDL::Type::Void.new, nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 74)
  def _reduce_36(val, _values)
     @d.define_template_parameter(val[2], IDL::Type::Const.new(val[1]))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 76)
  def _reduce_37(val, _values)
     @d.define_template_parameter(val[1], val[0])
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.ry', 97)
  def _reduce_54(val, _values)
     @d.end_module(val[0])
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.ry', 117)
  def _reduce_70(val, _values)
     @d.instantiate_template_module(val[4], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 120)
  def _reduce_71(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 122)
  def _reduce_72(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 125)
  def _reduce_73(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 127)
  def _reduce_74(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 130)
  def _reduce_75(val, _values)
     @d.declare_template_reference(val[5], val[1], val[3])
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.ry', 137)
  def _reduce_78(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 139)
  def _reduce_79(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 141)
  def _reduce_80(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 144)
  def _reduce_81(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 146)
  def _reduce_82(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 149)
  def _reduce_83(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 151)
  def _reduce_84(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 153)
  def _reduce_85(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 155)
  def _reduce_86(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 157)
  def _reduce_87(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 159)
  def _reduce_88(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 161)
  def _reduce_89(val, _values)
     :local
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 163)
  def _reduce_90(val, _values)
     :abstract
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 166)
  def _reduce_91(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 168)
  def _reduce_92(val, _values)
     :pseudo
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 170)
  def _reduce_93(val, _values)
     :none
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.ry', 184)
  def _reduce_104(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 185)
  def _reduce_105(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 187)
  def _reduce_106(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.ry', 192)
  def _reduce_108(val, _values)
     @d.end_home(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 195)
  def _reduce_109(val, _values)
     @d.define_home(val[1], val[3], val[7], val[9], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 197)
  def _reduce_110(val, _values)
     @d.define_home(val[1], val[3], val[7], nil, val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 199)
  def _reduce_111(val, _values)
     @d.define_home(val[1], val[3], val[5], val[7], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 201)
  def _reduce_112(val, _values)
     @d.define_home(val[1], nil, val[5], val[7], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 203)
  def _reduce_113(val, _values)
     @d.define_home(val[1], nil, val[5], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 205)
  def _reduce_114(val, _values)
     @d.define_home(val[1], val[3], val[5], nil, nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 207)
  def _reduce_115(val, _values)
     @d.define_home(val[1], nil, val[3], val[5], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 209)
  def _reduce_116(val, _values)
     @d.define_home(val[1], nil, val[3], nil, nil)
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.ry', 225)
  def _reduce_125(val, _values)
     @d.end_porttype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 228)
  def _reduce_126(val, _values)
     @d.define_porttype(val[1])
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.ry', 241)
  def _reduce_134(val, _values)
     @d.declare_component(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 244)
  def _reduce_135(val, _values)
     @d.end_component(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 247)
  def _reduce_136(val, _values)
     @d.define_component(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 249)
  def _reduce_137(val, _values)
     @d.define_component(val[1], val[3], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 251)
  def _reduce_138(val, _values)
     @d.define_component(val[1], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 253)
  def _reduce_139(val, _values)
     @d.define_component(val[1], nil, nil)
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.ry', 272)
  def _reduce_152(val, _values)
     @d.end_connector(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 275)
  def _reduce_153(val, _values)
     @d.define_connector(val[1], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 277)
  def _reduce_154(val, _values)
     @d.define_connector(val[1], nil)
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.ry', 289)
  def _reduce_162(val, _values)
     @d.declare_port(val[2], :facet, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 292)
  def _reduce_163(val, _values)
     @d.declare_port(val[3], :receptacle, val[2], true)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 294)
  def _reduce_164(val, _values)
     @d.declare_port(val[2], :receptacle, val[1], false)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 297)
  def _reduce_165(val, _values)
     @d.declare_port(val[2], :publisher, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 300)
  def _reduce_166(val, _values)
     @d.declare_port(val[2], :emitter, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 303)
  def _reduce_167(val, _values)
     @d.declare_port(val[2], :consumer, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 306)
  def _reduce_168(val, _values)
     @d.declare_port(val[2], :port, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 308)
  def _reduce_169(val, _values)
     @d.declare_port(val[2], :mirrorport, val[1])
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.ry', 313)
  def _reduce_172(val, _values)
     @d.parse_scopedname(*val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 315)
  def _reduce_173(val, _values)
     [false, [val[0]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 316)
  def _reduce_174(val, _values)
     [true,  [val[1]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 318)
  def _reduce_175(val, _values)
     val[0][1] << val[2]; val[0]
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'parser.ry', 324)
  def _reduce_178(val, _values)
     @d.declare_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 326)
  def _reduce_179(val, _values)
     @d.declare_eventtype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 329)
  def _reduce_180(val, _values)
     @d.end_eventtype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 332)
  def _reduce_181(val, _values)
     @d.define_eventtype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 334)
  def _reduce_182(val, _values)
     @d.define_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 336)
  def _reduce_183(val, _values)
     @d.define_eventtype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 338)
  def _reduce_184(val, _values)
     @d.define_eventtype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 340)
  def _reduce_185(val, _values)
     @d.define_eventtype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 342)
  def _reduce_186(val, _values)
     @d.define_eventtype(val[1], :none)
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.ry', 349)
  def _reduce_190(val, _values)
     @d.declare_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 351)
  def _reduce_191(val, _values)
     @d.declare_valuetype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 354)
  def _reduce_192(val, _values)
     @d.define_valuebox(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 357)
  def _reduce_193(val, _values)
     @d.end_valuetype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 360)
  def _reduce_194(val, _values)
     @d.define_valuetype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 362)
  def _reduce_195(val, _values)
     @d.define_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 364)
  def _reduce_196(val, _values)
     @d.define_valuetype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 366)
  def _reduce_197(val, _values)
     @d.define_valuetype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 368)
  def _reduce_198(val, _values)
     @d.define_valuetype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 370)
  def _reduce_199(val, _values)
     @d.define_valuetype(val[1], :none)
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'parser.ry', 376)
  def _reduce_202(val, _values)
     Hash[ :base => val[0], :supports => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 378)
  def _reduce_203(val, _values)
     Hash[ :base => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 380)
  def _reduce_204(val, _values)
     Hash[ :supports => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 383)
  def _reduce_205(val, _values)
     Hash[ :truncatable => true, :list => val[2] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 385)
  def _reduce_206(val, _values)
     Hash[ :truncatable => false, :list => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 388)
  def _reduce_207(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 390)
  def _reduce_208(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 391)
  def _reduce_209(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.ry', 401)
  def _reduce_214(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], true) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 406)
  def _reduce_215(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], false) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 411)
  def _reduce_216(val, _values)
      @d.declare_initializer(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 413)
  def _reduce_217(val, _values)
      @d.declare_initializer(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 415)
  def _reduce_218(val, _values)
      @d.declare_initializer(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 417)
  def _reduce_219(val, _values)
      @d.declare_initializer(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 420)
  def _reduce_220(val, _values)
      @d.declare_finder(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 422)
  def _reduce_221(val, _values)
      @d.declare_finder(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 424)
  def _reduce_222(val, _values)
      @d.declare_finder(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 426)
  def _reduce_223(val, _values)
      @d.declare_finder(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 428)
  def _reduce_224(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 429)
  def _reduce_225(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 432)
  def _reduce_226(val, _values)
     [val[1], val[2]]
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.ry', 437)
  def _reduce_228(val, _values)
     @d.define_typeprefix(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 440)
  def _reduce_229(val, _values)
     @d.define_typeid(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 443)
  def _reduce_230(val, _values)
     @d.define_const(val[1], val[2], val[4])
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'parser.ry', 460)
  def _reduce_243(val, _values)
     Expression::Operation::Or.new(val[0], val[2])
  end
.,.,

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.ry', 464)
  def _reduce_245(val, _values)
     Expression::Operation::Xor.new(val[0], val[2])
  end
.,.,

# reduce 246 omitted

module_eval(<<'.,.,', 'parser.ry', 468)
  def _reduce_247(val, _values)
     Expression::Operation::And.new(val[0], val[2])
  end
.,.,

# reduce 248 omitted

module_eval(<<'.,.,', 'parser.ry', 472)
  def _reduce_249(val, _values)
     Expression::Operation::RShift.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 474)
  def _reduce_250(val, _values)
     Expression::Operation::LShift.new(val[0], val[2])
  end
.,.,

# reduce 251 omitted

module_eval(<<'.,.,', 'parser.ry', 478)
  def _reduce_252(val, _values)
     Expression::Operation::Add.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 480)
  def _reduce_253(val, _values)
     Expression::Operation::Minus.new(val[0], val[2])
  end
.,.,

# reduce 254 omitted

module_eval(<<'.,.,', 'parser.ry', 484)
  def _reduce_255(val, _values)
     Expression::Operation::Mult.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 486)
  def _reduce_256(val, _values)
     Expression::Operation::Div.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 488)
  def _reduce_257(val, _values)
     Expression::Operation::Mod.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 490)
  def _reduce_258(val, _values)
     val[0].new(val[1])
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'parser.ry', 493)
  def _reduce_260(val, _values)
     Expression::Operation::UnaryMinus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 494)
  def _reduce_261(val, _values)
     Expression::Operation::UnaryPlus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 495)
  def _reduce_262(val, _values)
     Expression::Operation::UnaryNot
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'parser.ry', 500)
  def _reduce_265(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 502)
  def _reduce_266(val, _values)
     @d.parse_literal(:integer, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 503)
  def _reduce_267(val, _values)
     @d.parse_literal(:string,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 504)
  def _reduce_268(val, _values)
     @d.parse_literal(:wstring, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 505)
  def _reduce_269(val, _values)
     @d.parse_literal(:char,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 506)
  def _reduce_270(val, _values)
     @d.parse_literal(:wchar,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 507)
  def _reduce_271(val, _values)
     @d.parse_literal(:fixed,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 508)
  def _reduce_272(val, _values)
     @d.parse_literal(:float,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 509)
  def _reduce_273(val, _values)
     @d.parse_literal(:boolean, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 511)
  def _reduce_274(val, _values)
     true
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 512)
  def _reduce_275(val, _values)
     false
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 514)
  def _reduce_276(val, _values)
     @d.parse_positive_int(val[0])
  end
.,.,

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'parser.ry', 526)
  def _reduce_284(val, _values)
                          dcls = parse_type_declarator(val[0], val[1])
                      dcls.each do |d|
                        @d.declare_typedef(d[0], d[1])
                      end

  end
.,.,

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

module_eval(<<'.,.,', 'parser.ry', 558)
  def _reduce_306(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 559)
  def _reduce_307(val, _values)
     val[0] << val[2]
  end
.,.,

# reduce 308 omitted

# reduce 309 omitted

module_eval(<<'.,.,', 'parser.ry', 564)
  def _reduce_310(val, _values)
     @d.declare_typedef(::IDL::Type::Native.new, val[0])
  end
.,.,

# reduce 311 omitted

# reduce 312 omitted

module_eval(<<'.,.,', 'parser.ry', 570)
  def _reduce_313(val, _values)
     ::IDL::Type::Float.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 571)
  def _reduce_314(val, _values)
     ::IDL::Type::Double.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 572)
  def _reduce_315(val, _values)
     ::IDL::Type::LongDouble.new
  end
.,.,

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

module_eval(<<'.,.,', 'parser.ry', 582)
  def _reduce_322(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::TinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 584)
  def _reduce_323(val, _values)
     ::IDL::Type::Short.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 585)
  def _reduce_324(val, _values)
     if @idlversion < 4 then raise "int16 is only supported with IDL4 or newer" else ::IDL::Type::Short.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 587)
  def _reduce_325(val, _values)
     ::IDL::Type::Long.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 588)
  def _reduce_326(val, _values)
     if @idlversion < 4 then raise "int32 is only supported with IDL4 or newer" else ::IDL::Type::Long.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 590)
  def _reduce_327(val, _values)
     ::IDL::Type::LongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 591)
  def _reduce_328(val, _values)
     if @idlversion < 4 then raise "int64 is only supported with IDL4 or newer" else ::IDL::Type::LongLong.new end
  end
.,.,

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

module_eval(<<'.,.,', 'parser.ry', 598)
  def _reduce_333(val, _values)
     if @idlversion < 4 then raise "uint8 is only supported with IDL4 or newer" else ::IDL::Type::UTinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 600)
  def _reduce_334(val, _values)
     ::IDL::Type::UShort.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 601)
  def _reduce_335(val, _values)
     if @idlversion < 4 then raise "uint16 is only supported with IDL4 or newer" else ::IDL::Type::UShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 603)
  def _reduce_336(val, _values)
     ::IDL::Type::ULong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 604)
  def _reduce_337(val, _values)
     if @idlversion < 4 then raise "uint32 is only supported with IDL4 or newer" else ::IDL::Type::ULong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 606)
  def _reduce_338(val, _values)
     ::IDL::Type::ULongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 607)
  def _reduce_339(val, _values)
     if @idlversion < 4 then raise "uint64 is only supported with IDL4 or newer" else ::IDL::Type::ULongLong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 609)
  def _reduce_340(val, _values)
     ::IDL::Type::Char.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 611)
  def _reduce_341(val, _values)
     ::IDL::Type::WChar.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 613)
  def _reduce_342(val, _values)
     ::IDL::Type::Boolean.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 615)
  def _reduce_343(val, _values)
     ::IDL::Type::Octet.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 617)
  def _reduce_344(val, _values)
     ::IDL::Type::Any.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 619)
  def _reduce_345(val, _values)
     ::IDL::Type::Object.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 621)
  def _reduce_346(val, _values)
     @d.declare_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 624)
  def _reduce_347(val, _values)
     @d.end_struct(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 626)
  def _reduce_348(val, _values)
     @d.define_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 628)
  def _reduce_349(val, _values)
     nil
  end
.,.,

# reduce 350 omitted

# reduce 351 omitted

module_eval(<<'.,.,', 'parser.ry', 636)
  def _reduce_352(val, _values)
                 dcls = parse_type_declarator(val[0], val[1])
             dcls.each do |d|
               @d.declare_member(d[0], d[1])
             end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 643)
  def _reduce_353(val, _values)
     @d.declare_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 646)
  def _reduce_354(val, _values)
     @d.end_union(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 649)
  def _reduce_355(val, _values)
     @d.define_union_switchtype(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 652)
  def _reduce_356(val, _values)
     @d.define_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 654)
  def _reduce_357(val, _values)
     nil
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 657)
  def _reduce_358(val, _values)
     val[2]
  end
.,.,

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

module_eval(<<'.,.,', 'parser.ry', 670)
  def _reduce_366(val, _values)
                     dcls = parse_type_declarator(val[1][0], [val[1][1]])
                 dcls.each do |d|
                   @d.define_case(val[0], d[0], d[1])
                 end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 676)
  def _reduce_367(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 677)
  def _reduce_368(val, _values)
     val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 679)
  def _reduce_369(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 680)
  def _reduce_370(val, _values)
     :default
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 683)
  def _reduce_371(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 686)
  def _reduce_372(val, _values)
     @d.end_enum(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 688)
  def _reduce_373(val, _values)
     @d.define_enum(val[1])
  end
.,.,

# reduce 374 omitted

# reduce 375 omitted

# reduce 376 omitted

module_eval(<<'.,.,', 'parser.ry', 696)
  def _reduce_377(val, _values)
                     @d.declare_enumerator(val[0])

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 700)
  def _reduce_378(val, _values)
     ::IDL::Type::Sequence.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 702)
  def _reduce_379(val, _values)
     ::IDL::Type::Sequence.new(val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 705)
  def _reduce_380(val, _values)
     ::IDL::Type::String.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 707)
  def _reduce_381(val, _values)
     ::IDL::Type::String.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 710)
  def _reduce_382(val, _values)
     ::IDL::Type::WString.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 712)
  def _reduce_383(val, _values)
     ::IDL::Type::WString.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 714)
  def _reduce_384(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 716)
  def _reduce_385(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 717)
  def _reduce_386(val, _values)
    val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 719)
  def _reduce_387(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 722)
  def _reduce_388(val, _values)
      dcls = parse_type_declarator(val[2], val[3][0])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1], true).get_raises = val[3][1]
                        end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 728)
  def _reduce_389(val, _values)
      att = @d.declare_attribute(val[1], val[2])
                        att.get_raises = val[3][0] unless val[3][0].empty?
                        att.set_raises = val[3][1] unless val[3][1].empty?

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 733)
  def _reduce_390(val, _values)
      dcls = parse_type_declarator(val[1], val[2])
                        dcls.each do |d|
                          att = @d.declare_attribute(d[0], d[1])
                        end

  end
.,.,

# reduce 391 omitted

# reduce 392 omitted

# reduce 393 omitted

# reduce 394 omitted

# reduce 395 omitted

module_eval(<<'.,.,', 'parser.ry', 745)
  def _reduce_396(val, _values)
     [val[0], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 747)
  def _reduce_397(val, _values)
     [val[1], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 749)
  def _reduce_398(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 751)
  def _reduce_399(val, _values)
     [[], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 753)
  def _reduce_400(val, _values)
     [[], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 756)
  def _reduce_401(val, _values)
     [val[0]].concat(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 759)
  def _reduce_402(val, _values)
      [[val[0]], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 760)
  def _reduce_403(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 762)
  def _reduce_404(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 763)
  def _reduce_405(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 766)
  def _reduce_406(val, _values)
     @d.end_exception(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 768)
  def _reduce_407(val, _values)
     @d.define_exception(val[1])
  end
.,.,

# reduce 408 omitted

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

module_eval(<<'.,.,', 'parser.ry', 777)
  def _reduce_412(val, _values)
     @d.declare_op_header(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 779)
  def _reduce_413(val, _values)
     @d.declare_op_header(nil, val[0], val[1])
  end
.,.,

# reduce 414 omitted

module_eval(<<'.,.,', 'parser.ry', 784)
  def _reduce_415(val, _values)
     @d.declare_op_footer(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 786)
  def _reduce_416(val, _values)
     @d.declare_op_footer(val[0], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 788)
  def _reduce_417(val, _values)
     @d.declare_op_footer(nil, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 790)
  def _reduce_418(val, _values)
     @d.declare_op_footer(nil,nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 792)
  def _reduce_419(val, _values)
     :oneway
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 794)
  def _reduce_420(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 795)
  def _reduce_421(val, _values)
     ::IDL::Type::Void.new
  end
.,.,

# reduce 422 omitted

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

module_eval(<<'.,.,', 'parser.ry', 804)
  def _reduce_426(val, _values)
     @d.declare_op_parameter(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 806)
  def _reduce_427(val, _values)
     :in
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 807)
  def _reduce_428(val, _values)
     :out
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 808)
  def _reduce_429(val, _values)
     :inout
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 810)
  def _reduce_430(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 812)
  def _reduce_431(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 814)
  def _reduce_432(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 816)
  def _reduce_433(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 817)
  def _reduce_434(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 819)
  def _reduce_435(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 821)
  def _reduce_436(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 822)
  def _reduce_437(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 824)
  def _reduce_438(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 825)
  def _reduce_439(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 826)
  def _reduce_440(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 827)
  def _reduce_441(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 831)
  def _reduce_442(val, _values)
     IDL::Type::Fixed.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 833)
  def _reduce_443(val, _values)
     ::IDL::Type::Fixed.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 835)
  def _reduce_444(val, _values)
     ::IDL::Type::ValueBase.new
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end #of module IDL
