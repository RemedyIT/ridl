#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

###### racc/parser.rb begin
unless $".find {|p| p.end_with?('/racc/parser.rb')}
$".push "#{__dir__}/racc/parser.rb"
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
# frozen_string_literal: false
#--
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#++

unless $".find {|p| p.end_with?('/racc/info.rb')}
$".push "#{__dir__}/racc/info.rb"
#--
#
#
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
# see the file "COPYING".
#
#++

module Racc
  VERSION   = '1.7.1'
  Version = VERSION
  Copyright = 'Copyright (c) 1999-2006 Minero Aoki'
end

end


unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError # :nodoc:
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--executable=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+grammarfile+]
#   Racc grammar file. Any extension is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammar file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is ruby license, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extensions)
    Racc_No_Extensions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Core_Version_R = ::Racc::VERSION

    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end

      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extensions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def do_parse
      #{Racc_Main_Parsing_Routine}(_racc_setup(), false)
    end
    RUBY

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def yyparse(recv, mid)
      #{Racc_YY_Parse_Method}(recv, mid, _racc_setup(), false)
    end
    RUBY

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is +Symbol_Value_Stack[0]+.
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end

require 'ridl/delegate'

module IDL

class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 860)

def parse_type_declarator(type_spec, declarators)
  ret = Array.new
  t = type_spec
  declarators.each do |d|
    case d
    when ::String, IDL::Scanner::Identifier
      ret << [t, d]
    when ::Array # array_declarator -> [identifier, size]
      ret << [IDL::Type::Array.new(t, d[1]), d[0]]
    else
      raise RuntimeError, "unknown declarator: #{d.inspect}"
    end
  end
  ret
end

#attr_accessor :default_namespace, :output
attr_accessor :yydebug
def initialize(params = {})
  @d = ::IDL::Delegator.new(params)
  @params = params
  @idlversion = params[:idlversion]
end

alias on_error0 on_error
def on_error(err_tok, err_val, _value)
  begin
    on_error0(err_tok, err_val, _value)
  rescue IDL::ParseError
    raise
  rescue
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
end

def parse(src)
  @scanner = Scanner.new(src, self, @params)
  @d.pre_parse
  begin
    do_parse
  rescue IDL::ParseError
    raise
  rescue
    STDERR.puts "#{$!}\n#{$!.backtrace.join("\n")}" if IDL.verbose_level>0
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
  @d.post_parse
end

def visit_nodes(walker)
  @d.visit_nodes(walker)
end

def pragma_prefix(s)
  @d.pragma_prefix(s)
end

def pragma_version(id, major, minor)
  @d.pragma_version(id, major, minor)
end

def pragma_id(id, repo_id)
  @d.pragma_id(id, repo_id)
end

def handle_pragma(s)
  @d.handle_pragma(s)
end

def is_included?(s)
  @d.is_included?(s)
end

def enter_include(s, fp)
  @d.enter_include(s, fp)
end

def leave_include()
  @d.leave_include
end

def declare_include(s)
  @d.declare_include(s)
end

def define_annotation(*args)
  @d.define_annotation(*args)
end

def next_token
  ret = @scanner.next_token
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
  -199,   645,   701,   125,   638,   701,   561,  -139,   732,   562,
   -84,    66,    70,   451,    74,   198,   465,   516,   734,    95,
   125,   337,   600,   338,   125,   125,    79,   125,   311,   506,
   312,   267,   357,   732,   356,   125,   337,    97,   338,   644,
   700,   309,   310,   704,   309,   310,   731,   322,   323,   324,
   325,   326,    80,    97,    97,   422,   733,   125,    97,    97,
   563,    97,   567,   459,   479,    66,    70,    76,    74,    97,
    55,   759,   139,   140,   141,   148,   149,   150,   151,   152,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   194,
   195,    97,   309,   310,    72,   199,   166,   167,   325,   326,
   337,    53,   338,    54,    81,   639,   640,   195,   378,   379,
   200,   201,   279,   280,   195,   279,   280,   309,   310,    82,
   568,   569,   195,   732,    56,    62,   139,   140,   141,   148,
   149,   150,   151,   152,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   194,   195,    83,   309,   310,    72,   567,
   166,   167,   325,   326,   279,   280,   284,   286,   440,   125,
   125,   760,   125,   279,   280,   201,   125,   125,    66,    70,
    76,    74,   647,    55,   651,   125,   125,   125,   309,   310,
    84,   322,   323,   324,   325,   326,   125,   125,   279,   280,
   125,   -86,   125,    97,    97,   487,    97,    85,   -88,   299,
    97,    97,   300,   652,    53,   651,    54,   568,   569,    97,
    97,    97,   267,   301,   125,   302,   303,   279,   280,   267,
    97,    97,   125,    86,    97,    74,    97,    56,    62,   139,
   140,   141,   148,   149,   150,   151,   152,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   194,   195,    97,   279,
   280,    72,    87,   166,   167,    88,    97,   279,   280,   284,
   286,   492,   530,   125,    89,   125,    90,   531,   201,   125,
   125,    66,    70,    76,    74,    91,    55,   125,   125,   125,
   125,   125,   125,   125,   125,   523,   148,   149,   150,   151,
   152,   157,   158,   159,   160,   161,   162,    97,   164,    97,
   344,   345,   299,    97,    97,  -186,  -182,    53,    92,    54,
    93,    97,    97,    97,    97,    97,    97,    97,    97,   125,
    94,   125,   121,   120,   125,   125,   337,   337,   338,   338,
    56,    62,   139,   140,   141,   148,   149,   150,   151,   152,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   194,
   195,   354,   355,    97,    72,    97,   166,   167,    97,    97,
   279,   280,   284,   286,   500,   255,   125,   125,   125,    98,
   257,   201,   125,   125,    66,    70,    76,    74,   532,    55,
   125,   125,    99,   533,   256,   258,   259,   260,   261,   262,
   264,   265,   105,   107,   106,   100,  -195,   413,   414,   415,
    97,    97,    97,   344,   345,   299,    97,    97,   378,   379,
    53,   101,    54,   102,    97,    97,   103,   337,   513,   338,
   125,   413,   414,   415,   413,   414,   415,   104,    66,    70,
   108,    74,   198,    56,    62,   139,   140,   141,   148,   149,
   150,   151,   152,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   194,   195,    97,   391,   392,    72,   109,   166,
   167,   401,   368,   279,   280,   284,   286,   404,   405,   409,
   410,   411,   412,   534,   201,   125,   573,   574,   597,   596,
   409,   410,   110,    66,    70,   111,    74,   198,   112,   139,
   140,   141,   148,   149,   150,   151,   152,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   194,   195,   113,    97,
   114,    72,   199,   166,   167,   226,   227,   228,   229,   230,
   231,   232,   233,   234,   235,   411,   412,   200,   201,   125,
   115,   125,   411,   412,   710,   709,   116,    66,    70,   117,
    74,   198,   765,   732,   139,   140,   141,   148,   149,   150,
   151,   152,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   194,   195,    97,   118,    97,    72,   199,   166,   167,
   119,   255,   122,   123,   203,   204,   257,   205,   206,   207,
   209,   211,   200,   201,   251,   250,   212,   214,   215,   252,
   256,   258,   259,   260,   261,   262,   264,   265,   139,   140,
   141,   148,   149,   150,   151,   152,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   194,   195,   217,   218,   219,
    72,   199,   166,   167,   -20,   222,   223,   291,   292,   293,
   333,   346,   347,   222,   125,   351,   200,   201,   226,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   352,   353,
   358,   359,   364,   366,   367,   368,   369,   370,  -351,  -359,
   380,   383,   386,   390,   393,   394,   395,   396,    97,   397,
   398,   399,   400,   403,   255,   406,   407,   408,   424,   257,
   425,   426,   427,   428,   429,   430,   431,   251,   250,   435,
   437,   442,   252,   256,   258,   259,   260,   261,   262,   264,
   265,   443,   444,   139,   140,   141,   148,   149,   150,   151,
   152,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   194,   195,   125,   445,   453,   454,   455,   166,   167,   467,
    66,    70,    76,    74,   468,    55,   469,   470,   471,   472,
   473,   200,   201,   481,   482,   483,   484,   338,   494,   495,
   501,   502,   506,   509,   364,   522,    97,   536,   539,   540,
   552,   553,   555,   570,   571,   572,    53,   553,    54,   575,
   576,   577,   579,   580,   553,   581,   582,   583,   584,   585,
   587,   553,   364,   364,   591,   592,   364,   509,   598,    56,
    62,   139,   140,   141,   148,   149,   150,   151,   152,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   194,   195,
   599,   601,   364,    72,   125,   166,   167,   603,   125,   279,
   280,   284,   286,   355,   604,   383,    66,    70,    76,    74,
   201,    55,   386,   403,   407,   408,   555,   562,   642,   643,
   659,   587,   506,   506,   662,   666,   669,   670,    97,   671,
   672,   673,    97,   674,   255,   675,   676,   299,   677,   257,
   300,   678,    53,   679,    54,   680,   681,   251,   250,   682,
   683,   561,   252,   256,   258,   259,   260,   261,   262,   264,
   265,   686,   640,   639,   555,    56,    62,   139,   140,   141,
   148,   149,   150,   151,   152,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   194,   195,   691,   692,   696,    72,
   125,   166,   167,   555,   125,   279,   280,   284,   286,   561,
   561,   705,    66,    70,    76,    74,   201,    55,   706,   707,
   708,   711,   727,   555,   686,   561,   651,   555,   561,   745,
   746,   747,   748,   749,    97,   750,   751,   752,    97,   753,
   255,   344,   345,   299,   754,   257,   755,   756,    53,   757,
    54,   762,   763,   251,   250,   764,   767,   nil,   252,   256,
   258,   259,   260,   261,   262,   264,   265,   nil,   nil,   nil,
   nil,    56,    62,   139,   140,   141,   148,   149,   150,   151,
   152,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   194,   195,   nil,   nil,   nil,    72,   nil,   166,   167,   nil,
   125,   279,   280,   284,   286,   nil,   nil,   nil,    66,    70,
    76,    74,   201,    55,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    97,   nil,   nil,   344,   345,   299,
   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,    70,   nil,    74,   198,    56,    62,   139,
   140,   141,   148,   149,   150,   151,   152,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   194,   195,    97,   nil,
   nil,    72,   nil,   166,   167,   nil,   nil,   279,   280,   284,
   286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   125,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   139,   140,   141,   148,   149,   150,   151,
   152,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   194,   195,   nil,    97,   nil,    72,   199,   166,   167,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   200,   201,   125,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   139,   140,
   141,   148,   149,   150,   151,   152,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   194,   195,    97,   nil,   nil,
   nil,   nil,   166,   167,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   125,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    66,    70,   nil,    74,
   198,   nil,   139,   140,   141,   148,   149,   150,   151,   152,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   194,
   195,   nil,    97,   nil,   nil,   nil,   166,   167,   nil,   nil,
   nil,   nil,   nil,   286,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   201,   125,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    66,    70,   nil,    74,   198,   nil,   nil,   139,   140,   141,
   148,   149,   150,   151,   152,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   194,   195,    97,   nil,   nil,    72,
   199,   166,   167,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   200,   201,   125,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,
   nil,   139,   140,   141,   148,   149,   150,   151,   152,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   194,   195,
   nil,    97,   nil,    72,   199,   166,   167,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,
   201,   125,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   198,   nil,   nil,   139,   140,   141,   148,
   149,   150,   151,   152,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   194,   195,    97,   nil,   nil,   nil,   nil,
   166,   167,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   200,   201,   125,   125,   nil,   nil,
   nil,   nil,   nil,   nil,    66,    70,   nil,    74,   198,   nil,
   139,   140,   141,   148,   149,   150,   151,   152,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   194,   195,   nil,
    97,    97,   nil,   nil,   166,   167,   nil,   255,   nil,   nil,
   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   200,   201,
   251,   250,   nil,   nil,   nil,   252,   256,   258,   259,   260,
   261,   262,   264,   265,   nil,   139,   140,   141,   148,   149,
   150,   151,   152,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   194,   195,   125,   378,   379,    72,   199,   166,
   167,   nil,   nil,   nil,   nil,   nil,   198,   nil,   nil,   nil,
   nil,   nil,   nil,   200,   201,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    97,   nil,
   nil,   nil,   nil,   nil,   255,   nil,   nil,   nil,   nil,   257,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   251,   250,   125,
   nil,   125,   252,   256,   258,   259,   260,   261,   262,   264,
   265,   nil,   nil,   139,   140,   141,   148,   149,   150,   151,
   152,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   194,   195,   nil,    97,   nil,    97,   nil,   166,   167,   nil,
   nil,   255,   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,
   nil,   200,   201,   125,   251,   250,   nil,   nil,   nil,   252,
   256,   258,   259,   260,   261,   262,   264,   265,   139,   140,
   141,   148,   149,   150,   151,   152,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   194,   195,    97,   nil,   nil,
   nil,   nil,   166,   167,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   125,   nil,
   125,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   139,   140,   141,   148,   149,   150,   151,   152,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   194,
   195,   nil,    97,   nil,    97,   nil,   166,   167,   nil,   nil,
   255,   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,
   nil,   201,   125,   251,   250,   nil,   nil,   nil,   252,   256,
   258,   259,   260,   261,   262,   264,   265,   139,   140,   141,
   148,   149,   150,   151,   152,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   194,   195,    97,   nil,   nil,   nil,
   nil,   166,   167,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   200,   201,   125,   125,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   139,   140,   141,   148,   149,   150,   151,   152,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   194,   195,
   nil,    97,    97,   nil,   nil,   166,   167,   nil,   255,   nil,
   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   125,
   201,   251,   250,   nil,   nil,   nil,   252,   256,   258,   259,
   260,   261,   262,   264,   265,   nil,   139,   140,   141,   148,
   149,   150,   151,   152,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    97,   nil,   nil,   nil,   nil,   nil,   nil,
   166,   167,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   168,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   139,   140,
   141,   148,   149,   150,   151,   152,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   nil,    77,   nil,   nil,   nil,
   nil,    19,   166,   167,   nil,   nil,   nil,    32,    51,    45,
    66,    70,    76,    74,   nil,    55,   168,    28,    29,    31,
   nil,    34,   nil,   nil,   nil,    36,    39,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   125,   nil,   nil,   nil,   388,    19,   nil,   nil,   nil,    56,
    62,    32,    51,    45,    66,    70,    76,    74,   nil,    55,
   nil,    28,    29,    31,   nil,    34,   nil,   nil,   nil,    36,
    39,    42,   nil,    72,    97,   nil,   nil,   nil,   nil,   nil,
   255,    47,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,
    53,   nil,    54,   251,   250,   nil,   nil,   nil,   252,   256,
   258,   259,   260,   261,   262,   264,   265,   nil,   667,   607,
   nil,   nil,   nil,    56,    62,    32,    51,    45,    66,    70,
    76,    74,   nil,    55,   625,    28,    29,    31,   nil,    34,
   nil,   nil,   nil,    36,    39,    42,   nil,    72,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   743,   607,   nil,   nil,   nil,    56,    62,    32,
    51,    45,    66,    70,    76,    74,   nil,    55,   nil,    28,
    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,    42,
   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,    53,    19,
    54,   nil,   nil,   nil,   nil,    32,    51,    45,    66,    70,
    76,    74,   nil,    55,   nil,    28,    29,    31,   nil,    34,
   nil,    56,    62,    36,    39,    42,   nil,   nil,    97,   nil,
   nil,   nil,   nil,   nil,   255,    47,   nil,   nil,   nil,   257,
   nil,   nil,   nil,   nil,    53,    72,    54,   251,   250,   nil,
   nil,   nil,   252,   256,   258,   259,   260,   261,   262,   264,
   265,   nil,   nil,    19,   nil,   nil,   nil,    56,    62,    32,
    51,    45,    66,    70,    76,    74,   nil,    55,   nil,    28,
    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,    42,
   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,    53,   607,
    54,   nil,   nil,   nil,   nil,    32,    51,    45,    66,    70,
    76,    74,   nil,    55,   625,    28,    29,    31,   nil,    34,
   nil,    56,    62,    36,    39,    42,   nil,   nil,    97,   nil,
   nil,   nil,   nil,   nil,   255,    47,   nil,   nil,   nil,   257,
   nil,   nil,   nil,   nil,    53,    72,    54,   251,   250,   nil,
   nil,   nil,   252,   256,   258,   259,   260,   261,   262,   264,
   265,   125,   nil,   607,   nil,   nil,   nil,    56,    62,    32,
    51,    45,    66,    70,    76,    74,   nil,    55,   nil,    28,
    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,    42,
   nil,    72,   nil,   nil,   nil,    97,   nil,   nil,   nil,    47,
   125,   255,   nil,   nil,   nil,   nil,   257,   nil,    53,   nil,
    54,   nil,   nil,   nil,   251,   250,   nil,   nil,   nil,   252,
   256,   258,   259,   260,   261,   262,   264,   265,   nil,   nil,
   nil,    56,    62,   125,    97,   nil,   nil,   nil,   nil,   nil,
   255,   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   251,   250,    72,   nil,   nil,   252,   256,
   258,   259,   260,   261,   262,   264,   265,    97,   125,   nil,
   nil,   nil,   nil,   255,   nil,   nil,   nil,   nil,   257,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   251,   250,   nil,   nil,
   nil,   252,   256,   258,   259,   260,   261,   262,   264,   265,
   nil,   125,    97,   nil,   nil,   nil,   nil,   nil,   255,   nil,
   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   251,   250,   nil,   nil,   nil,   252,   256,   258,   259,
   260,   261,   262,   264,   265,    97,   125,   nil,   nil,   nil,
   nil,   255,   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   251,   250,   nil,   nil,   nil,   252,
   256,   258,   259,   260,   261,   262,   264,   265,   nil,   125,
    97,   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,   nil,
   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   251,
   250,   nil,   nil,   nil,   252,   256,   258,   259,   260,   261,
   262,   264,   265,    97,   125,   nil,   nil,   nil,   nil,   255,
   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   251,   250,   nil,   nil,   nil,   252,   256,   258,
   259,   260,   261,   262,   264,   265,   nil,   125,    97,   nil,
   nil,   nil,   nil,   nil,   255,   nil,   nil,   nil,   nil,   257,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   251,   250,   nil,
   nil,   nil,   252,   256,   258,   259,   260,   261,   262,   264,
   265,    97,   125,   nil,   nil,   nil,   nil,   255,   nil,   nil,
   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   251,   250,   nil,   nil,   nil,   252,   256,   258,   259,   260,
   261,   262,   264,   265,   nil,   nil,    97,   nil,   nil,   nil,
   nil,   nil,   255,   nil,   nil,   nil,   nil,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   251,   250,   nil,   nil,   nil,
   252,   256,   258,   259,   260,   261,   262,   264,   265 ]

racc_action_check = [
   122,   564,   648,   122,   556,   653,   433,   114,   693,   433,
    99,   122,   122,   304,   122,   122,   313,   374,   695,    19,
   309,   122,   515,   122,    53,    54,     3,   459,   114,   515,
   114,    99,   158,   729,   158,   310,   346,   122,   346,   564,
   648,   304,   304,   653,   313,   313,   693,   313,   313,   313,
   313,   313,     4,    19,   309,   270,   695,   270,    53,    54,
   435,   459,   435,   310,   327,   270,   270,   270,   270,   310,
   270,   729,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   270,   327,   327,   122,   122,   122,   122,   327,   327,
   347,   270,   347,   270,     5,   556,   556,   309,   374,   374,
   122,   122,   304,   304,   459,   313,   313,   112,   112,     6,
   435,   435,   310,   730,   270,   270,   270,   270,   270,   270,
   270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
   270,   270,   270,   270,   270,     7,   116,   116,   270,   645,
   270,   270,   116,   116,   270,   270,   270,   270,   294,   337,
   294,   730,   267,   327,   327,   270,   301,   302,   294,   294,
   294,   294,   571,   294,   571,   303,   311,   312,   115,   115,
     8,   115,   115,   115,   115,   115,   322,   323,   112,   112,
   324,   100,   325,   337,   294,   337,   267,     9,   101,   294,
   301,   302,   294,   572,   294,   572,   294,   645,   645,   303,
   311,   312,   100,   111,   380,   111,   111,   116,   116,   101,
   322,   323,   326,    10,   324,   380,   325,   294,   294,   294,
   294,   294,   294,   294,   294,   294,   294,   294,   294,   294,
   294,   294,   294,   294,   294,   294,   294,   294,   380,   115,
   115,   294,    11,   294,   294,    12,   326,   294,   294,   294,
   294,   339,   381,   339,    13,   333,    14,   381,   294,   338,
   487,   339,   339,   339,   339,    15,   339,   553,   573,   574,
   575,   576,   580,   587,   625,   380,   380,   380,   380,   380,
   380,   380,   380,   380,   380,   380,   380,   339,   380,   333,
   339,   339,   339,   338,   487,   118,   292,   339,    16,   339,
    17,   553,   573,   574,   575,   576,   580,   587,   625,   642,
    18,   691,    47,    47,   692,   248,   118,   292,   118,   292,
   339,   339,   339,   339,   339,   339,   339,   339,   339,   339,
   339,   339,   339,   339,   339,   339,   339,   339,   339,   339,
   339,   141,   141,   642,   339,   691,   339,   339,   692,   248,
   339,   339,   339,   339,   350,   248,   350,   705,   706,    20,
   248,   339,   707,   727,   350,   350,   350,   350,   384,   350,
   732,   763,    23,   384,   248,   248,   248,   248,   248,   248,
   248,   248,    29,    29,    29,    24,   293,   246,   246,   246,
   350,   705,   706,   350,   350,   350,   707,   727,   207,   207,
   350,    25,   350,    26,   732,   763,    27,   293,   371,   293,
   371,   547,   547,   547,   548,   548,   548,    28,   371,   371,
    30,   371,   371,   350,   350,   350,   350,   350,   350,   350,
   350,   350,   350,   350,   350,   350,   350,   350,   350,   350,
   350,   350,   350,   350,   371,   224,   224,   350,    31,   350,
   350,   234,   234,   350,   350,   350,   350,   237,   237,   244,
   244,   245,   245,   387,   350,   387,   446,   446,   510,   510,
   544,   544,    33,   387,   387,    34,   387,   387,    35,   371,
   371,   371,   371,   371,   371,   371,   371,   371,   371,   371,
   371,   371,   371,   371,   371,   371,   371,   371,    36,   387,
    39,   371,   371,   371,   371,   392,   392,   392,   392,   392,
   392,   392,   392,   392,   392,   545,   545,   371,   371,    56,
    40,   255,   546,   546,   664,   664,    41,    56,    56,    42,
    56,    56,   758,   758,   387,   387,   387,   387,   387,   387,
   387,   387,   387,   387,   387,   387,   387,   387,   387,   387,
   387,   387,   387,    56,    45,   255,   387,   387,   387,   387,
    46,   255,    51,    52,    62,    64,   255,    65,    67,    68,
    69,    71,   387,   387,   255,   255,    72,    73,    74,   255,
   255,   255,   255,   255,   255,   255,   255,   255,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    75,    76,    77,
    56,    56,    56,    56,    95,    96,    97,   103,   106,   107,
   117,   120,   121,   124,    98,   126,    56,    56,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,   127,   128,
   166,   167,   170,   196,   197,   198,   199,   200,   204,   206,
   209,   211,   214,   222,   226,   227,   228,   229,    98,   230,
   231,   232,   233,   236,    98,   241,   242,   243,   272,    98,
   273,   274,   275,   276,   277,   278,   279,    98,    98,   281,
   283,   297,    98,    98,    98,    98,    98,    98,    98,    98,
    98,   298,   299,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,   102,   300,   306,   307,   308,    98,    98,   315,
   102,   102,   102,   102,   316,   102,   317,   318,   319,   320,
   321,    98,    98,   329,   330,   331,   332,   335,   342,   343,
   353,   357,   360,   364,   373,   379,   102,   391,   402,   404,
   418,   419,   432,   436,   444,   445,   102,   448,   102,   449,
   450,   456,   460,   461,   463,   474,   475,   476,   477,   478,
   488,   491,   496,   497,   504,   505,   506,   507,   511,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   512,   518,   520,   102,   358,   102,   102,   521,   110,   102,
   102,   102,   102,   523,   524,   531,   110,   110,   110,   110,
   102,   110,   533,   538,   542,   543,   554,   559,   561,   562,
   578,   586,   588,   589,   595,   607,   610,   611,   358,   612,
   613,   614,   110,   615,   358,   616,   617,   110,   618,   358,
   110,   619,   110,   620,   110,   621,   622,   358,   358,   623,
   624,   628,   358,   358,   358,   358,   358,   358,   358,   358,
   358,   629,   636,   637,   638,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   639,   640,   643,   110,
   359,   110,   110,   646,   119,   110,   110,   110,   110,   647,
   652,   654,   119,   119,   119,   119,   110,   119,   655,   656,
   663,   665,   684,   686,   689,   700,   701,   702,   704,   714,
   715,   716,   717,   718,   359,   719,   720,   721,   119,   722,
   359,   119,   119,   119,   723,   359,   724,   725,   119,   726,
   119,   734,   739,   359,   359,   742,   765,   nil,   359,   359,
   359,   359,   359,   359,   359,   359,   359,   nil,   nil,   nil,
   nil,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   nil,   nil,   nil,   119,   nil,   119,   119,   nil,
   123,   119,   119,   119,   119,   nil,   nil,   nil,   123,   123,
   123,   123,   119,   123,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   123,   nil,   nil,   123,   123,   123,
   nil,   nil,   nil,   nil,   123,   nil,   123,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   205,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   205,   205,   nil,   205,   205,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   205,   nil,
   nil,   123,   nil,   123,   123,   nil,   nil,   123,   123,   123,
   123,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   123,   280,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   nil,   280,   nil,   205,   205,   205,   205,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   205,   205,   282,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   280,   280,
   280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
   280,   280,   280,   280,   280,   280,   280,   282,   nil,   nil,
   nil,   nil,   280,   280,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   280,   344,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   344,   344,   nil,   344,
   344,   nil,   282,   282,   282,   282,   282,   282,   282,   282,
   282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
   282,   nil,   344,   nil,   nil,   nil,   282,   282,   nil,   nil,
   nil,   nil,   nil,   282,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   282,   345,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   345,   345,   nil,   345,   345,   nil,   nil,   344,   344,   344,
   344,   344,   344,   344,   344,   344,   344,   344,   344,   344,
   344,   344,   344,   344,   344,   344,   345,   nil,   nil,   344,
   344,   344,   344,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   344,   344,   368,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   368,
   nil,   345,   345,   345,   345,   345,   345,   345,   345,   345,
   345,   345,   345,   345,   345,   345,   345,   345,   345,   345,
   nil,   368,   nil,   345,   345,   345,   345,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   345,
   345,   369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   369,   nil,   nil,   368,   368,   368,   368,
   368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   368,   368,   368,   368,   369,   nil,   nil,   nil,   nil,
   368,   368,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   368,   368,   376,   370,   nil,   nil,
   nil,   nil,   nil,   nil,   376,   376,   nil,   376,   376,   nil,
   369,   369,   369,   369,   369,   369,   369,   369,   369,   369,
   369,   369,   369,   369,   369,   369,   369,   369,   369,   nil,
   376,   370,   nil,   nil,   369,   369,   nil,   370,   nil,   nil,
   nil,   nil,   370,   nil,   nil,   nil,   nil,   nil,   369,   369,
   370,   370,   nil,   nil,   nil,   370,   370,   370,   370,   370,
   370,   370,   370,   370,   nil,   376,   376,   376,   376,   376,
   376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
   376,   376,   376,   376,   405,   376,   376,   376,   376,   376,
   376,   nil,   nil,   nil,   nil,   nil,   405,   nil,   nil,   nil,
   nil,   nil,   nil,   376,   376,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   405,   nil,
   nil,   nil,   nil,   nil,   405,   nil,   nil,   nil,   nil,   405,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   405,   405,   431,
   nil,   378,   405,   405,   405,   405,   405,   405,   405,   405,
   405,   nil,   nil,   405,   405,   405,   405,   405,   405,   405,
   405,   405,   405,   405,   405,   405,   405,   405,   405,   405,
   405,   405,   nil,   431,   nil,   378,   nil,   405,   405,   nil,
   nil,   378,   nil,   nil,   nil,   nil,   378,   nil,   nil,   nil,
   nil,   405,   405,   566,   378,   378,   nil,   nil,   nil,   378,
   378,   378,   378,   378,   378,   378,   378,   378,   431,   431,
   431,   431,   431,   431,   431,   431,   431,   431,   431,   431,
   431,   431,   431,   431,   431,   431,   431,   566,   nil,   nil,
   nil,   nil,   431,   431,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   431,   598,   nil,
   406,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   598,   nil,   566,   566,   566,   566,   566,   566,   566,   566,
   566,   566,   566,   566,   566,   566,   566,   566,   566,   566,
   566,   nil,   598,   nil,   406,   nil,   566,   566,   nil,   nil,
   406,   nil,   nil,   nil,   nil,   406,   nil,   nil,   nil,   nil,
   nil,   566,   650,   406,   406,   nil,   nil,   nil,   406,   406,
   406,   406,   406,   406,   406,   406,   406,   598,   598,   598,
   598,   598,   598,   598,   598,   598,   598,   598,   598,   598,
   598,   598,   598,   598,   598,   598,   650,   nil,   nil,   nil,
   nil,   598,   598,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   598,   598,    55,   407,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   650,   650,   650,   650,   650,   650,   650,   650,   650,
   650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
   nil,    55,   407,   nil,   nil,   650,   650,   nil,   407,   nil,
   nil,   nil,   nil,   407,   nil,   nil,   nil,   nil,   nil,   235,
   650,   407,   407,   nil,   nil,   nil,   407,   407,   407,   407,
   407,   407,   407,   407,   407,   nil,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,   235,   nil,   nil,   nil,   nil,   nil,   nil,
    55,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   235,   235,
   235,   235,   235,   235,   235,   235,   235,   235,   235,   235,
   235,   235,   235,   235,   235,   nil,     1,   nil,   nil,   nil,
   nil,     1,   235,   235,   nil,   nil,   nil,     1,     1,     1,
     1,     1,     1,     1,   nil,     1,   235,     1,     1,     1,
   nil,     1,   nil,   nil,   nil,     1,     1,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   408,   nil,   nil,   nil,   220,   220,   nil,   nil,   nil,     1,
     1,   220,   220,   220,   220,   220,   220,   220,   nil,   220,
   nil,   220,   220,   220,   nil,   220,   nil,   nil,   nil,   220,
   220,   220,   nil,     1,   408,   nil,   nil,   nil,   nil,   nil,
   408,   220,   nil,   nil,   nil,   408,   nil,   nil,   nil,   nil,
   220,   nil,   220,   408,   408,   nil,   nil,   nil,   408,   408,
   408,   408,   408,   408,   408,   408,   408,   nil,   608,   608,
   nil,   nil,   nil,   220,   220,   608,   608,   608,   608,   608,
   608,   608,   nil,   608,   608,   608,   608,   608,   nil,   608,
   nil,   nil,   nil,   608,   608,   608,   nil,   220,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   608,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   608,   nil,   608,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   712,   712,   nil,   nil,   nil,   608,   608,   712,
   712,   712,   712,   712,   712,   712,   nil,   712,   nil,   712,
   712,   712,   nil,   712,   nil,   nil,   nil,   712,   712,   712,
   nil,   608,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   712,
   nil,   nil,   nil,   nil,   409,   nil,   nil,   nil,   712,     0,
   712,   nil,   nil,   nil,   nil,     0,     0,     0,     0,     0,
     0,     0,   nil,     0,   nil,     0,     0,     0,   nil,     0,
   nil,   712,   712,     0,     0,     0,   nil,   nil,   409,   nil,
   nil,   nil,   nil,   nil,   409,     0,   nil,   nil,   nil,   409,
   nil,   nil,   nil,   nil,     0,   712,     0,   409,   409,   nil,
   nil,   nil,   409,   409,   409,   409,   409,   409,   409,   409,
   409,   nil,   nil,    94,   nil,   nil,   nil,     0,     0,    94,
    94,    94,    94,    94,    94,    94,   nil,    94,   nil,    94,
    94,    94,   nil,    94,   nil,   nil,   nil,    94,    94,    94,
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,
   nil,   nil,   nil,   nil,   410,   nil,   nil,   nil,    94,   536,
    94,   nil,   nil,   nil,   nil,   536,   536,   536,   536,   536,
   536,   536,   nil,   536,   536,   536,   536,   536,   nil,   536,
   nil,    94,    94,   536,   536,   536,   nil,   nil,   410,   nil,
   nil,   nil,   nil,   nil,   410,   536,   nil,   nil,   nil,   410,
   nil,   nil,   nil,   nil,   536,    94,   536,   410,   410,   nil,
   nil,   nil,   410,   410,   410,   410,   410,   410,   410,   410,
   410,   411,   nil,   683,   nil,   nil,   nil,   536,   536,   683,
   683,   683,   683,   683,   683,   683,   nil,   683,   nil,   683,
   683,   683,   nil,   683,   nil,   nil,   nil,   683,   683,   683,
   nil,   536,   nil,   nil,   nil,   411,   nil,   nil,   nil,   683,
   412,   411,   nil,   nil,   nil,   nil,   411,   nil,   683,   nil,
   683,   nil,   nil,   nil,   411,   411,   nil,   nil,   nil,   411,
   411,   411,   411,   411,   411,   411,   411,   411,   nil,   nil,
   nil,   683,   683,   413,   412,   nil,   nil,   nil,   nil,   nil,
   412,   nil,   nil,   nil,   nil,   412,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   412,   412,   683,   nil,   nil,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   413,   414,   nil,
   nil,   nil,   nil,   413,   nil,   nil,   nil,   nil,   413,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   413,   413,   nil,   nil,
   nil,   413,   413,   413,   413,   413,   413,   413,   413,   413,
   nil,   415,   414,   nil,   nil,   nil,   nil,   nil,   414,   nil,
   nil,   nil,   nil,   414,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   414,   414,   nil,   nil,   nil,   414,   414,   414,   414,
   414,   414,   414,   414,   414,   415,   501,   nil,   nil,   nil,
   nil,   415,   nil,   nil,   nil,   nil,   415,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   415,   415,   nil,   nil,   nil,   415,
   415,   415,   415,   415,   415,   415,   415,   415,   nil,   509,
   501,   nil,   nil,   nil,   nil,   nil,   501,   nil,   nil,   nil,
   nil,   501,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   501,
   501,   nil,   nil,   nil,   501,   501,   501,   501,   501,   501,
   501,   501,   501,   509,   596,   nil,   nil,   nil,   nil,   509,
   nil,   nil,   nil,   nil,   509,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   509,   509,   nil,   nil,   nil,   509,   509,   509,
   509,   509,   509,   509,   509,   509,   nil,   599,   596,   nil,
   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,   nil,   596,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   596,   596,   nil,
   nil,   nil,   596,   596,   596,   596,   596,   596,   596,   596,
   596,   599,   709,   nil,   nil,   nil,   nil,   599,   nil,   nil,
   nil,   nil,   599,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   599,   599,   nil,   nil,   nil,   599,   599,   599,   599,   599,
   599,   599,   599,   599,   nil,   nil,   709,   nil,   nil,   nil,
   nil,   nil,   709,   nil,   nil,   nil,   nil,   709,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   709,   709,   nil,   nil,   nil,
   709,   709,   709,   709,   709,   709,   709,   709,   709 ]

racc_action_pointer = [
  2184,  1946,   nil,    24,    50,   102,   117,   143,   178,   195,
   221,   250,   253,   262,   264,   273,   306,   308,   317,    13,
   362,   nil,   nil,   376,   389,   405,   410,   413,   416,   381,
   424,   447,   nil,   479,   479,   485,   502,   nil,   nil,   504,
   527,   533,   533,   nil,   nil,   558,   567,   310,   nil,   nil,
   nil,   566,   570,    18,    19,  1801,   523,   nil,   nil,   nil,
   nil,   nil,   568,   nil,   569,   574,   nil,   572,   576,   486,
   nil,   578,   580,   584,   582,   614,   612,   619,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  2248,   621,   585,   620,   628,     7,
   188,   195,   716,   623,   nil,   nil,   622,   623,   nil,   nil,
   812,   189,    85,   nil,     4,   146,   114,   606,   302,   908,
   625,   626,    -3,  1004,   593,   nil,   584,   597,   643,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   275,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   643,   644,   nil,   nil,
   646,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   647,   648,   648,   649,
   650,   nil,   nil,   nil,   655,  1058,   565,   313,   nil,   614,
   nil,   655,   nil,   nil,   656,   nil,   nil,   nil,   nil,   nil,
  2010,   nil,   657,   nil,   447,   nil,   658,   659,   660,   661,
   663,   664,   665,   666,   455,  1853,   667,   459,   nil,   nil,
   nil,   621,   621,   621,   412,   412,   336,   nil,   319,   nil,
   nil,   nil,   nil,   nil,   nil,   525,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   156,   nil,   nil,
    51,   nil,   676,   678,   679,   680,   681,   682,   683,   582,
  1113,   643,  1167,   684,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   303,   393,   154,   nil,   nil,   689,   699,   696,
   717,   160,   161,   169,     9,   nil,   722,   723,   724,    14,
    29,   170,   171,    12,   nil,   727,   732,   734,   735,   736,
   737,   738,   180,   181,   184,   186,   216,    60,   nil,   741,
   742,   743,   744,   259,   nil,   721,   nil,   153,   263,   257,
   nil,   nil,   746,   747,  1222,  1276,    12,    76,   nil,   nil,
   360,   nil,   nil,   697,   nil,   nil,   nil,   674,   808,   904,
   743,   nil,   nil,   nil,   652,   nil,   nil,   nil,  1331,  1385,
  1441,   414,   nil,   748,    13,   nil,  1440,   nil,  1585,   731,
   208,   258,   nil,   nil,   374,   nil,   nil,   469,   nil,   nil,
   nil,   754,   505,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   752,   nil,   753,  1528,  1694,  1802,  2004,  2178,
  2288,  2355,  2394,  2427,  2462,  2495,   nil,   nil,   713,   752,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1583,   756,  -103,   nil,    13,   757,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   718,   719,   450,   nil,   758,   742,
   742,   nil,   nil,   nil,   nil,   nil,   765,   nil,   nil,    21,
   766,   747,   nil,   765,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   769,   770,   771,   772,   773,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   264,   771,   nil,
   nil,   772,   nil,   nil,   nil,   nil,   776,   777,   nil,   nil,
   nil,  2530,   nil,   nil,   776,   777,   780,   686,   nil,  2563,
   470,   779,   801,   nil,   nil,    20,   nil,   nil,   809,   nil,
   806,   793,   nil,   746,   777,   nil,   nil,   nil,   nil,   nil,
   nil,   819,   nil,   826,   nil,   nil,  2294,   nil,   827,   nil,
   nil,   nil,   779,   779,   423,   466,   473,   360,   363,   nil,
   nil,   nil,   nil,   271,   830,   nil,    -5,   nil,   nil,   725,
   nil,   792,   793,   nil,    -8,   nil,  1637,   nil,   nil,   nil,
   nil,   125,   156,   272,   273,   274,   275,   nil,   834,   nil,
   276,   nil,   nil,   nil,   nil,   nil,   832,   277,   833,   834,
   nil,   nil,   nil,   nil,   nil,   742,  2598,   nil,  1692,  2631,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   839,  2074,   nil,
   844,   845,   847,   848,   849,   851,   853,   854,   856,   859,
   861,   863,   864,   867,   867,   278,   nil,   nil,   762,   872,
   nil,   nil,   nil,   nil,   nil,   nil,   771,   773,   878,   860,
   861,   nil,   313,   857,   nil,   100,   907,   810,    -7,   nil,
  1746,   nil,   811,    -4,   894,   900,   901,   nil,   nil,   nil,
   nil,   nil,   nil,   922,   526,   923,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  2358,   925,   nil,   927,   nil,   nil,   925,
   nil,   315,   318,    -1,   nil,     9,   nil,   nil,   nil,   nil,
   826,   887,   931,   nil,   829,   361,   362,   366,   nil,  2666,
   nil,   nil,  2138,   nil,   937,   938,   939,   940,   941,   943,
   944,   945,   947,   952,   954,   955,   957,   367,   nil,    24,
   114,   nil,   374,   nil,   910,   nil,   nil,   nil,   nil,   934,
   nil,   nil,   957,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   534,   nil,
   nil,   nil,   nil,   375,   nil,   960,   nil,   nil ]

racc_action_default = [
   -18,  -456,    -1,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
  -456,   -76,   -77,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
  -456,  -456,   -93,  -456,  -456,  -456,  -456,  -132,  -133,  -456,
  -456,  -456,  -456,  -176,  -177,  -456,  -456,  -456,  -187,  -188,
  -189,  -456,  -456,  -456,  -456,  -456,  -456,  -278,  -279,  -280,
  -281,  -282,  -456,  -284,  -456,  -456,  -352,  -456,  -456,  -456,
  -360,  -456,  -456,  -456,  -456,  -456,  -456,  -456,    -2,    -3,
    -4,    -5,    -6,    -7,    -8,    -9,   -10,   -11,   -12,   -13,
   -14,   -15,   -16,   -17,   -18,  -173,   -24,  -456,  -456,   -78,
   -79,   -80,  -103,  -456,   -89,   -90,  -456,  -456,   -91,   -92,
  -103,  -456,  -456,  -126,  -134,  -151,  -161,  -154,  -179,  -103,
  -456,  -456,  -191,  -103,  -172,  -173,  -456,  -456,  -456,  -231,
  -232,  -233,  -234,  -235,  -236,  -237,  -238,  -239,  -240,  -316,
  -317,  -328,  -319,  -320,  -321,  -322,  -323,  -324,  -325,  -326,
  -327,  -329,  -331,  -332,  -333,  -334,  -335,  -336,  -456,  -338,
  -340,  -342,  -343,  -344,  -345,  -346,  -392,  -394,  -454,  -277,
  -456,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,  -294,
  -295,  -296,  -297,  -298,  -299,  -300,  -301,  -302,  -303,  -304,
  -305,  -306,  -307,  -308,  -347,  -348,  -456,  -456,  -456,  -456,
  -456,  -455,  -283,  -313,  -349,  -456,  -356,  -456,  -358,  -456,
  -375,  -456,  -376,  -381,  -456,  -382,  -417,  -420,  -418,   768,
  -456,   -21,  -456,  -174,  -456,   -25,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -456,  -456,  -300,  -456,   -71,   -73,
   -74,  -241,  -242,  -244,  -246,  -248,  -251,  -254,  -456,  -259,
  -260,  -261,  -262,  -263,  -264,  -456,  -266,  -267,  -268,  -269,
  -270,  -271,  -272,  -273,  -274,  -275,   -83,  -456,   -85,   -87,
  -456,   -94,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -430,  -431,  -432,  -449,  -450,  -451,
  -452,   -82,  -178,  -190,  -456,  -120,  -122,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -456,  -127,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -142,  -456,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -155,  -456,
  -456,  -456,  -456,  -456,  -185,  -203,  -204,  -456,  -456,  -456,
  -200,  -211,  -456,  -456,  -456,  -456,  -184,  -197,  -192,  -198,
  -456,  -228,  -229,  -456,  -318,  -330,  -337,  -339,  -456,  -456,
  -285,  -309,  -311,  -312,  -314,  -315,  -351,  -359,  -456,  -456,
  -456,  -456,  -353,  -456,  -456,  -367,  -456,  -370,  -456,  -456,
  -456,  -456,  -378,  -380,  -456,  -384,  -386,  -456,   -19,   -22,
  -175,  -456,  -456,   -27,   -28,   -29,   -30,   -31,   -32,   -33,
   -34,   -35,  -456,   -37,  -456,  -456,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -456,  -456,  -258,  -263,  -456,  -104,
  -105,  -107,   -81,   -95,   -96,   -97,   -98,   -99,  -100,  -101,
  -102,  -456,  -456,  -429,  -425,  -456,  -456,  -424,  -181,  -194,
  -108,  -121,  -123,  -124,  -456,  -456,  -456,  -117,  -118,  -456,
  -116,  -125,  -128,  -129,  -130,  -131,  -456,  -170,  -171,  -456,
  -456,  -137,  -140,  -141,  -138,  -135,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -456,  -456,  -456,  -456,  -456,  -152,
  -156,  -157,  -158,  -159,  -160,  -153,  -202,  -456,  -206,  -208,
  -210,  -207,  -180,  -201,  -212,  -213,  -456,  -456,  -183,  -196,
  -193,  -456,  -341,  -276,  -456,  -456,  -456,  -395,  -396,  -456,
  -456,  -456,  -456,  -350,  -354,  -456,  -357,  -368,  -456,  -371,
  -456,  -456,  -373,  -328,  -456,  -362,  -363,  -364,  -365,  -366,
  -377,  -456,  -383,  -456,  -419,  -421,  -456,   -26,  -456,   -36,
   -70,   -72,  -243,  -245,  -247,  -249,  -250,  -252,  -253,  -255,
  -256,  -257,  -265,  -456,  -456,  -314,  -411,  -401,  -422,  -427,
  -428,  -456,  -456,  -433,  -456,  -435,  -456,  -438,  -439,  -440,
  -423,  -456,  -456,  -456,  -456,  -456,  -456,  -162,  -456,  -164,
  -456,  -165,  -166,  -167,  -168,  -169,  -205,  -456,  -214,  -215,
  -230,  -391,  -393,  -310,  -397,  -456,  -456,  -388,  -456,  -456,
  -355,  -369,  -374,  -372,  -361,  -379,  -385,  -456,  -456,   -38,
  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -456,  -456,  -106,  -399,  -415,  -414,
  -400,  -402,  -403,  -404,  -405,  -406,  -409,  -410,  -456,  -456,
  -456,  -426,  -456,  -456,  -434,  -456,  -456,  -216,  -456,  -224,
  -456,  -227,  -220,  -456,  -456,  -114,  -113,  -115,  -119,  -163,
  -136,  -209,  -398,  -456,  -456,  -456,   -20,   -23,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,
   -51,   -52,   -53,  -456,  -456,  -413,  -456,  -407,  -408,  -412,
  -415,  -456,  -456,  -456,  -444,  -456,  -447,  -436,  -437,  -218,
  -217,  -456,  -456,  -222,  -221,  -456,  -456,  -456,  -387,  -456,
  -390,  -453,  -456,   -55,  -456,  -456,  -456,  -456,  -456,  -456,
  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -416,  -456,
  -456,  -441,  -456,  -446,  -456,  -219,  -225,  -226,  -223,  -110,
  -111,  -112,  -456,   -54,   -56,   -57,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,  -456,  -442,
  -443,  -445,  -448,  -456,  -389,  -456,  -109,   -75 ]

racc_goto_table = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
   432,   240,   287,   382,   134,   239,   504,   505,   129,   130,
   287,   449,   464,   132,   556,   225,   236,   189,   512,   287,
   385,     2,    78,   287,   331,   305,   328,   135,   565,   314,
   190,   419,   191,   238,   315,   329,   316,   330,   193,   372,
   488,   375,   128,   657,   126,   127,   137,   175,   508,   334,
   560,   288,   636,   349,   170,   629,   360,   271,   637,   288,
   131,   295,   693,   456,   460,   296,   196,   297,   288,   609,
   722,   713,   288,   133,   289,   138,   463,   339,   648,   653,
   593,   350,   289,   189,     3,     1,     4,   197,     5,   253,
    16,   289,    17,   290,   602,   289,   190,   493,   191,   722,
   744,   290,   491,   220,   193,   224,   458,   458,   493,   608,
   290,   729,   730,   175,   290,   221,   266,   268,   269,    96,
   348,   549,   550,   551,   545,   546,   547,   548,   712,   237,
   270,   626,   196,   688,   294,   446,   628,   304,   687,   689,
   313,   668,   461,   327,   486,   661,   736,   758,   542,   543,
   544,   554,   416,   197,   559,   169,   202,   595,   418,   371,
   374,   208,   524,   518,   519,   210,   189,   381,   213,   384,
   287,   507,   627,   740,   741,   630,   641,   557,   631,   190,
   287,   191,   287,   632,   134,   633,   634,   193,   129,   130,
   586,   594,   635,   132,   287,   216,   175,   308,   387,   433,
   321,   332,   558,   436,   434,   514,   564,   135,   517,   695,
     3,   nil,     4,   578,     5,   196,    16,   452,    17,   288,
   690,   535,   402,   438,   439,   423,   137,   466,   698,   288,
   766,   288,   315,   nil,   316,   331,   197,   480,   697,   287,
   131,   389,   289,   288,   663,   441,   329,   665,   330,   296,
   287,   297,   289,   133,   289,   138,   458,   nil,   421,   515,
   nil,   290,   nil,   nil,   nil,   nil,   289,   nil,   728,   nil,
   nil,   290,   nil,   290,   nil,   510,   511,   498,   499,   613,
   660,   521,   654,   nil,   737,   290,   646,   nil,   288,   nil,
   nil,   nil,   447,   421,   450,   nil,   nil,   nil,   nil,   288,
   457,   457,   462,   421,   nil,   189,   189,   614,   240,   537,
   538,   289,   239,   474,   475,   476,   477,   478,   190,   190,
   191,   191,   289,   605,   485,   nil,   193,   193,   490,   421,
   290,   287,   189,   525,   526,   175,   175,   189,   527,   606,
   541,   290,   496,   497,   463,   190,   nil,   191,   189,   685,
   190,   613,   191,   193,   196,   196,   528,   742,   193,   175,
   175,   190,   175,   191,   615,   616,   617,   175,   699,   193,
   702,   529,   620,   703,   520,   197,   197,   621,   175,   614,
   288,   196,   588,   589,   624,   nil,   196,   nil,   nil,   308,
   nil,   nil,   nil,   nil,   nil,   nil,   253,   196,   321,   nil,
   nil,   nil,   197,   289,   590,   nil,   nil,   197,   nil,   nil,
   nil,   nil,   332,   nil,   nil,   nil,   nil,   nil,   197,   nil,
   nil,   735,   290,   nil,   nil,   738,   717,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   615,   616,   617,   nil,
   nil,   nil,   nil,   nil,   620,   nil,   nil,   nil,   nil,   621,
   457,   nil,   nil,   nil,   718,   717,   624,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   287,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   490,   nil,
   nil,   nil,   nil,   718,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   664,   nil,   nil,   nil,   nil,
   nil,   719,   720,   721,   nil,   288,   nil,   nil,   nil,   723,
   nil,   nil,   nil,   nil,   724,   nil,   610,   nil,   611,   nil,
   612,   624,   622,   nil,   623,   nil,   nil,   nil,   289,   nil,
   719,   720,   721,   nil,   421,   nil,   nil,   nil,   723,   nil,
   287,   nil,   nil,   724,   nil,   nil,   nil,   290,   nil,   nil,
   624,   nil,   nil,   nil,   421,   655,   656,   658,   nil,   nil,
   nil,   421,   nil,   nil,   nil,   nil,   nil,   nil,   490,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   175,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   610,   288,
   611,   nil,   612,   nil,   622,   nil,   623,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   684,   nil,   nil,   nil,
   nil,   nil,   289,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   694,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   290,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   714,   nil,   715,   nil,   716,   nil,   725,
   nil,   726,   694,   694,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   739,   658,   658,   nil,
   nil,   nil,   714,   nil,   715,   nil,   716,   nil,   725,   nil,
   726,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   694,   nil,
   nil,   nil,   nil,   761,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   658 ]

racc_goto_check = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
   103,    35,   135,   171,   110,    34,   125,   125,   105,   106,
   135,    56,    71,   108,   104,    24,    26,   127,   125,   135,
   175,     2,     2,   135,    76,    63,    79,   111,   200,    72,
   129,    51,   131,    33,    64,    64,    65,    65,   133,   157,
    95,   164,    25,    57,    36,    36,    36,    36,   177,    86,
   198,   110,   186,    86,    90,   188,    98,    48,   187,   110,
   107,    58,    37,    80,    80,    48,   154,    59,   110,    27,
    28,    31,   110,   109,   111,   113,    51,    85,    99,    99,
   141,    85,   111,   127,     3,     1,     4,   158,     5,    36,
    16,   111,    17,    36,   141,   111,   129,    92,   131,    28,
    31,    36,    51,    19,   133,    21,    81,    81,    92,    22,
    36,    37,    37,    36,    36,     2,    46,    46,    46,    23,
    90,   120,   120,   120,   118,   118,   119,   119,    30,    32,
    44,    52,   154,   186,    54,    55,   104,    62,   187,   188,
    69,    27,    70,    78,    94,    96,   101,    37,   115,   116,
   117,   103,   122,   158,   100,   126,   132,   125,    35,   156,
   160,   162,   163,   166,   167,   169,   127,   170,   173,   174,
   135,   176,   178,    57,    57,   179,   198,   180,   181,   129,
   135,   131,   135,   182,   110,   183,   184,   133,   105,   106,
    95,   177,   185,   108,   135,   190,    36,    49,   191,   193,
    49,    49,   194,   196,   197,   157,   199,   111,   164,   202,
     3,   nil,     4,    80,     5,   154,    16,    63,    17,   110,
   104,   157,    25,    86,    86,    48,    36,    72,   104,   110,
    57,   110,    64,   nil,    65,    76,   158,    79,   200,   135,
   107,     2,   111,   110,   125,    58,    64,   125,    65,    48,
   135,    59,   111,   109,   111,   113,    81,   nil,    36,    98,
   nil,    36,   nil,   nil,   nil,   nil,   111,   nil,   104,   nil,
   nil,    36,   nil,    36,   nil,    34,    34,    86,    86,     6,
    71,    35,    56,   nil,   104,    36,   103,   nil,   110,   nil,
   nil,   nil,    36,    36,    36,   nil,   nil,   nil,   nil,   110,
    36,    36,    36,    36,   nil,   127,   127,     7,    35,    24,
    26,   111,    34,    36,    36,    36,    36,    36,   129,   129,
   131,   131,   111,   171,    36,   nil,   133,   133,    36,    36,
    36,   135,   127,   105,   106,    36,    36,   127,   108,   175,
    33,    36,    90,    90,    51,   129,   nil,   131,   127,   100,
   129,     6,   131,   133,   154,   154,   131,   125,   133,    36,
    36,   129,    36,   131,     8,     9,    10,    36,   100,   133,
   103,    36,    14,   100,    90,   158,   158,    15,    36,     7,
   110,   154,    98,    98,    18,   nil,   154,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   154,    49,   nil,
   nil,   nil,   158,   111,    35,   nil,   nil,   158,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,   158,   nil,
   nil,   100,    36,   nil,   nil,   100,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     8,     9,    10,   nil,
   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,    15,
    36,   nil,   nil,   nil,     7,     6,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,
   nil,     8,     9,    10,   nil,   110,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,    15,   nil,     3,   nil,     4,   nil,
     5,    18,    16,   nil,    17,   nil,   nil,   nil,   111,   nil,
     8,     9,    10,   nil,    36,   nil,   nil,   nil,    14,   nil,
   135,   nil,   nil,    15,   nil,   nil,   nil,    36,   nil,   nil,
    18,   nil,   nil,   nil,    36,    36,    36,    36,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   110,
     4,   nil,     5,   nil,    16,   nil,    17,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,
   nil,   nil,   111,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,     4,   nil,     5,   nil,    16,
   nil,    17,    36,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,    36,    36,   nil,
   nil,   nil,     3,   nil,     4,   nil,     5,   nil,    16,   nil,
    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    36 ]

racc_goto_pointer = [
   nil,    95,    31,     0,     2,     4,  -247,  -219,  -162,  -161,
  -160,   nil,   nil,   nil,  -154,  -149,     6,     8,  -142,    19,
   nil,    17,  -417,   110,   -73,    -3,   -72,  -457,  -603,   nil,
  -545,  -602,    41,   -55,   -83,   -87,     1,  -570,   nil,   nil,
   nil,   nil,   nil,   nil,    38,   nil,    27,   nil,   -35,    95,
   nil,  -226,  -412,   nil,    34,  -156,  -281,  -523,   -39,   -33,
   nil,   nil,    35,   -77,   -71,   -69,   nil,   nil,   nil,    35,
  -159,  -290,   -76,   nil,   nil,   nil,   -82,   nil,    37,   -80,
  -236,  -193,   nil,   nil,   nil,   -32,   -59,   nil,   nil,   nil,
     8,   nil,  -232,   nil,  -181,  -287,  -432,   nil,  -104,  -483,
  -269,  -545,   nil,  -270,  -408,   -37,   -36,    15,   -32,    28,
   -41,   -18,   nil,    30,   nil,  -248,  -248,  -248,  -275,  -275,
  -282,   nil,   -86,   nil,   nil,  -342,   109,   -29,   nil,   -16,
   nil,   -14,   104,    -8,   nil,   -90,   nil,   nil,   nil,   nil,
   nil,  -416,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    20,   nil,   -36,  -156,    41,   nil,
   -37,   nil,   102,  -208,  -156,   nil,  -203,  -202,   nil,   104,
   -34,  -198,   nil,   105,   -35,  -184,  -183,  -306,  -372,  -371,
  -245,  -368,  -363,  -361,  -360,  -354,  -494,  -488,  -489,   nil,
   130,    -9,   nil,   -72,  -221,   nil,   -69,   -67,  -373,  -219,
  -397,   nil,  -424 ]

racc_goto_default = [
   nil,   nil,   nil,   272,   273,   274,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,   277,   278,    18,   nil,
    20,   nil,   nil,   124,   nil,   nil,   185,   nil,   618,   619,
   nil,   nil,   nil,   nil,   171,   503,   417,   nil,    21,    22,
    23,    24,    25,    26,   nil,    27,   nil,    30,   341,   275,
   276,   448,   420,    33,   nil,   nil,   nil,   nil,   nil,   343,
   298,    35,   nil,   nil,   306,   307,    37,    38,    40,   nil,
   nil,   nil,   nil,   317,   318,   319,   320,    41,   nil,   nil,
   nil,   183,    43,    44,    46,   nil,   nil,    48,    49,    50,
   373,    52,   340,   335,   336,   nil,   489,   342,   nil,   nil,
   nil,   649,   650,   285,   362,   177,   178,   179,   180,   176,
   186,   187,   136,   181,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   254,   263,   nil,   nil,    57,    58,    59,
    60,    61,   nil,    63,   172,   173,   174,   182,   184,   188,
   192,   361,   363,   365,   142,   143,   144,   145,   146,   147,
   153,   154,   155,   156,    64,    65,   nil,   nil,    67,    68,
   nil,    69,   nil,   nil,   nil,   376,   nil,   377,    71,   nil,
   nil,   nil,    73,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,
   nil,   nil,   281,   nil,   nil,   282,   283,   nil,   nil,   nil,
   nil,   566,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 116, :_reduce_none,
  2, 116, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  2, 117, :_reduce_none,
  0, 117, :_reduce_none,
  4, 126, :_reduce_19,
  2, 133, :_reduce_20,
  1, 134, :_reduce_none,
  2, 134, :_reduce_none,
  7, 127, :_reduce_23,
  2, 135, :_reduce_24,
  1, 136, :_reduce_none,
  3, 136, :_reduce_none,
  2, 139, :_reduce_27,
  2, 139, :_reduce_28,
  2, 139, :_reduce_29,
  2, 139, :_reduce_30,
  2, 139, :_reduce_31,
  2, 139, :_reduce_32,
  2, 139, :_reduce_33,
  2, 139, :_reduce_34,
  2, 139, :_reduce_35,
  3, 139, :_reduce_36,
  2, 139, :_reduce_37,
  1, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  4, 143, :_reduce_54,
  1, 145, :_reduce_none,
  2, 145, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  2, 146, :_reduce_none,
  5, 128, :_reduce_70,
  1, 147, :_reduce_71,
  3, 147, :_reduce_72,
  1, 148, :_reduce_73,
  1, 148, :_reduce_74,
  6, 144, :_reduce_75,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  2, 154, :_reduce_78,
  2, 154, :_reduce_79,
  2, 154, :_reduce_80,
  4, 153, :_reduce_81,
  3, 153, :_reduce_82,
  3, 158, :_reduce_83,
  2, 158, :_reduce_84,
  3, 158, :_reduce_85,
  2, 158, :_reduce_86,
  3, 158, :_reduce_87,
  2, 158, :_reduce_88,
  2, 155, :_reduce_89,
  2, 156, :_reduce_90,
  2, 160, :_reduce_91,
  2, 162, :_reduce_92,
  1, 157, :_reduce_93,
  1, 159, :_reduce_none,
  2, 159, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  0, 163, :_reduce_none,
  2, 161, :_reduce_104,
  1, 166, :_reduce_105,
  3, 166, :_reduce_106,
  1, 167, :_reduce_none,
  4, 125, :_reduce_108,
  10, 168, :_reduce_109,
  8, 168, :_reduce_110,
  8, 168, :_reduce_111,
  8, 168, :_reduce_112,
  6, 168, :_reduce_113,
  6, 168, :_reduce_114,
  6, 168, :_reduce_115,
  4, 168, :_reduce_116,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 172, :_reduce_none,
  1, 169, :_reduce_none,
  2, 169, :_reduce_none,
  1, 173, :_reduce_none,
  2, 173, :_reduce_none,
  2, 173, :_reduce_none,
  4, 122, :_reduce_125,
  2, 176, :_reduce_126,
  1, 177, :_reduce_none,
  2, 177, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  2, 182, :_reduce_134,
  4, 181, :_reduce_135,
  6, 183, :_reduce_136,
  4, 183, :_reduce_137,
  4, 183, :_reduce_138,
  2, 183, :_reduce_139,
  1, 185, :_reduce_none,
  1, 186, :_reduce_none,
  1, 184, :_reduce_none,
  2, 184, :_reduce_none,
  2, 187, :_reduce_none,
  2, 187, :_reduce_none,
  2, 187, :_reduce_none,
  2, 187, :_reduce_none,
  2, 187, :_reduce_none,
  2, 187, :_reduce_none,
  2, 187, :_reduce_none,
  0, 187, :_reduce_none,
  4, 124, :_reduce_152,
  4, 192, :_reduce_153,
  2, 192, :_reduce_154,
  1, 193, :_reduce_none,
  2, 193, :_reduce_none,
  2, 194, :_reduce_none,
  2, 194, :_reduce_none,
  2, 194, :_reduce_none,
  2, 194, :_reduce_none,
  0, 194, :_reduce_none,
  3, 179, :_reduce_162,
  4, 180, :_reduce_163,
  3, 180, :_reduce_164,
  3, 189, :_reduce_165,
  3, 188, :_reduce_166,
  3, 190, :_reduce_167,
  3, 191, :_reduce_168,
  3, 191, :_reduce_169,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 151, :_reduce_172,
  1, 138, :_reduce_173,
  2, 138, :_reduce_174,
  3, 138, :_reduce_175,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 198, :_reduce_178,
  2, 198, :_reduce_179,
  4, 197, :_reduce_180,
  4, 199, :_reduce_181,
  3, 199, :_reduce_182,
  4, 199, :_reduce_183,
  3, 199, :_reduce_184,
  3, 199, :_reduce_185,
  2, 199, :_reduce_186,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 204, :_reduce_190,
  2, 204, :_reduce_191,
  3, 203, :_reduce_192,
  4, 202, :_reduce_193,
  4, 206, :_reduce_194,
  3, 206, :_reduce_195,
  4, 206, :_reduce_196,
  3, 206, :_reduce_197,
  3, 206, :_reduce_198,
  2, 206, :_reduce_199,
  1, 200, :_reduce_none,
  2, 200, :_reduce_none,
  2, 201, :_reduce_202,
  1, 201, :_reduce_203,
  1, 201, :_reduce_204,
  3, 208, :_reduce_205,
  2, 208, :_reduce_206,
  2, 209, :_reduce_207,
  1, 210, :_reduce_208,
  3, 210, :_reduce_209,
  1, 211, :_reduce_none,
  1, 207, :_reduce_none,
  2, 207, :_reduce_none,
  2, 207, :_reduce_none,
  3, 212, :_reduce_214,
  3, 212, :_reduce_215,
  4, 174, :_reduce_216,
  5, 174, :_reduce_217,
  5, 174, :_reduce_218,
  6, 174, :_reduce_219,
  4, 175, :_reduce_220,
  5, 175, :_reduce_221,
  5, 175, :_reduce_222,
  6, 175, :_reduce_223,
  1, 214, :_reduce_224,
  3, 214, :_reduce_225,
  3, 216, :_reduce_226,
  1, 217, :_reduce_none,
  3, 132, :_reduce_228,
  3, 131, :_reduce_229,
  5, 119, :_reduce_230,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 150, :_reduce_none,
  1, 229, :_reduce_none,
  3, 229, :_reduce_243,
  1, 230, :_reduce_none,
  3, 230, :_reduce_245,
  1, 231, :_reduce_none,
  3, 231, :_reduce_247,
  1, 232, :_reduce_none,
  3, 232, :_reduce_249,
  3, 232, :_reduce_250,
  1, 233, :_reduce_none,
  3, 233, :_reduce_252,
  3, 233, :_reduce_253,
  1, 234, :_reduce_none,
  3, 234, :_reduce_255,
  3, 234, :_reduce_256,
  3, 234, :_reduce_257,
  2, 235, :_reduce_258,
  1, 235, :_reduce_none,
  1, 236, :_reduce_260,
  1, 236, :_reduce_261,
  1, 236, :_reduce_262,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  3, 237, :_reduce_265,
  1, 238, :_reduce_266,
  1, 238, :_reduce_267,
  1, 238, :_reduce_268,
  1, 238, :_reduce_269,
  1, 238, :_reduce_270,
  1, 238, :_reduce_271,
  1, 238, :_reduce_272,
  1, 238, :_reduce_273,
  1, 239, :_reduce_274,
  1, 239, :_reduce_275,
  1, 240, :_reduce_276,
  2, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  2, 118, :_reduce_none,
  1, 118, :_reduce_none,
  2, 241, :_reduce_285,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 213, :_reduce_309,
  3, 213, :_reduce_310,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  1, 247, :_reduce_313,
  1, 219, :_reduce_none,
  1, 257, :_reduce_none,
  1, 224, :_reduce_316,
  1, 224, :_reduce_317,
  2, 224, :_reduce_318,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 264, :_reduce_325,
  1, 261, :_reduce_326,
  1, 261, :_reduce_327,
  1, 262, :_reduce_328,
  1, 262, :_reduce_329,
  2, 263, :_reduce_330,
  1, 263, :_reduce_331,
  1, 260, :_reduce_none,
  1, 260, :_reduce_none,
  1, 260, :_reduce_none,
  1, 260, :_reduce_none,
  1, 268, :_reduce_336,
  2, 265, :_reduce_337,
  1, 265, :_reduce_338,
  2, 266, :_reduce_339,
  1, 266, :_reduce_340,
  3, 267, :_reduce_341,
  1, 267, :_reduce_342,
  1, 221, :_reduce_343,
  1, 222, :_reduce_344,
  1, 223, :_reduce_345,
  1, 228, :_reduce_346,
  1, 252, :_reduce_347,
  1, 196, :_reduce_348,
  2, 243, :_reduce_349,
  4, 242, :_reduce_350,
  2, 270, :_reduce_351,
  1, 269, :_reduce_352,
  1, 271, :_reduce_none,
  2, 271, :_reduce_none,
  3, 272, :_reduce_355,
  2, 245, :_reduce_356,
  4, 244, :_reduce_357,
  2, 274, :_reduce_358,
  2, 276, :_reduce_359,
  1, 273, :_reduce_360,
  4, 277, :_reduce_361,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 275, :_reduce_none,
  2, 275, :_reduce_none,
  3, 279, :_reduce_369,
  1, 280, :_reduce_370,
  2, 280, :_reduce_371,
  3, 282, :_reduce_372,
  2, 282, :_reduce_373,
  2, 281, :_reduce_374,
  2, 248, :_reduce_375,
  2, 283, :_reduce_376,
  3, 284, :_reduce_none,
  1, 285, :_reduce_none,
  3, 285, :_reduce_none,
  1, 286, :_reduce_380,
  2, 246, :_reduce_381,
  2, 287, :_reduce_382,
  3, 288, :_reduce_none,
  1, 289, :_reduce_none,
  3, 289, :_reduce_none,
  1, 290, :_reduce_386,
  6, 141, :_reduce_387,
  4, 141, :_reduce_388,
  8, 255, :_reduce_389,
  6, 255, :_reduce_390,
  4, 225, :_reduce_391,
  1, 225, :_reduce_392,
  4, 226, :_reduce_393,
  1, 226, :_reduce_394,
  2, 258, :_reduce_395,
  1, 291, :_reduce_396,
  2, 291, :_reduce_397,
  3, 292, :_reduce_398,
  4, 164, :_reduce_399,
  4, 164, :_reduce_400,
  3, 164, :_reduce_401,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  2, 296, :_reduce_407,
  2, 297, :_reduce_408,
  1, 298, :_reduce_409,
  1, 299, :_reduce_410,
  0, 300, :_reduce_411,
  3, 295, :_reduce_412,
  2, 293, :_reduce_413,
  1, 293, :_reduce_414,
  1, 303, :_reduce_415,
  3, 303, :_reduce_416,
  2, 120, :_reduce_417,
  2, 304, :_reduce_418,
  3, 305, :_reduce_none,
  0, 306, :_reduce_none,
  2, 306, :_reduce_none,
  3, 165, :_reduce_none,
  3, 307, :_reduce_423,
  2, 307, :_reduce_424,
  1, 308, :_reduce_none,
  2, 309, :_reduce_426,
  1, 309, :_reduce_427,
  1, 309, :_reduce_428,
  0, 309, :_reduce_429,
  1, 310, :_reduce_430,
  1, 311, :_reduce_431,
  1, 311, :_reduce_432,
  2, 312, :_reduce_none,
  3, 312, :_reduce_none,
  1, 314, :_reduce_none,
  3, 314, :_reduce_none,
  3, 315, :_reduce_437,
  1, 316, :_reduce_438,
  1, 316, :_reduce_439,
  1, 316, :_reduce_440,
  4, 215, :_reduce_441,
  4, 301, :_reduce_442,
  4, 302, :_reduce_443,
  1, 152, :_reduce_444,
  3, 152, :_reduce_445,
  4, 313, :_reduce_446,
  1, 317, :_reduce_447,
  3, 317, :_reduce_448,
  1, 218, :_reduce_449,
  1, 218, :_reduce_450,
  1, 218, :_reduce_451,
  1, 218, :_reduce_452,
  6, 254, :_reduce_453,
  1, 227, :_reduce_454,
  1, 253, :_reduce_455 ]

racc_reduce_n = 456

racc_shift_n = 768

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "{" => 3,
  "}" => 4,
  "module" => 5,
  :identifier => 6,
  "<" => 7,
  ">" => 8,
  "," => 9,
  "typename" => 10,
  "interface" => 11,
  "valuetype" => 12,
  "eventtype" => 13,
  "struct" => 14,
  "union" => 15,
  "exception" => 16,
  "enum" => 17,
  "sequence" => 18,
  "const" => 19,
  "alias" => 20,
  "local" => 21,
  "abstract" => 22,
  "pseudo" => 23,
  ":" => 24,
  "home" => 25,
  "supports" => 26,
  "manages" => 27,
  "primarykey" => 28,
  "porttype" => 29,
  "component" => 30,
  "connector" => 31,
  "provides" => 32,
  "uses" => 33,
  "multiple" => 34,
  "publishes" => 35,
  "emits" => 36,
  "consumes" => 37,
  "port" => 38,
  "mirrorport" => 39,
  "::" => 40,
  "custom" => 41,
  "truncatable" => 42,
  "public" => 43,
  "private" => 44,
  "factory" => 45,
  "(" => 46,
  ")" => 47,
  "finder" => 48,
  "in" => 49,
  "typeprefix" => 50,
  :string_literal => 51,
  "typeid" => 52,
  "=" => 53,
  "|" => 54,
  "^" => 55,
  "&" => 56,
  ">>" => 57,
  "<<" => 58,
  "+" => 59,
  "-" => 60,
  "*" => 61,
  "/" => 62,
  "%" => 63,
  "~" => 64,
  :integer_literal => 65,
  :wide_string_literal => 66,
  :character_literal => 67,
  :wide_character_literal => 68,
  :fixed_pt_literal => 69,
  :floating_pt_literal => 70,
  "TRUE" => 71,
  "FALSE" => 72,
  "typedef" => 73,
  "native" => 74,
  "float" => 75,
  "double" => 76,
  "long" => 77,
  "int8" => 78,
  "short" => 79,
  "int16" => 80,
  "int32" => 81,
  "int64" => 82,
  "uint8" => 83,
  "unsigned" => 84,
  "uint16" => 85,
  "uint32" => 86,
  "uint64" => 87,
  "char" => 88,
  "wchar" => 89,
  "boolean" => 90,
  "octet" => 91,
  "any" => 92,
  "Object" => 93,
  "switch" => 94,
  "case" => 95,
  "default" => 96,
  "bitmask" => 97,
  "map" => 98,
  "string" => 99,
  "wstring" => 100,
  "[" => 101,
  "]" => 102,
  "readonly" => 103,
  "attribute" => 104,
  "oneway" => 105,
  "void" => 106,
  "out" => 107,
  "inout" => 108,
  "raises" => 109,
  "getraises" => 110,
  "setraises" => 111,
  "context" => 112,
  "fixed" => 113,
  "ValueBase" => 114 }

racc_nt_base = 115

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\"module\"",
  "identifier",
  "\"<\"",
  "\">\"",
  "\",\"",
  "\"typename\"",
  "\"interface\"",
  "\"valuetype\"",
  "\"eventtype\"",
  "\"struct\"",
  "\"union\"",
  "\"exception\"",
  "\"enum\"",
  "\"sequence\"",
  "\"const\"",
  "\"alias\"",
  "\"local\"",
  "\"abstract\"",
  "\"pseudo\"",
  "\":\"",
  "\"home\"",
  "\"supports\"",
  "\"manages\"",
  "\"primarykey\"",
  "\"porttype\"",
  "\"component\"",
  "\"connector\"",
  "\"provides\"",
  "\"uses\"",
  "\"multiple\"",
  "\"publishes\"",
  "\"emits\"",
  "\"consumes\"",
  "\"port\"",
  "\"mirrorport\"",
  "\"::\"",
  "\"custom\"",
  "\"truncatable\"",
  "\"public\"",
  "\"private\"",
  "\"factory\"",
  "\"(\"",
  "\")\"",
  "\"finder\"",
  "\"in\"",
  "\"typeprefix\"",
  "string_literal",
  "\"typeid\"",
  "\"=\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\">>\"",
  "\"<<\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "integer_literal",
  "wide_string_literal",
  "character_literal",
  "wide_character_literal",
  "fixed_pt_literal",
  "floating_pt_literal",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"typedef\"",
  "\"native\"",
  "\"float\"",
  "\"double\"",
  "\"long\"",
  "\"int8\"",
  "\"short\"",
  "\"int16\"",
  "\"int32\"",
  "\"int64\"",
  "\"uint8\"",
  "\"unsigned\"",
  "\"uint16\"",
  "\"uint32\"",
  "\"uint64\"",
  "\"char\"",
  "\"wchar\"",
  "\"boolean\"",
  "\"octet\"",
  "\"any\"",
  "\"Object\"",
  "\"switch\"",
  "\"case\"",
  "\"default\"",
  "\"bitmask\"",
  "\"map\"",
  "\"string\"",
  "\"wstring\"",
  "\"[\"",
  "\"]\"",
  "\"readonly\"",
  "\"attribute\"",
  "\"oneway\"",
  "\"void\"",
  "\"out\"",
  "\"inout\"",
  "\"raises\"",
  "\"getraises\"",
  "\"setraises\"",
  "\"context\"",
  "\"fixed\"",
  "\"ValueBase\"",
  "$start",
  "specification",
  "definition",
  "type_dcl",
  "const_dcl",
  "except_dcl",
  "interface",
  "porttype",
  "component",
  "connector",
  "home",
  "module",
  "template_module",
  "template_module_inst",
  "value",
  "event",
  "typeid",
  "typeprefix",
  "module_header",
  "_definition_1",
  "template_module_header",
  "template_module_parameters",
  "template_module_body",
  "scoped_name_0",
  "template_module_parameter",
  "const_type",
  "sequence_type",
  "template_module_definition",
  "fixed_module",
  "template_module_reference",
  "fixed_module_body",
  "fixed_module_definition",
  "template_module_inst_parameters",
  "template_module_inst_parameter",
  "simple_type_spec",
  "const_exp",
  "scoped_name",
  "_scoped_name_list",
  "interface_dcl",
  "forward_dcl",
  "local_interface_",
  "abstract_interface_",
  "regular_interface_",
  "interface_header",
  "interface_body",
  "pseudo_interface_header",
  "interface_inheritance_spec",
  "pseudo_interface_",
  "export",
  "attr_dcl",
  "op_dcl",
  "_interface_name_list",
  "interface_name",
  "home_header",
  "home_body",
  "home_inheritance_spec",
  "home_supports_spec",
  "home_primarykey_spec",
  "home_export",
  "init_dcl",
  "finder_dcl",
  "porttype_header",
  "porttype_body",
  "porttype_export",
  "provides_dcl",
  "uses_dcl",
  "component_dcl",
  "component_forward_dcl",
  "component_header",
  "component_body",
  "component_inheritance_spec",
  "component_supports_spec",
  "component_export",
  "emits_dcl",
  "publishes_dcl",
  "consumes_dcl",
  "port_dcl",
  "connector_header",
  "connector_body",
  "connector_export",
  "interface_type",
  "object_type",
  "event_dcl",
  "event_forward_dcl",
  "eventtype_header",
  "value_body",
  "value_inheritance_spec",
  "value_dcl",
  "value_box_dcl",
  "value_forward_dcl",
  "type_spec",
  "valuetype_header",
  "value_element",
  "value_basevalue_list",
  "value_interface_support_list",
  "_value_name_list",
  "value_name",
  "state_member",
  "declarators",
  "init_param_decls",
  "raises_expr",
  "init_param_decl",
  "init_param_attribute",
  "param_type_spec",
  "simple_declarator",
  "integer_type",
  "char_type",
  "wide_char_type",
  "boolean_type",
  "floating_pt_type",
  "string_type",
  "wide_string_type",
  "fixed_pt_const_type",
  "octet_type",
  "or_expr",
  "xor_expr",
  "and_expr",
  "shift_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "unary_operator",
  "primary_expr",
  "literal",
  "boolean_literal",
  "positive_int_const",
  "type_declarator",
  "struct_type",
  "struct_forward_dcl",
  "union_type",
  "union_forward_dcl",
  "enum_type",
  "native_declarator",
  "bitmask_type",
  "constr_type_spec",
  "base_type_spec",
  "template_type_spec",
  "any_type",
  "value_base_type",
  "fixed_pt_type",
  "map_type",
  "declarator",
  "complex_declarator",
  "array_declarator",
  "signed_int",
  "unsigned_int",
  "signed_short_int",
  "signed_long_int",
  "signed_longlong_int",
  "tiny_short_int",
  "unsigned_short_int",
  "unsigned_long_int",
  "unsigned_longlong_int",
  "unsigned_tiny_short_int",
  "struct_def",
  "struct_header",
  "member_list",
  "member",
  "union_def",
  "union_header",
  "union_body",
  "union_dcl",
  "union_switch_spec",
  "switch_type_spec",
  "union_case",
  "_case_label_1",
  "element_spec",
  "case_label",
  "bitmask_header",
  "bitmask_body",
  "bitmask_list",
  "bit_value",
  "_enum_header",
  "_enum_body",
  "_enumerator_list",
  "enumerator",
  "_fixed_array_size_1",
  "fixed_array_size",
  "readonly_attr_declarator",
  "attr_raises_expr",
  "attr_declarator_list",
  "attr_both_raises_expr1",
  "attr_both_raises_expr2",
  "attr_get_raises_expr",
  "attr_set_raises_expr",
  "attr_no_raises_expr",
  "get_raises_expr",
  "set_raises_expr",
  "_simple_declarator_list",
  "_except_header",
  "_except_body",
  "_member_list0",
  "_op_dcl_header",
  "_op_dcl_parameter",
  "_op_dcl_footer",
  "op_attribute",
  "op_type_spec",
  "parameter_dcls",
  "context_expr",
  "_param_dcl_list",
  "param_dcl",
  "param_attribute",
  "_string_literal_list" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_19(val, _values)
     @d.end_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 41)
  def _reduce_20(val, _values)
     @d.define_module(val[1])
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.ry', 47)
  def _reduce_23(val, _values)
     @d.end_template_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_24(val, _values)
     @d.register_template_module_name(val[1])
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_27(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Any.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_28(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Interface.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 60)
  def _reduce_29(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Valuetype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 62)
  def _reduce_30(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Eventtype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_31(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Struct.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 66)
  def _reduce_32(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Union.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 68)
  def _reduce_33(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Exception.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_34(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Enum.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 72)
  def _reduce_35(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Sequence.new(IDL::Type::Void.new, nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 74)
  def _reduce_36(val, _values)
     @d.define_template_parameter(val[2], IDL::Type::Const.new(val[1]))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 76)
  def _reduce_37(val, _values)
     @d.define_template_parameter(val[1], val[0])
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.ry', 97)
  def _reduce_54(val, _values)
     @d.end_module(val[0])
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.ry', 117)
  def _reduce_70(val, _values)
     @d.instantiate_template_module(val[4], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 120)
  def _reduce_71(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 122)
  def _reduce_72(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 125)
  def _reduce_73(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 127)
  def _reduce_74(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 130)
  def _reduce_75(val, _values)
     @d.declare_template_reference(val[5], val[1], val[3])
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.ry', 137)
  def _reduce_78(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 139)
  def _reduce_79(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 141)
  def _reduce_80(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 144)
  def _reduce_81(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 146)
  def _reduce_82(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 149)
  def _reduce_83(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 151)
  def _reduce_84(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 153)
  def _reduce_85(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 155)
  def _reduce_86(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 157)
  def _reduce_87(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 159)
  def _reduce_88(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 161)
  def _reduce_89(val, _values)
     :local
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 163)
  def _reduce_90(val, _values)
     :abstract
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 166)
  def _reduce_91(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 168)
  def _reduce_92(val, _values)
     :pseudo
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 170)
  def _reduce_93(val, _values)
     :none
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.ry', 184)
  def _reduce_104(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 185)
  def _reduce_105(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 187)
  def _reduce_106(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.ry', 192)
  def _reduce_108(val, _values)
     @d.end_home(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 195)
  def _reduce_109(val, _values)
     @d.define_home(val[1], val[3], val[7], val[9], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 197)
  def _reduce_110(val, _values)
     @d.define_home(val[1], val[3], val[7], nil, val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 199)
  def _reduce_111(val, _values)
     @d.define_home(val[1], val[3], val[5], val[7], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 201)
  def _reduce_112(val, _values)
     @d.define_home(val[1], nil, val[5], val[7], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 203)
  def _reduce_113(val, _values)
     @d.define_home(val[1], nil, val[5], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 205)
  def _reduce_114(val, _values)
     @d.define_home(val[1], val[3], val[5], nil, nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 207)
  def _reduce_115(val, _values)
     @d.define_home(val[1], nil, val[3], val[5], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 209)
  def _reduce_116(val, _values)
     @d.define_home(val[1], nil, val[3], nil, nil)
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.ry', 225)
  def _reduce_125(val, _values)
     @d.end_porttype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 228)
  def _reduce_126(val, _values)
     @d.define_porttype(val[1])
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.ry', 241)
  def _reduce_134(val, _values)
     @d.declare_component(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 244)
  def _reduce_135(val, _values)
     @d.end_component(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 247)
  def _reduce_136(val, _values)
     @d.define_component(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 249)
  def _reduce_137(val, _values)
     @d.define_component(val[1], val[3], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 251)
  def _reduce_138(val, _values)
     @d.define_component(val[1], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 253)
  def _reduce_139(val, _values)
     @d.define_component(val[1], nil, nil)
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.ry', 272)
  def _reduce_152(val, _values)
     @d.end_connector(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 275)
  def _reduce_153(val, _values)
     @d.define_connector(val[1], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 277)
  def _reduce_154(val, _values)
     @d.define_connector(val[1], nil)
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.ry', 289)
  def _reduce_162(val, _values)
     @d.declare_port(val[2], :facet, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 292)
  def _reduce_163(val, _values)
     @d.declare_port(val[3], :receptacle, val[2], true)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 294)
  def _reduce_164(val, _values)
     @d.declare_port(val[2], :receptacle, val[1], false)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 297)
  def _reduce_165(val, _values)
     @d.declare_port(val[2], :publisher, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 300)
  def _reduce_166(val, _values)
     @d.declare_port(val[2], :emitter, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 303)
  def _reduce_167(val, _values)
     @d.declare_port(val[2], :consumer, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 306)
  def _reduce_168(val, _values)
     @d.declare_port(val[2], :port, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 308)
  def _reduce_169(val, _values)
     @d.declare_port(val[2], :mirrorport, val[1])
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.ry', 313)
  def _reduce_172(val, _values)
     @d.parse_scopedname(*val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 315)
  def _reduce_173(val, _values)
     [false, [val[0]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 316)
  def _reduce_174(val, _values)
     [true,  [val[1]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 318)
  def _reduce_175(val, _values)
     val[0][1] << val[2]; val[0]
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'parser.ry', 324)
  def _reduce_178(val, _values)
     @d.declare_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 326)
  def _reduce_179(val, _values)
     @d.declare_eventtype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 329)
  def _reduce_180(val, _values)
     @d.end_eventtype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 332)
  def _reduce_181(val, _values)
     @d.define_eventtype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 334)
  def _reduce_182(val, _values)
     @d.define_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 336)
  def _reduce_183(val, _values)
     @d.define_eventtype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 338)
  def _reduce_184(val, _values)
     @d.define_eventtype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 340)
  def _reduce_185(val, _values)
     @d.define_eventtype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 342)
  def _reduce_186(val, _values)
     @d.define_eventtype(val[1], :none)
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.ry', 349)
  def _reduce_190(val, _values)
     @d.declare_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 351)
  def _reduce_191(val, _values)
     @d.declare_valuetype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 354)
  def _reduce_192(val, _values)
     @d.define_valuebox(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 357)
  def _reduce_193(val, _values)
     @d.end_valuetype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 360)
  def _reduce_194(val, _values)
     @d.define_valuetype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 362)
  def _reduce_195(val, _values)
     @d.define_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 364)
  def _reduce_196(val, _values)
     @d.define_valuetype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 366)
  def _reduce_197(val, _values)
     @d.define_valuetype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 368)
  def _reduce_198(val, _values)
     @d.define_valuetype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 370)
  def _reduce_199(val, _values)
     @d.define_valuetype(val[1], :none)
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'parser.ry', 376)
  def _reduce_202(val, _values)
     Hash[ :base => val[0], :supports => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 378)
  def _reduce_203(val, _values)
     Hash[ :base => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 380)
  def _reduce_204(val, _values)
     Hash[ :supports => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 383)
  def _reduce_205(val, _values)
     Hash[ :truncatable => true, :list => val[2] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 385)
  def _reduce_206(val, _values)
     Hash[ :truncatable => false, :list => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 388)
  def _reduce_207(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 390)
  def _reduce_208(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 391)
  def _reduce_209(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.ry', 401)
  def _reduce_214(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], true) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 406)
  def _reduce_215(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], false) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 411)
  def _reduce_216(val, _values)
      @d.declare_initializer(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 413)
  def _reduce_217(val, _values)
      @d.declare_initializer(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 415)
  def _reduce_218(val, _values)
      @d.declare_initializer(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 417)
  def _reduce_219(val, _values)
      @d.declare_initializer(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 420)
  def _reduce_220(val, _values)
      @d.declare_finder(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 422)
  def _reduce_221(val, _values)
      @d.declare_finder(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 424)
  def _reduce_222(val, _values)
      @d.declare_finder(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 426)
  def _reduce_223(val, _values)
      @d.declare_finder(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 428)
  def _reduce_224(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 429)
  def _reduce_225(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 432)
  def _reduce_226(val, _values)
     [val[1], val[2]]
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.ry', 437)
  def _reduce_228(val, _values)
     @d.define_typeprefix(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 440)
  def _reduce_229(val, _values)
     @d.define_typeid(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 443)
  def _reduce_230(val, _values)
     @d.define_const(val[1], val[2], val[4])
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'parser.ry', 460)
  def _reduce_243(val, _values)
     Expression::Operation::Or.new(val[0], val[2])
  end
.,.,

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.ry', 464)
  def _reduce_245(val, _values)
     Expression::Operation::Xor.new(val[0], val[2])
  end
.,.,

# reduce 246 omitted

module_eval(<<'.,.,', 'parser.ry', 468)
  def _reduce_247(val, _values)
     Expression::Operation::And.new(val[0], val[2])
  end
.,.,

# reduce 248 omitted

module_eval(<<'.,.,', 'parser.ry', 472)
  def _reduce_249(val, _values)
     Expression::Operation::RShift.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 474)
  def _reduce_250(val, _values)
     Expression::Operation::LShift.new(val[0], val[2])
  end
.,.,

# reduce 251 omitted

module_eval(<<'.,.,', 'parser.ry', 478)
  def _reduce_252(val, _values)
     Expression::Operation::Add.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 480)
  def _reduce_253(val, _values)
     Expression::Operation::Minus.new(val[0], val[2])
  end
.,.,

# reduce 254 omitted

module_eval(<<'.,.,', 'parser.ry', 484)
  def _reduce_255(val, _values)
     Expression::Operation::Mult.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 486)
  def _reduce_256(val, _values)
     Expression::Operation::Div.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 488)
  def _reduce_257(val, _values)
     Expression::Operation::Mod.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 490)
  def _reduce_258(val, _values)
     val[0].new(val[1])
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'parser.ry', 493)
  def _reduce_260(val, _values)
     Expression::Operation::UnaryMinus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 494)
  def _reduce_261(val, _values)
     Expression::Operation::UnaryPlus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 495)
  def _reduce_262(val, _values)
     Expression::Operation::UnaryNot
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'parser.ry', 500)
  def _reduce_265(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 502)
  def _reduce_266(val, _values)
     @d.parse_literal(:integer, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 503)
  def _reduce_267(val, _values)
     @d.parse_literal(:string,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 504)
  def _reduce_268(val, _values)
     @d.parse_literal(:wstring, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 505)
  def _reduce_269(val, _values)
     @d.parse_literal(:char,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 506)
  def _reduce_270(val, _values)
     @d.parse_literal(:wchar,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 507)
  def _reduce_271(val, _values)
     @d.parse_literal(:fixed,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 508)
  def _reduce_272(val, _values)
     @d.parse_literal(:float,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 509)
  def _reduce_273(val, _values)
     @d.parse_literal(:boolean, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 511)
  def _reduce_274(val, _values)
     true
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 512)
  def _reduce_275(val, _values)
     false
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 514)
  def _reduce_276(val, _values)
     @d.parse_positive_int(val[0])
  end
.,.,

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

module_eval(<<'.,.,', 'parser.ry', 527)
  def _reduce_285(val, _values)
                          dcls = parse_type_declarator(val[0], val[1])
                      dcls.each do |d|
                        @d.declare_typedef(d[0], d[1])
                      end

  end
.,.,

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

module_eval(<<'.,.,', 'parser.ry', 561)
  def _reduce_309(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 562)
  def _reduce_310(val, _values)
     val[0] << val[2]
  end
.,.,

# reduce 311 omitted

# reduce 312 omitted

module_eval(<<'.,.,', 'parser.ry', 567)
  def _reduce_313(val, _values)
     @d.declare_typedef(::IDL::Type::Native.new, val[0])
  end
.,.,

# reduce 314 omitted

# reduce 315 omitted

module_eval(<<'.,.,', 'parser.ry', 573)
  def _reduce_316(val, _values)
     ::IDL::Type::Float.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 574)
  def _reduce_317(val, _values)
     ::IDL::Type::Double.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 575)
  def _reduce_318(val, _values)
     ::IDL::Type::LongDouble.new
  end
.,.,

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

module_eval(<<'.,.,', 'parser.ry', 585)
  def _reduce_325(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::TinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 587)
  def _reduce_326(val, _values)
     ::IDL::Type::Short.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 588)
  def _reduce_327(val, _values)
     if @idlversion < 4 then raise "int16 is only supported with IDL4 or newer" else ::IDL::Type::Short.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 590)
  def _reduce_328(val, _values)
     ::IDL::Type::Long.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 591)
  def _reduce_329(val, _values)
     if @idlversion < 4 then raise "int32 is only supported with IDL4 or newer" else ::IDL::Type::Long.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 593)
  def _reduce_330(val, _values)
     ::IDL::Type::LongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 594)
  def _reduce_331(val, _values)
     if @idlversion < 4 then raise "int64 is only supported with IDL4 or newer" else ::IDL::Type::LongLong.new end
  end
.,.,

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

module_eval(<<'.,.,', 'parser.ry', 601)
  def _reduce_336(val, _values)
     if @idlversion < 4 then raise "uint8 is only supported with IDL4 or newer" else ::IDL::Type::UTinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 603)
  def _reduce_337(val, _values)
     ::IDL::Type::UShort.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 604)
  def _reduce_338(val, _values)
     if @idlversion < 4 then raise "uint16 is only supported with IDL4 or newer" else ::IDL::Type::UShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 606)
  def _reduce_339(val, _values)
     ::IDL::Type::ULong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 607)
  def _reduce_340(val, _values)
     if @idlversion < 4 then raise "uint32 is only supported with IDL4 or newer" else ::IDL::Type::ULong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 609)
  def _reduce_341(val, _values)
     ::IDL::Type::ULongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 610)
  def _reduce_342(val, _values)
     if @idlversion < 4 then raise "uint64 is only supported with IDL4 or newer" else ::IDL::Type::ULongLong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 612)
  def _reduce_343(val, _values)
     ::IDL::Type::Char.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 614)
  def _reduce_344(val, _values)
     ::IDL::Type::WChar.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 616)
  def _reduce_345(val, _values)
     ::IDL::Type::Boolean.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 618)
  def _reduce_346(val, _values)
     ::IDL::Type::Octet.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 620)
  def _reduce_347(val, _values)
     ::IDL::Type::Any.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 622)
  def _reduce_348(val, _values)
     ::IDL::Type::Object.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 624)
  def _reduce_349(val, _values)
     @d.declare_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 627)
  def _reduce_350(val, _values)
     @d.end_struct(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 629)
  def _reduce_351(val, _values)
     @d.define_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 631)
  def _reduce_352(val, _values)
     nil
  end
.,.,

# reduce 353 omitted

# reduce 354 omitted

module_eval(<<'.,.,', 'parser.ry', 639)
  def _reduce_355(val, _values)
                 dcls = parse_type_declarator(val[0], val[1])
             dcls.each do |d|
               @d.declare_member(d[0], d[1])
             end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 646)
  def _reduce_356(val, _values)
     @d.declare_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 649)
  def _reduce_357(val, _values)
     @d.end_union(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 652)
  def _reduce_358(val, _values)
     @d.define_union_switchtype(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 655)
  def _reduce_359(val, _values)
     @d.define_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 657)
  def _reduce_360(val, _values)
     nil
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 660)
  def _reduce_361(val, _values)
     val[2]
  end
.,.,

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

module_eval(<<'.,.,', 'parser.ry', 673)
  def _reduce_369(val, _values)
                     dcls = parse_type_declarator(val[1][0], [val[1][1]])
                 dcls.each do |d|
                   @d.define_case(val[0], d[0], d[1])
                 end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 679)
  def _reduce_370(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 680)
  def _reduce_371(val, _values)
     val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 682)
  def _reduce_372(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 683)
  def _reduce_373(val, _values)
     :default
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 686)
  def _reduce_374(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 688)
  def _reduce_375(val, _values)
     @d.end_bitmask(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 690)
  def _reduce_376(val, _values)
     @d.define_bitmask(val[1])
  end
.,.,

# reduce 377 omitted

# reduce 378 omitted

# reduce 379 omitted

module_eval(<<'.,.,', 'parser.ry', 697)
  def _reduce_380(val, _values)
     @d.declare_bitvalue (val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 700)
  def _reduce_381(val, _values)
     @d.end_enum(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 702)
  def _reduce_382(val, _values)
     @d.define_enum(val[1])
  end
.,.,

# reduce 383 omitted

# reduce 384 omitted

# reduce 385 omitted

module_eval(<<'.,.,', 'parser.ry', 710)
  def _reduce_386(val, _values)
                     @d.declare_enumerator(val[0])

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 714)
  def _reduce_387(val, _values)
     ::IDL::Type::Sequence.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 716)
  def _reduce_388(val, _values)
     ::IDL::Type::Sequence.new(val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 719)
  def _reduce_389(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::Map.new(val[2], val[4], val[6]) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 721)
  def _reduce_390(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::Map.new(val[2], val[4], nil) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 724)
  def _reduce_391(val, _values)
     ::IDL::Type::String.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 726)
  def _reduce_392(val, _values)
     ::IDL::Type::String.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 729)
  def _reduce_393(val, _values)
     ::IDL::Type::WString.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 731)
  def _reduce_394(val, _values)
     ::IDL::Type::WString.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 733)
  def _reduce_395(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 735)
  def _reduce_396(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 736)
  def _reduce_397(val, _values)
    val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 738)
  def _reduce_398(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 741)
  def _reduce_399(val, _values)
      dcls = parse_type_declarator(val[2], val[3][0])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1], true).get_raises = val[3][1]
                        end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 747)
  def _reduce_400(val, _values)
      att = @d.declare_attribute(val[1], val[2])
                        att.get_raises = val[3][0] unless val[3][0].empty?
                        att.set_raises = val[3][1] unless val[3][1].empty?

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 752)
  def _reduce_401(val, _values)
      dcls = parse_type_declarator(val[1], val[2])
                        dcls.each do |d|
                          att = @d.declare_attribute(d[0], d[1])
                        end

  end
.,.,

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

# reduce 405 omitted

# reduce 406 omitted

module_eval(<<'.,.,', 'parser.ry', 764)
  def _reduce_407(val, _values)
     [val[0], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 766)
  def _reduce_408(val, _values)
     [val[1], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 768)
  def _reduce_409(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 770)
  def _reduce_410(val, _values)
     [[], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 772)
  def _reduce_411(val, _values)
     [[], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 775)
  def _reduce_412(val, _values)
     [val[0]].concat(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 778)
  def _reduce_413(val, _values)
      [[val[0]], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 779)
  def _reduce_414(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 781)
  def _reduce_415(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 782)
  def _reduce_416(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 785)
  def _reduce_417(val, _values)
     @d.end_exception(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 787)
  def _reduce_418(val, _values)
     @d.define_exception(val[1])
  end
.,.,

# reduce 419 omitted

# reduce 420 omitted

# reduce 421 omitted

# reduce 422 omitted

module_eval(<<'.,.,', 'parser.ry', 796)
  def _reduce_423(val, _values)
     @d.declare_op_header(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 798)
  def _reduce_424(val, _values)
     @d.declare_op_header(nil, val[0], val[1])
  end
.,.,

# reduce 425 omitted

module_eval(<<'.,.,', 'parser.ry', 803)
  def _reduce_426(val, _values)
     @d.declare_op_footer(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 805)
  def _reduce_427(val, _values)
     @d.declare_op_footer(val[0], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 807)
  def _reduce_428(val, _values)
     @d.declare_op_footer(nil, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 809)
  def _reduce_429(val, _values)
     @d.declare_op_footer(nil,nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 811)
  def _reduce_430(val, _values)
     :oneway
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 813)
  def _reduce_431(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 814)
  def _reduce_432(val, _values)
     ::IDL::Type::Void.new
  end
.,.,

# reduce 433 omitted

# reduce 434 omitted

# reduce 435 omitted

# reduce 436 omitted

module_eval(<<'.,.,', 'parser.ry', 823)
  def _reduce_437(val, _values)
     @d.declare_op_parameter(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 825)
  def _reduce_438(val, _values)
     :in
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 826)
  def _reduce_439(val, _values)
     :out
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 827)
  def _reduce_440(val, _values)
     :inout
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 829)
  def _reduce_441(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 831)
  def _reduce_442(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 833)
  def _reduce_443(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 835)
  def _reduce_444(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 836)
  def _reduce_445(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 838)
  def _reduce_446(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 840)
  def _reduce_447(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 841)
  def _reduce_448(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 843)
  def _reduce_449(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 844)
  def _reduce_450(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 845)
  def _reduce_451(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 846)
  def _reduce_452(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 850)
  def _reduce_453(val, _values)
     IDL::Type::Fixed.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 852)
  def _reduce_454(val, _values)
     ::IDL::Type::Fixed.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 854)
  def _reduce_455(val, _values)
     ::IDL::Type::ValueBase.new
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end #of module IDL
