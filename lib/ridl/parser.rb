#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

###### racc/parser.rb begin
unless $".find {|p| p.end_with?('/racc/parser.rb')}
$".push "#{__dir__}/racc/parser.rb"
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
# frozen_string_literal: false
#--
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#++

unless $".find {|p| p.end_with?('/racc/info.rb')}
$".push "#{__dir__}/racc/info.rb"
#--
#
#
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
# see the file "COPYING".
#
#++

module Racc
  VERSION   = '1.7.1'
  Version = VERSION
  Copyright = 'Copyright (c) 1999-2006 Minero Aoki'
end

end


unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError # :nodoc:
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--executable=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+grammarfile+]
#   Racc grammar file. Any extension is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammar file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is ruby license, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extensions)
    Racc_No_Extensions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Core_Version_R = ::Racc::VERSION

    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end

      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extensions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def do_parse
      #{Racc_Main_Parsing_Routine}(_racc_setup(), false)
    end
    RUBY

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def yyparse(recv, mid)
      #{Racc_YY_Parse_Method}(recv, mid, _racc_setup(), false)
    end
    RUBY

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is +Symbol_Value_Stack[0]+.
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end

require 'ridl/delegate'

module IDL

class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 836)

def parse_type_declarator(type_spec, declarators)
  ret = Array.new
  t = type_spec
  declarators.each do |d|
    case d
    when ::String, IDL::Scanner::Identifier
      ret << [t, d]
    when ::Array # array_declarator -> [identifier, size]
      ret << [IDL::Type::Array.new(t, d[1]), d[0]]
    else
      raise RuntimeError, "unknown declarator: #{d.inspect}"
    end
  end
  ret
end

#attr_accessor :default_namespace, :output
attr_accessor :yydebug
def initialize(params = {})
  @d = ::IDL::Delegator.new(params)
  @params = params
end

alias on_error0 on_error
def on_error(err_tok, err_val, _value)
  begin
    on_error0(err_tok, err_val, _value)
  rescue IDL::ParseError
    raise
  rescue
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
end

def parse(src)
  @scanner = Scanner.new(src, self, @params)
  @d.pre_parse
  begin
    do_parse
  rescue IDL::ParseError
    raise
  rescue
    STDERR.puts "#{$!}\n#{$!.backtrace.join("\n")}" if IDL.verbose_level>0
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
  @d.post_parse
end

def visit_nodes(walker)
  @d.visit_nodes(walker)
end

def pragma_prefix(s)
  @d.pragma_prefix(s)
end

def pragma_version(id, major, minor)
  @d.pragma_version(id, major, minor)
end

def pragma_id(id, repo_id)
  @d.pragma_id(id, repo_id)
end

def handle_pragma(s)
  @d.handle_pragma(s)
end

def is_included?(s)
  @d.is_included?(s)
end

def enter_include(s, fp)
  @d.enter_include(s, fp)
end

def leave_include()
  @d.leave_include
end

def declare_include(s)
  @d.declare_include(s)
end

def define_annotation(*args)
  @d.define_annotation(*args)
end

def next_token
  ret = @scanner.next_token
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
  -199,   431,   545,   122,   622,   615,   496,   292,   293,   122,
   678,    65,    69,  -139,    71,   184,   541,  -186,   545,    92,
   122,   320,   122,   321,    76,   678,   709,   122,   711,   292,
   293,   122,   578,   709,   294,    77,   295,    94,   320,   486,
   321,   539,   621,    94,   540,   467,   709,   402,   677,   122,
    78,   546,   547,    94,    94,   439,    94,    65,    69,    73,
    71,    94,    55,   681,   708,    94,   710,   546,   547,   262,
   263,   736,   136,   137,   138,   144,   148,   149,   150,   151,
   152,   180,   181,    94,   737,    79,   185,   153,   154,   361,
   362,   262,   263,    53,   493,    54,   122,   616,   617,   181,
    80,   186,   187,    81,    65,    69,   181,    71,   184,    82,
   181,   122,   122,   122,   -84,   122,    56,    62,   136,   137,
   138,   144,   148,   149,   150,   151,   152,   180,   181,   122,
    94,   118,   117,   153,   154,   250,  -182,   262,   263,   267,
   269,   420,   122,   122,   122,    94,    94,    94,   187,    94,
   122,    65,    69,    73,    71,   510,    55,   320,    83,   321,
   511,    84,   459,    94,    85,   136,   137,   138,   144,   148,
   149,   150,   151,   152,   180,   181,    94,    94,    94,   185,
   153,   154,   282,    86,    94,   283,   320,    53,   321,    54,
   292,   293,   292,   293,   186,   187,   308,   309,   308,   309,
   337,   338,   -86,  -195,   122,   122,   122,   122,    87,   122,
    56,    62,   136,   137,   138,   144,   148,   149,   150,   151,
   152,   180,   181,   250,   320,   122,   321,   153,   154,   445,
    88,   262,   263,   267,   269,   472,    71,   122,    94,    94,
    94,    94,   187,    94,   122,    65,    69,    73,    71,   -88,
    55,   122,   262,   263,   262,   263,    89,   292,   293,    94,
   305,   306,   307,   308,   309,   320,   122,   321,   122,   122,
   250,    94,   340,   339,   327,   328,   282,   284,    94,   285,
   286,    53,    90,    54,   122,    94,   102,   104,   103,   122,
   122,   393,   394,   395,   361,   362,   503,   144,   148,   149,
    94,   151,    94,    94,    56,    62,   136,   137,   138,   144,
   148,   149,   150,   151,   152,   180,   181,    91,    94,   262,
   263,   153,   154,    94,    94,   262,   263,   267,   269,   480,
   238,   122,   122,   122,    95,   240,   187,   122,   122,    65,
    69,    73,    71,    96,    55,   122,   122,   122,   122,   239,
   241,   242,   243,   244,   245,   247,   248,   122,   122,   122,
   122,   393,   394,   395,    97,    94,    94,    94,   327,   328,
   282,    94,    94,   371,   372,    53,   512,    54,   122,    94,
    94,    94,    94,   393,   394,   395,    65,    69,    98,    71,
   184,    94,    94,    94,    94,   624,    99,   628,    56,    62,
   136,   137,   138,   144,   148,   149,   150,   151,   152,   180,
   181,   629,    94,   628,   100,   153,   154,   381,   351,   262,
   263,   267,   269,   101,   122,   384,   385,   389,   390,   105,
   187,   106,    65,    69,   107,    71,   184,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   136,   137,   138,
   144,   148,   149,   150,   151,   152,   180,   181,    94,   391,
   392,   185,   153,   154,   292,   293,   108,   305,   306,   307,
   308,   309,   551,   552,   575,   574,   186,   187,   109,   122,
   389,   390,   110,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   136,   137,   138,   144,   148,   149,   150,
   151,   152,   180,   181,   391,   392,   111,   185,   153,   154,
   391,   392,   122,    94,   687,   686,   742,   709,   112,   238,
   113,   114,   186,   187,   240,   115,   262,   263,   116,   119,
   120,   189,   234,   233,   190,   191,   192,   235,   239,   241,
   242,   243,   244,   245,   247,   248,    94,   193,   136,   137,
   138,   144,   148,   149,   150,   151,   152,   180,   181,   122,
   195,   197,   198,   153,   154,   200,   201,    65,    69,    73,
    71,   202,    55,   -20,   205,   206,   274,   186,   187,   275,
   276,   136,   137,   138,   144,   148,   149,   150,   151,   152,
   180,   181,   316,    94,   329,   330,   153,   154,   205,   334,
   335,   336,   341,    53,   342,    54,   347,   349,   350,   351,
   352,   187,   353,  -339,  -347,   363,   366,   370,   373,   374,
   375,   376,   377,   378,   379,   380,    56,    62,   136,   137,
   138,   144,   148,   149,   150,   151,   152,   180,   181,   383,
   386,   122,   387,   153,   154,   388,   122,   262,   263,   267,
   269,   404,   405,   406,    65,    69,    73,    71,   187,    55,
   407,   408,   409,   410,   411,   415,   417,   422,   423,   424,
   425,   433,   434,   435,   447,    94,   448,   449,   122,   450,
    94,   238,   451,   452,   453,   282,   240,   461,   283,   462,
    53,   463,    54,   464,   234,   233,   321,   474,   475,   235,
   239,   241,   242,   243,   244,   245,   247,   248,   481,   482,
   486,   489,    94,    56,    62,   136,   137,   138,   144,   148,
   149,   150,   151,   152,   180,   181,   347,   502,   514,   517,
   153,   154,   518,   122,   262,   263,   267,   269,   530,   531,
   533,    65,    69,    73,    71,   187,    55,   136,   137,   138,
   144,   148,   149,   150,   151,   152,   548,   549,   550,   531,
   553,   554,   153,   154,   555,   122,   557,    94,   558,   531,
   327,   328,   282,   559,   560,   561,   155,    53,   562,    54,
   563,   565,   531,   347,   347,   569,   570,   347,   489,   576,
   577,   579,   347,   581,   338,   582,   366,   383,   387,    94,
    56,    62,   136,   137,   138,   144,   148,   149,   150,   151,
   152,   180,   181,   388,   533,   540,   619,   153,   154,   620,
   122,   262,   263,   267,   269,   636,   565,   486,    65,    69,
    73,    71,   187,    55,   136,   137,   138,   144,   148,   149,
   150,   151,   152,   486,   639,   643,   646,   647,   648,   153,
   154,   649,   650,   651,    94,   652,   653,   327,   328,   282,
   654,   655,   656,   155,    53,   657,    54,   122,   658,   659,
   660,   539,   663,   617,   616,    65,    69,   533,    71,   184,
   668,   669,   673,   533,   122,   539,   539,    56,    62,   136,
   137,   138,   144,   148,   149,   150,   151,   152,   180,   181,
   682,    94,   683,   684,   153,   154,   685,   688,   262,   263,
   267,   269,   704,   533,   663,   122,   539,   628,    94,   187,
   533,   539,   722,    65,    69,   723,    71,   184,   724,   725,
   726,   727,   728,   729,   730,   731,   136,   137,   138,   144,
   148,   149,   150,   151,   152,   180,   181,   732,   733,    94,
   185,   153,   154,   136,   137,   138,   144,   148,   149,   150,
   151,   152,   180,   181,   734,   186,   187,   122,   153,   154,
   122,   739,   740,   741,   744,   269,   nil,   nil,    65,    69,
   nil,    71,   184,   187,   136,   137,   138,   144,   148,   149,
   150,   151,   152,   180,   181,   nil,   nil,   nil,   185,   153,
   154,    94,   nil,   122,    94,   nil,   nil,   238,   nil,   nil,
   nil,   nil,   240,   186,   187,   184,   nil,   nil,   nil,   nil,
   234,   233,   nil,   nil,   nil,   235,   239,   241,   242,   243,
   244,   245,   247,   248,   nil,   nil,   nil,    94,   nil,   136,
   137,   138,   144,   148,   149,   150,   151,   152,   180,   181,
   122,   nil,   nil,   185,   153,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   184,   nil,   nil,   nil,   nil,   nil,   186,   187,
   nil,   nil,   136,   137,   138,   144,   148,   149,   150,   151,
   152,   180,   181,   122,    94,   nil,   nil,   153,   154,   nil,
   nil,    65,    69,   nil,    71,   184,   nil,   nil,   nil,   nil,
   nil,   186,   187,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,   nil,   136,
   137,   138,   144,   148,   149,   150,   151,   152,   180,   181,
   nil,   nil,   nil,   nil,   153,   154,   nil,   nil,   122,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   186,   187,
   184,   nil,   136,   137,   138,   144,   148,   149,   150,   151,
   152,   180,   181,   nil,   361,   362,   185,   153,   154,   nil,
   nil,   122,    94,   nil,   nil,   nil,   nil,   nil,   238,   nil,
   nil,   186,   187,   240,   nil,   nil,   nil,   nil,   nil,   nil,
   122,   234,   233,   nil,   nil,   nil,   235,   239,   241,   242,
   243,   244,   245,   247,   248,    94,   nil,   136,   137,   138,
   144,   148,   149,   150,   151,   152,   180,   181,   nil,   nil,
   nil,   nil,   153,   154,    94,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   186,   187,   nil,   122,
   136,   137,   138,   144,   148,   149,   150,   151,   152,   180,
   181,   184,   nil,   nil,   nil,   153,   154,   122,   nil,   136,
   137,   138,   144,   148,   149,   150,   151,   152,   180,   181,
   187,   nil,   nil,    94,   153,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   187,
   nil,    94,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,   137,
   138,   144,   148,   149,   150,   151,   152,   180,   181,   nil,
   nil,   nil,   nil,   153,   154,   nil,   136,   137,   138,   144,
   148,   149,   150,   151,   152,   180,   181,   186,   187,   nil,
   nil,   153,   154,   nil,   nil,   nil,    74,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   187,    32,    51,    45,
    65,    69,    73,    71,   nil,    55,   nil,    28,    29,    31,
   nil,    34,   nil,   nil,   nil,    36,    39,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   122,   nil,   nil,   nil,   368,    19,   nil,   nil,   nil,    56,
    62,    32,    51,    45,    65,    69,    73,    71,   nil,    55,
   nil,    28,    29,    31,   nil,    34,   nil,   nil,   nil,    36,
    39,    42,   nil,   nil,    94,   nil,   nil,   nil,   nil,   nil,
   238,    47,   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,
    53,   nil,    54,   234,   233,   nil,   nil,   nil,   235,   239,
   241,   242,   243,   244,   245,   247,   248,   nil,   644,   584,
   nil,   nil,   nil,    56,    62,    32,    51,    45,    65,    69,
    73,    71,   nil,    55,   602,    28,    29,    31,   nil,    34,
   nil,   nil,   nil,    36,    39,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   720,   584,   nil,   nil,   nil,    56,    62,    32,
    51,    45,    65,    69,    73,    71,   nil,    55,   nil,    28,
    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,    42,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,    19,
    54,   nil,   nil,   nil,   nil,    32,    51,    45,    65,    69,
    73,    71,   nil,    55,   nil,    28,    29,    31,   nil,    34,
   nil,    56,    62,    36,    39,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,    19,    54,   nil,   nil,   nil,
   nil,    32,    51,    45,    65,    69,    73,    71,   nil,    55,
   nil,    28,    29,    31,   nil,    34,   nil,    56,    62,    36,
    39,    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    53,   584,    54,   nil,   nil,   nil,   nil,    32,    51,    45,
    65,    69,    73,    71,   nil,    55,   602,    28,    29,    31,
   nil,    34,   nil,    56,    62,    36,    39,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   122,   nil,   nil,   nil,    53,   584,    54,   nil,
   nil,   nil,   nil,    32,    51,    45,    65,    69,    73,    71,
   nil,    55,   nil,    28,    29,    31,   nil,    34,   nil,    56,
    62,    36,    39,    42,   nil,   nil,    94,   122,   nil,   nil,
   nil,   nil,   238,    47,   nil,   nil,   nil,   240,   nil,   nil,
   nil,   nil,    53,   nil,    54,   234,   233,   nil,   nil,   nil,
   235,   239,   241,   242,   243,   244,   245,   247,   248,   nil,
   122,    94,   nil,   nil,   nil,    56,    62,   238,   nil,   nil,
   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   234,   233,   nil,   nil,   nil,   235,   239,   241,   242,   243,
   244,   245,   247,   248,    94,   122,   nil,   nil,   nil,   nil,
   238,   nil,   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   234,   233,   nil,   nil,   nil,   235,   239,
   241,   242,   243,   244,   245,   247,   248,   nil,   122,    94,
   nil,   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,
   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,   233,
   nil,   nil,   nil,   235,   239,   241,   242,   243,   244,   245,
   247,   248,    94,   122,   nil,   nil,   nil,   nil,   238,   nil,
   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   234,   233,   nil,   nil,   nil,   235,   239,   241,   242,
   243,   244,   245,   247,   248,   nil,   122,    94,   nil,   nil,
   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,   240,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   233,   nil,   nil,
   nil,   235,   239,   241,   242,   243,   244,   245,   247,   248,
    94,   122,   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,
   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,
   233,   nil,   nil,   nil,   235,   239,   241,   242,   243,   244,
   245,   247,   248,   nil,   122,    94,   nil,   nil,   nil,   nil,
   nil,   238,   nil,   nil,   nil,   nil,   240,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   234,   233,   nil,   nil,   nil,   235,
   239,   241,   242,   243,   244,   245,   247,   248,    94,   122,
   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,   240,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,   233,   nil,
   nil,   nil,   235,   239,   241,   242,   243,   244,   245,   247,
   248,   nil,   122,    94,   nil,   nil,   nil,   nil,   nil,   238,
   nil,   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   234,   233,   nil,   nil,   nil,   235,   239,   241,
   242,   243,   244,   245,   247,   248,    94,   122,   nil,   nil,
   nil,   nil,   238,   nil,   nil,   nil,   nil,   240,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   234,   233,   nil,   nil,   nil,
   235,   239,   241,   242,   243,   244,   245,   247,   248,   nil,
   122,    94,   nil,   nil,   nil,   nil,   nil,   238,   nil,   nil,
   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   234,   233,   nil,   nil,   nil,   235,   239,   241,   242,   243,
   244,   245,   247,   248,    94,   122,   nil,   nil,   nil,   nil,
   238,   nil,   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   234,   233,   nil,   nil,   nil,   235,   239,
   241,   242,   243,   244,   245,   247,   248,   nil,   122,    94,
   nil,   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,
   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,   233,
   nil,   nil,   nil,   235,   239,   241,   242,   243,   244,   245,
   247,   248,    94,   122,   nil,   nil,   nil,   nil,   238,   nil,
   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   234,   233,   nil,   nil,   nil,   235,   239,   241,   242,
   243,   244,   245,   247,   248,   nil,   122,    94,   nil,   nil,
   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,   240,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   233,   nil,   nil,
   nil,   235,   239,   241,   242,   243,   244,   245,   247,   248,
    94,   nil,   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,
   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,
   233,   nil,   nil,   nil,   235,   239,   241,   242,   243,   244,
   245,   247,   248 ]

racc_action_check = [
   119,   287,   622,   119,   542,   534,   357,   109,   109,   320,
   625,   119,   119,   111,   119,   119,   415,   115,   415,    19,
   292,   119,    53,   119,     3,   630,   670,   293,   672,   287,
   287,   439,   495,   706,   111,     4,   111,   119,   115,   495,
   115,   413,   542,   320,   413,   320,   707,   253,   625,   253,
     5,   622,   622,    19,   292,   293,    53,   253,   253,   253,
   253,   293,   253,   630,   670,   439,   672,   415,   415,   109,
   109,   706,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   253,   707,     6,   119,   119,   119,   357,
   357,   287,   287,   253,   354,   253,   354,   534,   534,   292,
     7,   119,   119,     8,   354,   354,   293,   354,   354,     9,
   439,    54,   250,   284,    96,   285,   253,   253,   253,   253,
   253,   253,   253,   253,   253,   253,   253,   253,   253,   286,
   354,    47,    47,   253,   253,    96,   275,   253,   253,   253,
   253,   277,   294,   277,   295,    54,   250,   284,   253,   285,
   305,   277,   277,   277,   277,   364,   277,   275,    10,   275,
   364,    11,   310,   286,    12,   354,   354,   354,   354,   354,
   354,   354,   354,   354,   354,   354,   294,   277,   295,   354,
   354,   354,   277,    13,   305,   277,   329,   277,   329,   277,
   310,   310,   113,   113,   354,   354,   310,   310,   113,   113,
   138,   138,    97,   276,   306,   307,   308,   309,    14,   316,
   277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
   277,   277,   277,    97,   276,   363,   276,   277,   277,   296,
    15,   277,   277,   277,   277,   322,   363,   322,   306,   307,
   308,   309,   277,   316,   321,   322,   322,   322,   322,    98,
   322,   467,   310,   310,   113,   113,    16,   296,   296,   363,
   296,   296,   296,   296,   296,   330,   531,   330,   551,   552,
    98,   322,   148,   148,   322,   322,   322,   108,   321,   108,
   108,   322,    17,   322,   553,   467,    29,    29,    29,   554,
   231,   229,   229,   229,   193,   193,   363,   363,   363,   363,
   531,   363,   551,   552,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,    18,   553,   296,
   296,   322,   322,   554,   231,   322,   322,   322,   322,   333,
   231,   333,   558,   565,    20,   231,   322,   602,   619,   333,
   333,   333,   333,    23,   333,   668,   669,   682,   683,   231,
   231,   231,   231,   231,   231,   231,   231,   684,   704,   709,
   740,   525,   525,   525,    24,   333,   558,   565,   333,   333,
   333,   602,   619,   207,   207,   333,   367,   333,   367,   668,
   669,   682,   683,   526,   526,   526,   367,   367,    25,   367,
   367,   684,   704,   709,   740,   549,    26,   549,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
   333,   550,   367,   550,    27,   333,   333,   217,   217,   333,
   333,   333,   333,    28,    56,   220,   220,   227,   227,    30,
   333,    31,    56,    56,    33,    56,    56,   372,   372,   372,
   372,   372,   372,   372,   372,   372,   372,   367,   367,   367,
   367,   367,   367,   367,   367,   367,   367,   367,    56,   228,
   228,   367,   367,   367,   112,   112,    34,   112,   112,   112,
   112,   112,   426,   426,   490,   490,   367,   367,    35,    95,
   522,   522,    36,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,   523,   523,    39,    56,    56,    56,
   524,   524,   263,    95,   641,   641,   735,   735,    40,    95,
    41,    42,    56,    56,    95,    45,   112,   112,    46,    51,
    52,    62,    95,    95,    63,    64,    66,    95,    95,    95,
    95,    95,    95,    95,    95,    95,   263,    67,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    99,
    68,    70,    71,    95,    95,    72,    73,    99,    99,    99,
    99,    74,    99,    92,    93,    94,   100,    95,    95,   103,
   104,   263,   263,   263,   263,   263,   263,   263,   263,   263,
   263,   263,   114,    99,   117,   118,   263,   263,   121,   123,
   124,   125,   153,    99,   154,    99,   157,   182,   183,   184,
   185,   263,   186,   190,   192,   195,   197,   205,   209,   210,
   211,   212,   213,   214,   215,   216,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,   219,
   224,   238,   225,    99,    99,   226,   107,    99,    99,    99,
    99,   255,   256,   257,   107,   107,   107,   107,    99,   107,
   258,   259,   260,   261,   262,   264,   266,   280,   281,   282,
   283,   289,   290,   291,   298,   238,   299,   300,    55,   301,
   107,   238,   302,   303,   304,   107,   238,   312,   107,   313,
   107,   314,   107,   315,   238,   238,   318,   325,   326,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   336,   340,
   343,   347,    55,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   356,   362,   371,   382,
   107,   107,   384,   116,   107,   107,   107,   107,   398,   399,
   412,   116,   116,   116,   116,   107,   116,    55,    55,    55,
    55,    55,    55,    55,    55,    55,   416,   424,   425,   428,
   429,   430,    55,    55,   436,   218,   440,   116,   441,   443,
   116,   116,   116,   454,   455,   456,    55,   116,   457,   116,
   458,   468,   471,   476,   477,   484,   485,   486,   487,   491,
   492,   498,   500,   501,   503,   504,   511,   516,   520,   218,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   521,   532,   537,   539,   116,   116,   540,
   120,   116,   116,   116,   116,   556,   564,   566,   120,   120,
   120,   120,   116,   120,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   567,   573,   584,   587,   588,   589,   218,
   218,   590,   591,   592,   120,   593,   594,   120,   120,   120,
   595,   596,   597,   218,   120,   598,   120,   191,   599,   600,
   601,   605,   606,   613,   614,   191,   191,   615,   191,   191,
   616,   617,   620,   623,   265,   624,   629,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   631,   191,   632,   633,   120,   120,   640,   642,   120,   120,
   120,   120,   661,   663,   666,   327,   677,   678,   265,   120,
   679,   681,   691,   327,   327,   692,   327,   327,   693,   694,
   695,   696,   697,   698,   699,   700,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   701,   702,   327,
   191,   191,   191,   265,   265,   265,   265,   265,   265,   265,
   265,   265,   265,   265,   703,   191,   191,   341,   265,   265,
   328,   711,   716,   719,   742,   265,   nil,   nil,   328,   328,
   nil,   328,   328,   265,   327,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   nil,   nil,   nil,   327,   327,
   327,   341,   nil,   351,   328,   nil,   nil,   341,   nil,   nil,
   nil,   nil,   341,   327,   327,   351,   nil,   nil,   nil,   nil,
   341,   341,   nil,   nil,   nil,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   nil,   nil,   nil,   351,   nil,   328,
   328,   328,   328,   328,   328,   328,   328,   328,   328,   328,
   352,   nil,   nil,   328,   328,   328,   nil,   nil,   nil,   nil,
   nil,   nil,   352,   nil,   nil,   nil,   nil,   nil,   328,   328,
   nil,   nil,   351,   351,   351,   351,   351,   351,   351,   351,
   351,   351,   351,   359,   352,   nil,   nil,   351,   351,   nil,
   nil,   359,   359,   nil,   359,   359,   nil,   nil,   nil,   nil,
   nil,   351,   351,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   359,   nil,   352,
   352,   352,   352,   352,   352,   352,   352,   352,   352,   352,
   nil,   nil,   nil,   nil,   352,   352,   nil,   nil,   385,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   352,   352,
   385,   nil,   359,   359,   359,   359,   359,   359,   359,   359,
   359,   359,   359,   nil,   359,   359,   359,   359,   359,   nil,
   nil,   411,   385,   nil,   nil,   nil,   nil,   nil,   385,   nil,
   nil,   359,   359,   385,   nil,   nil,   nil,   nil,   nil,   nil,
   544,   385,   385,   nil,   nil,   nil,   385,   385,   385,   385,
   385,   385,   385,   385,   385,   411,   nil,   385,   385,   385,
   385,   385,   385,   385,   385,   385,   385,   385,   nil,   nil,
   nil,   nil,   385,   385,   544,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   385,   385,   nil,   576,
   411,   411,   411,   411,   411,   411,   411,   411,   411,   411,
   411,   576,   nil,   nil,   nil,   411,   411,   627,   nil,   544,
   544,   544,   544,   544,   544,   544,   544,   544,   544,   544,
   411,   nil,   nil,   576,   544,   544,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   544,
   nil,   627,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   576,   576,
   576,   576,   576,   576,   576,   576,   576,   576,   576,   nil,
   nil,   nil,   nil,   576,   576,   nil,   627,   627,   627,   627,
   627,   627,   627,   627,   627,   627,   627,   576,   576,   nil,
   nil,   627,   627,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil,     1,   nil,   nil,   nil,   nil,   627,     1,     1,     1,
     1,     1,     1,     1,   nil,     1,   nil,     1,     1,     1,
   nil,     1,   nil,   nil,   nil,     1,     1,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   342,   nil,   nil,   nil,   203,   203,   nil,   nil,   nil,     1,
     1,   203,   203,   203,   203,   203,   203,   203,   nil,   203,
   nil,   203,   203,   203,   nil,   203,   nil,   nil,   nil,   203,
   203,   203,   nil,   nil,   342,   nil,   nil,   nil,   nil,   nil,
   342,   203,   nil,   nil,   nil,   342,   nil,   nil,   nil,   nil,
   203,   nil,   203,   342,   342,   nil,   nil,   nil,   342,   342,
   342,   342,   342,   342,   342,   342,   342,   nil,   585,   585,
   nil,   nil,   nil,   203,   203,   585,   585,   585,   585,   585,
   585,   585,   nil,   585,   585,   585,   585,   585,   nil,   585,
   nil,   nil,   nil,   585,   585,   585,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   585,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   585,   nil,   585,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   689,   689,   nil,   nil,   nil,   585,   585,   689,
   689,   689,   689,   689,   689,   689,   nil,   689,   nil,   689,
   689,   689,   nil,   689,   nil,   nil,   nil,   689,   689,   689,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   689,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   689,     0,
   689,   nil,   nil,   nil,   nil,     0,     0,     0,     0,     0,
     0,     0,   nil,     0,   nil,     0,     0,     0,   nil,     0,
   nil,   689,   689,     0,     0,     0,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     0,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     0,    91,     0,   nil,   nil,   nil,
   nil,    91,    91,    91,    91,    91,    91,    91,   nil,    91,
   nil,    91,    91,    91,   nil,    91,   nil,     0,     0,    91,
    91,    91,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    91,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    91,   514,    91,   nil,   nil,   nil,   nil,   514,   514,   514,
   514,   514,   514,   514,   nil,   514,   514,   514,   514,   514,
   nil,   514,   nil,    91,    91,   514,   514,   514,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   514,   nil,   nil,
   nil,   nil,   353,   nil,   nil,   nil,   514,   660,   514,   nil,
   nil,   nil,   nil,   660,   660,   660,   660,   660,   660,   660,
   nil,   660,   nil,   660,   660,   660,   nil,   660,   nil,   514,
   514,   660,   660,   660,   nil,   nil,   353,   361,   nil,   nil,
   nil,   nil,   353,   660,   nil,   nil,   nil,   353,   nil,   nil,
   nil,   nil,   660,   nil,   660,   353,   353,   nil,   nil,   nil,
   353,   353,   353,   353,   353,   353,   353,   353,   353,   nil,
   386,   361,   nil,   nil,   nil,   660,   660,   361,   nil,   nil,
   nil,   nil,   361,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   361,   361,   nil,   nil,   nil,   361,   361,   361,   361,   361,
   361,   361,   361,   361,   386,   387,   nil,   nil,   nil,   nil,
   386,   nil,   nil,   nil,   nil,   386,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   386,   386,   nil,   nil,   nil,   386,   386,
   386,   386,   386,   386,   386,   386,   386,   nil,   388,   387,
   nil,   nil,   nil,   nil,   nil,   387,   nil,   nil,   nil,   nil,
   387,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   387,   387,
   nil,   nil,   nil,   387,   387,   387,   387,   387,   387,   387,
   387,   387,   388,   389,   nil,   nil,   nil,   nil,   388,   nil,
   nil,   nil,   nil,   388,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   388,   388,   nil,   nil,   nil,   388,   388,   388,   388,
   388,   388,   388,   388,   388,   nil,   390,   389,   nil,   nil,
   nil,   nil,   nil,   389,   nil,   nil,   nil,   nil,   389,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   389,   389,   nil,   nil,
   nil,   389,   389,   389,   389,   389,   389,   389,   389,   389,
   390,   391,   nil,   nil,   nil,   nil,   390,   nil,   nil,   nil,
   nil,   390,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   390,
   390,   nil,   nil,   nil,   390,   390,   390,   390,   390,   390,
   390,   390,   390,   nil,   392,   391,   nil,   nil,   nil,   nil,
   nil,   391,   nil,   nil,   nil,   nil,   391,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   391,   391,   nil,   nil,   nil,   391,
   391,   391,   391,   391,   391,   391,   391,   391,   392,   393,
   nil,   nil,   nil,   nil,   392,   nil,   nil,   nil,   nil,   392,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   392,   392,   nil,
   nil,   nil,   392,   392,   392,   392,   392,   392,   392,   392,
   392,   nil,   394,   393,   nil,   nil,   nil,   nil,   nil,   393,
   nil,   nil,   nil,   nil,   393,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   393,   393,   nil,   nil,   nil,   393,   393,   393,
   393,   393,   393,   393,   393,   393,   394,   395,   nil,   nil,
   nil,   nil,   394,   nil,   nil,   nil,   nil,   394,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   394,   394,   nil,   nil,   nil,
   394,   394,   394,   394,   394,   394,   394,   394,   394,   nil,
   481,   395,   nil,   nil,   nil,   nil,   nil,   395,   nil,   nil,
   nil,   nil,   395,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   395,   395,   nil,   nil,   nil,   395,   395,   395,   395,   395,
   395,   395,   395,   395,   481,   489,   nil,   nil,   nil,   nil,
   481,   nil,   nil,   nil,   nil,   481,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   481,   481,   nil,   nil,   nil,   481,   481,
   481,   481,   481,   481,   481,   481,   481,   nil,   574,   489,
   nil,   nil,   nil,   nil,   nil,   489,   nil,   nil,   nil,   nil,
   489,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   489,   489,
   nil,   nil,   nil,   489,   489,   489,   489,   489,   489,   489,
   489,   489,   574,   577,   nil,   nil,   nil,   nil,   574,   nil,
   nil,   nil,   nil,   574,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   574,   574,   nil,   nil,   nil,   574,   574,   574,   574,
   574,   574,   574,   574,   574,   nil,   686,   577,   nil,   nil,
   nil,   nil,   nil,   577,   nil,   nil,   nil,   nil,   577,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   577,   577,   nil,   nil,
   nil,   577,   577,   577,   577,   577,   577,   577,   577,   577,
   686,   nil,   nil,   nil,   nil,   nil,   686,   nil,   nil,   nil,
   nil,   686,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   686,
   686,   nil,   nil,   nil,   686,   686,   686,   686,   686,   686,
   686,   686,   686 ]

racc_action_pointer = [
  1584,  1346,   nil,    22,    33,    48,    83,    98,   101,   107,
   156,   159,   162,   181,   206,   228,   254,   280,   314,    13,
   327,   nil,   nil,   337,   358,   382,   393,   411,   412,   275,
   423,   420,   nil,   431,   460,   475,   476,   nil,   nil,   500,
   515,   517,   515,   nil,   nil,   519,   525,   119,   nil,   nil,
   nil,   523,   527,    16,   105,   672,   418,   nil,   nil,   nil,
   nil,   nil,   525,   528,   532,   nil,   530,   544,   474,   nil,
   558,   556,   562,   560,   571,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1630,   570,   534,   569,   473,   111,   199,   246,   553,
   572,   nil,   nil,   573,   574,   nil,   nil,   640,   253,   -25,
   nil,    10,   432,   160,   568,    14,   727,   588,   589,    -3,
   814,   558,   nil,   548,   549,   595,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   124,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   195,   nil,
   nil,   nil,   nil,   595,   597,   nil,   nil,   600,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   601,   602,   602,   603,   605,   nil,   nil,   nil,
   610,   861,   528,   207,   nil,   569,   nil,   610,   nil,   nil,
   nil,   nil,   nil,  1410,   nil,   611,   nil,   365,   nil,   612,
   613,   614,   615,   616,   617,   618,   619,   411,   759,   633,
   417,   nil,   nil,   nil,   586,   587,   589,   370,   400,   230,
   nil,   284,   nil,   nil,   nil,   nil,   nil,   nil,   635,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   106,   nil,   nil,    43,   nil,   649,   650,   651,   658,   659,
   660,   661,   569,   506,   619,   878,   660,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   133,   200,   137,   nil,   nil,
   665,   666,   663,   664,   107,   109,   123,    -3,   nil,   669,
   670,   671,    14,    21,   136,   138,   225,   nil,   672,   674,
   675,   677,   680,   681,   682,   144,   198,   199,   200,   201,
   158,   nil,   685,   687,   689,   691,   203,   nil,   670,   nil,
     3,   238,   231,   nil,   nil,   695,   696,   909,   964,   162,
   241,   nil,   nil,   325,   nil,   nil,   655,   nil,   nil,   nil,
   632,   961,  1404,   701,   nil,   nil,   nil,   619,   nil,   nil,
   nil,   997,  1044,  1716,    90,   nil,   720,     2,   nil,  1077,
   nil,  1751,   703,   219,   151,   nil,   nil,   372,   nil,   nil,
   nil,   725,   427,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   723,   nil,   726,  1132,  1784,  1819,  1852,  1887,
  1920,  1955,  1988,  2023,  2056,  2091,   nil,   nil,   691,   730,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1165,   734,   -59,   nil,   -31,   750,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   711,   712,   446,   nil,   750,   733,
   733,   nil,   nil,   nil,   nil,   nil,   758,   nil,   nil,    25,
   760,   742,   nil,   760,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   767,   768,   769,   772,   774,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,   772,   nil,
   nil,   773,   nil,   nil,   nil,   nil,   777,   778,   nil,   nil,
   nil,  2124,   nil,   nil,   777,   778,   781,   696,   nil,  2159,
   466,   780,   781,   nil,   nil,    30,   nil,   nil,   789,   nil,
   786,   769,   nil,   717,   748,   nil,   nil,   nil,   nil,   nil,
   nil,   790,   nil,   nil,  1676,   nil,   791,   nil,   nil,   nil,
   743,   757,   423,   445,   451,   300,   322,   nil,   nil,   nil,
   nil,   260,   808,   nil,    -4,   nil,   nil,   712,   nil,   770,
   773,   nil,    -5,   nil,  1184,   nil,   nil,   nil,   nil,   348,
   364,   262,   263,   278,   283,   nil,   819,   nil,   326,   nil,
   nil,   nil,   nil,   nil,   817,   327,   818,   834,   nil,   nil,
   nil,   nil,   nil,   751,  2192,   nil,  1233,  2227,   nil,   nil,
   nil,   nil,   nil,   nil,   839,  1474,   nil,   844,   845,   846,
   849,   850,   851,   853,   854,   858,   859,   860,   863,   866,
   867,   867,   331,   nil,   nil,   771,   863,   nil,   nil,   nil,
   nil,   nil,   nil,   771,   773,   871,   834,   835,   nil,   332,
   831,   nil,   -47,   877,   785,     1,   nil,  1251,   nil,   786,
    16,   873,   874,   875,   nil,   nil,   nil,   nil,   nil,   nil,
   898,   506,   899,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1722,   905,   nil,   907,   nil,   nil,   905,   nil,   339,   340,
    17,   nil,    19,   nil,   nil,   nil,   nil,   816,   868,   914,
   nil,   821,   341,   342,   351,   nil,  2260,   nil,   nil,  1538,
   nil,   920,   923,   926,   927,   928,   929,   930,   931,   932,
   933,   945,   946,   962,   352,   nil,    24,    37,   nil,   353,
   nil,   920,   nil,   nil,   nil,   nil,   944,   nil,   nil,   965,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   508,   nil,   nil,   nil,   nil,
   354,   nil,   968,   nil,   nil ]

racc_action_default = [
   -18,  -438,    -1,  -438,  -438,  -438,  -438,  -438,  -438,  -438,
  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,
  -438,   -76,   -77,  -438,  -438,  -438,  -438,  -438,  -438,  -438,
  -438,  -438,   -93,  -438,  -438,  -438,  -438,  -132,  -133,  -438,
  -438,  -438,  -438,  -176,  -177,  -438,  -438,  -438,  -187,  -188,
  -189,  -438,  -438,  -438,  -438,  -438,  -438,  -278,  -279,  -280,
  -281,  -282,  -438,  -438,  -438,  -340,  -438,  -438,  -438,  -348,
  -438,  -438,  -438,  -438,  -438,    -2,    -3,    -4,    -5,    -6,
    -7,    -8,    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,
   -17,   -18,  -173,   -24,  -438,  -438,   -78,   -79,   -80,  -103,
  -438,   -89,   -90,  -438,  -438,   -91,   -92,  -103,  -438,  -438,
  -126,  -134,  -151,  -161,  -154,  -179,  -103,  -438,  -438,  -191,
  -103,  -172,  -173,  -438,  -438,  -438,  -231,  -232,  -233,  -234,
  -235,  -236,  -237,  -238,  -239,  -240,  -314,  -315,  -323,  -317,
  -318,  -319,  -320,  -321,  -322,  -325,  -326,  -327,  -438,  -331,
  -332,  -333,  -334,  -374,  -376,  -436,  -277,  -438,  -285,  -286,
  -287,  -288,  -289,  -290,  -291,  -292,  -293,  -294,  -295,  -296,
  -297,  -298,  -299,  -300,  -301,  -302,  -303,  -304,  -305,  -306,
  -335,  -336,  -438,  -438,  -438,  -438,  -438,  -437,  -283,  -311,
  -337,  -438,  -344,  -438,  -346,  -438,  -363,  -438,  -364,  -399,
  -402,  -400,   745,  -438,   -21,  -438,  -174,  -438,   -25,  -438,
  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -299,
  -438,   -71,   -73,   -74,  -241,  -242,  -244,  -246,  -248,  -251,
  -254,  -438,  -259,  -260,  -261,  -262,  -263,  -264,  -438,  -266,
  -267,  -268,  -269,  -270,  -271,  -272,  -273,  -274,  -275,   -83,
  -438,   -85,   -87,  -438,   -94,  -438,  -438,  -438,  -438,  -438,
  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -412,  -413,  -414,
  -431,  -432,  -433,  -434,   -82,  -178,  -190,  -438,  -120,  -122,
  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -127,  -438,
  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -142,  -438,  -438,
  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,
  -438,  -155,  -438,  -438,  -438,  -438,  -438,  -185,  -203,  -204,
  -438,  -438,  -438,  -200,  -211,  -438,  -438,  -438,  -438,  -184,
  -197,  -192,  -198,  -438,  -228,  -229,  -438,  -316,  -324,  -328,
  -329,  -438,  -438,  -284,  -307,  -309,  -310,  -312,  -313,  -339,
  -347,  -438,  -438,  -438,  -438,  -341,  -438,  -438,  -355,  -438,
  -358,  -438,  -438,  -438,  -438,  -366,  -368,  -438,   -19,   -22,
  -175,  -438,  -438,   -27,   -28,   -29,   -30,   -31,   -32,   -33,
   -34,   -35,  -438,   -37,  -438,  -438,  -438,  -438,  -438,  -438,
  -438,  -438,  -438,  -438,  -438,  -438,  -258,  -263,  -438,  -104,
  -105,  -107,   -81,   -95,   -96,   -97,   -98,   -99,  -100,  -101,
  -102,  -438,  -438,  -411,  -407,  -438,  -438,  -406,  -181,  -194,
  -108,  -121,  -123,  -124,  -438,  -438,  -438,  -117,  -118,  -438,
  -116,  -125,  -128,  -129,  -130,  -131,  -438,  -170,  -171,  -438,
  -438,  -137,  -140,  -141,  -138,  -135,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -438,  -438,  -438,  -438,  -438,  -152,
  -156,  -157,  -158,  -159,  -160,  -153,  -202,  -438,  -206,  -208,
  -210,  -207,  -180,  -201,  -212,  -213,  -438,  -438,  -183,  -196,
  -193,  -438,  -330,  -276,  -438,  -438,  -438,  -377,  -378,  -438,
  -438,  -438,  -438,  -338,  -342,  -438,  -345,  -356,  -438,  -359,
  -438,  -438,  -361,  -323,  -438,  -350,  -351,  -352,  -353,  -354,
  -365,  -438,  -401,  -403,  -438,   -26,  -438,   -36,   -70,   -72,
  -243,  -245,  -247,  -249,  -250,  -252,  -253,  -255,  -256,  -257,
  -265,  -438,  -438,  -312,  -393,  -383,  -404,  -409,  -410,  -438,
  -438,  -415,  -438,  -417,  -438,  -420,  -421,  -422,  -405,  -438,
  -438,  -438,  -438,  -438,  -438,  -162,  -438,  -164,  -438,  -165,
  -166,  -167,  -168,  -169,  -205,  -438,  -214,  -215,  -230,  -373,
  -375,  -308,  -379,  -438,  -438,  -370,  -438,  -438,  -343,  -357,
  -362,  -360,  -349,  -367,  -438,  -438,   -38,  -438,  -438,  -438,
  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,
  -438,  -438,  -438,  -106,  -381,  -397,  -396,  -382,  -384,  -385,
  -386,  -387,  -388,  -391,  -392,  -438,  -438,  -438,  -408,  -438,
  -438,  -416,  -438,  -438,  -216,  -438,  -224,  -438,  -227,  -220,
  -438,  -438,  -114,  -113,  -115,  -119,  -163,  -136,  -209,  -380,
  -438,  -438,  -438,   -20,   -23,   -39,   -40,   -41,   -42,   -43,
   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,
  -438,  -438,  -395,  -438,  -389,  -390,  -394,  -397,  -438,  -438,
  -438,  -426,  -438,  -429,  -418,  -419,  -218,  -217,  -438,  -438,
  -222,  -221,  -438,  -438,  -438,  -369,  -438,  -372,  -435,  -438,
   -55,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,  -438,
  -438,  -438,  -438,  -438,  -438,  -398,  -438,  -438,  -423,  -438,
  -428,  -438,  -219,  -225,  -226,  -223,  -110,  -111,  -112,  -438,
   -54,   -56,   -57,   -58,   -59,   -60,   -61,   -62,   -63,   -64,
   -65,   -66,   -67,   -68,   -69,  -438,  -424,  -425,  -427,  -430,
  -438,  -371,  -438,  -109,   -75 ]

racc_goto_table = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
   223,   222,   365,   221,   131,   270,   412,   484,   485,   343,
   444,   208,   126,   270,   127,   129,   543,   278,   219,   492,
   298,   312,   270,   429,     2,    75,   270,   132,   399,   291,
   590,   317,   304,   315,   314,   332,   311,   176,   299,   313,
   297,   280,   288,   157,   123,   124,   134,   162,   271,   488,
   538,   358,   606,   468,   125,   614,   271,   591,   355,   534,
   613,   177,   586,   537,   670,   271,   699,   592,   571,   271,
   322,   272,     1,   443,   333,   249,   251,   252,   203,   272,
   690,     3,   580,     4,   178,     5,   236,    16,   272,    17,
   273,   207,   272,   585,   182,   699,   128,   130,   273,   471,
   176,   590,   135,   183,   436,   440,   331,   273,   473,   721,
   162,   273,    93,   706,   707,   204,   689,   593,   634,   473,
   527,   528,   529,   220,   177,   438,   438,   253,   591,   625,
   630,   523,   524,   645,   664,   666,   525,   526,   592,   603,
   665,   277,   426,   398,   287,   296,   441,   178,   310,   735,
   466,   638,   254,   713,   532,   573,   520,   182,   521,   270,
   279,   522,   396,   156,   188,   354,   183,   131,   357,   270,
   194,   270,   176,   504,   618,   126,   694,   127,   129,   605,
   498,   499,   162,   270,   196,   364,   487,   421,   593,   572,
   132,   418,   419,     3,   604,     4,   177,     5,   594,    16,
   564,    17,   271,   695,   298,   694,   607,   291,   495,   134,
   535,   280,   271,   696,   271,   497,   304,   382,   312,   178,
   432,   494,   299,   674,   446,   272,   271,   369,   270,   182,
   315,   314,   695,   460,   513,   272,   313,   272,   183,   270,
   640,   401,   696,   642,   273,   478,   479,   717,   718,   272,
   597,   556,   608,   609,   273,   662,   273,   490,   491,   128,
   130,   610,   667,   697,   611,   135,   501,   598,   273,   594,
   675,   271,   438,   637,   676,   427,   401,   430,   601,   680,
   612,   199,   271,   437,   437,   442,   401,   623,   515,   631,
   223,   222,   697,   519,   272,   516,   454,   455,   456,   457,
   458,   367,   413,   536,   743,   272,   403,   465,   176,   176,
   705,   470,   401,   273,   476,   477,   583,   270,   162,   162,
   505,   597,   506,   507,   273,   416,   714,   712,   566,   567,
   279,   715,   177,   177,   414,   176,   443,   542,   598,   672,
   176,   nil,   162,   162,   698,   162,   500,   nil,   176,   601,
   162,   nil,   719,   nil,   509,   178,   178,   nil,   162,   177,
   271,   nil,   nil,   nil,   177,   182,   182,   nil,   nil,   nil,
   679,   nil,   177,   698,   183,   183,   236,   nil,   nil,   nil,
   nil,   nil,   178,   272,   nil,   nil,   568,   178,   nil,   nil,
   nil,   508,   182,   nil,   nil,   178,   700,   182,   nil,   nil,
   nil,   183,   273,   nil,   nil,   182,   183,   nil,   nil,   nil,
   nil,   nil,   nil,   701,   183,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   601,   700,   nil,   nil,   nil,   nil,
   437,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   701,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   270,   nil,   nil,   601,   nil,   nil,   nil,   nil,   470,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   641,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   271,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   587,   nil,   588,   nil,   589,   nil,
   599,   nil,   600,   nil,   nil,   nil,   272,   nil,   nil,   nil,
   nil,   nil,   401,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   270,   nil,   273,   nil,   nil,   nil,   nil,
   nil,   nil,   401,   632,   633,   635,   nil,   nil,   nil,   401,
   nil,   nil,   nil,   nil,   nil,   nil,   470,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   587,   271,   588,   nil,   589,
   nil,   599,   nil,   600,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   661,   nil,   nil,   nil,   nil,   nil,   272,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   671,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   273,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   691,   nil,   692,   nil,   693,   nil,   702,   nil,   703,   671,
   671,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   716,   635,   635,   nil,   nil,   nil,   691,
   nil,   692,   nil,   693,   nil,   702,   nil,   703,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   671,   nil,   nil,   nil,   nil,
   738,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   635 ]

racc_goto_check = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
    35,    34,   168,    33,   110,   134,   103,   125,   125,    98,
    71,    24,   105,   134,   106,   108,   193,    58,    26,   125,
    64,    64,   134,    56,     2,     2,   134,   111,    51,    49,
     6,    86,    49,    49,    76,    86,    79,   127,    65,    65,
    72,    59,    63,    90,    36,    36,    36,    36,   110,   170,
   191,   161,   181,    95,    25,   180,   110,     7,   154,   104,
   179,   129,    27,   100,    37,   110,    28,     8,   140,   110,
    85,   111,     1,    51,    85,    46,    46,    46,    19,   111,
    31,     3,   140,     4,   131,     5,    36,    16,   111,    17,
    36,    21,   111,    22,   151,    28,   107,   109,    36,    51,
   127,     6,   113,   155,    80,    80,    90,    36,    92,    31,
    36,    36,    23,    37,    37,     2,    30,     9,    57,    92,
   120,   120,   120,    32,   129,    81,    81,    44,     7,    99,
    99,   118,   118,    27,   180,   181,   119,   119,     8,    52,
   179,    54,    55,    35,    62,    69,    70,   131,    78,    37,
    94,    96,    48,   101,   103,   125,   115,   151,   116,   134,
    48,   117,   122,   126,   132,   153,   155,   110,   157,   134,
   159,   134,   127,   160,   191,   105,     6,   106,   108,   104,
   163,   164,    36,   134,   166,   167,   169,    58,     9,   170,
   111,    86,    86,     3,   171,     4,   129,     5,    10,    16,
    95,    17,   110,     7,    64,     6,   172,    49,    98,    36,
   173,    59,   110,     8,   110,   161,    49,    25,    64,   131,
    63,   154,    65,   193,    72,   111,   110,     2,   134,   151,
    49,    76,     7,    79,   154,   111,    65,   111,   155,   134,
   125,    36,     8,   125,    36,    86,    86,    57,    57,   111,
    14,    80,   174,   175,    36,   100,    36,    34,    34,   107,
   109,   176,   104,     9,   177,   113,    35,    15,    36,    10,
   104,   110,    81,    71,   100,    36,    36,    36,    18,   100,
   178,   183,   110,    36,    36,    36,    36,   103,    24,    56,
    35,    34,     9,    33,   111,    26,    36,    36,    36,    36,
    36,   184,   186,   187,    57,   111,    48,    36,   127,   127,
   104,    36,    36,    36,    90,    90,   168,   134,    36,    36,
   105,    14,   106,   108,    36,   189,   104,   100,    98,    98,
    48,   100,   129,   129,   190,   127,    51,   192,    15,   195,
   127,   nil,    36,    36,    10,    36,    90,   nil,   127,    18,
    36,   nil,   125,   nil,    36,   131,   131,   nil,    36,   129,
   110,   nil,   nil,   nil,   129,   151,   151,   nil,   nil,   nil,
   103,   nil,   129,    10,   155,   155,    36,   nil,   nil,   nil,
   nil,   nil,   131,   111,   nil,   nil,    35,   131,   nil,   nil,
   nil,   131,   151,   nil,   nil,   131,    14,   151,   nil,   nil,
   nil,   155,    36,   nil,   nil,   151,   155,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   155,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    14,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   134,   nil,   nil,    18,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     3,   nil,     4,   nil,     5,   nil,
    16,   nil,    17,   nil,   nil,   nil,   111,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   134,   nil,    36,   nil,   nil,   nil,   nil,
   nil,   nil,    36,    36,    36,    36,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   110,     4,   nil,     5,
   nil,    16,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   111,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,     4,   nil,     5,   nil,    16,   nil,    17,    36,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,    36,    36,   nil,   nil,   nil,     3,
   nil,     4,   nil,     5,   nil,    16,   nil,    17,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36 ]

racc_goto_pointer = [
   nil,    82,    34,     0,     2,     4,  -474,  -447,  -437,  -387,
  -306,   nil,   nil,   nil,  -254,  -237,     6,     8,  -226,    -3,
   nil,     6,  -411,   103,   -74,     9,   -67,  -442,  -584,   nil,
  -534,  -570,    38,   -82,   -84,   -85,     1,  -545,   nil,   nil,
   nil,   nil,   nil,   nil,    38,   nil,   -11,   nil,    63,   -70,
   nil,  -212,  -382,   nil,    44,  -132,  -252,  -426,   -80,   -56,
   nil,   nil,    45,   -57,   -82,   -64,   nil,   nil,   nil,    43,
  -138,  -275,   -62,   nil,   nil,   nil,   -69,   nil,    45,   -67,
  -178,  -157,   nil,   nil,   nil,   -36,   -74,   nil,   nil,   nil,
    -3,   nil,  -204,   nil,  -158,  -257,  -404,   nil,  -138,  -410,
  -340,  -515,   nil,  -247,  -343,   -33,   -31,    51,   -30,    52,
   -41,   -18,   nil,    57,   nil,  -220,  -219,  -217,  -248,  -245,
  -263,   nil,   -59,   nil,   nil,  -324,   117,    -9,   nil,    15,
   nil,    38,   112,   nil,   -84,   nil,   nil,   nil,   nil,   nil,
  -408,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   -16,  -123,    57,   nil,   -15,   nil,   112,
  -180,  -132,   nil,  -169,  -168,   nil,   124,    -2,  -185,  -151,
  -288,  -328,  -318,  -192,  -272,  -271,  -263,  -260,  -244,  -464,
  -469,  -470,   nil,   219,   111,   nil,    48,  -100,   nil,    70,
    80,  -353,   -68,  -389,   nil,  -271 ]

racc_goto_default = [
   nil,   nil,   nil,   255,   256,   257,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,   260,   261,    18,   nil,
    20,   nil,   nil,   121,   nil,   nil,   172,   nil,   595,   596,
   nil,   nil,   nil,   nil,   158,   483,   397,   nil,    21,    22,
    23,    24,    25,    26,   nil,    27,   nil,    30,   324,   258,
   259,   428,   400,    33,   nil,   nil,   nil,   nil,   nil,   326,
   281,    35,   nil,   nil,   289,   290,    37,    38,    40,   nil,
   nil,   nil,   nil,   300,   301,   302,   303,    41,   nil,   nil,
   nil,   170,    43,    44,    46,   nil,   nil,    48,    49,    50,
   356,    52,   323,   318,   319,   nil,   469,   325,   nil,   nil,
   nil,   626,   627,   268,   345,   164,   165,   166,   167,   163,
   173,   174,   133,   168,   224,   225,   226,   227,   228,   229,
   230,   231,   232,   237,   246,   nil,   nil,    57,    58,    59,
    60,    61,   nil,   159,   160,   161,   169,   171,   175,   179,
   344,   346,   348,   139,   140,   141,   142,   143,   145,   146,
   147,    63,    64,   nil,   nil,    66,    67,   nil,    68,   nil,
   nil,   nil,   359,   nil,   360,    70,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    72,   nil,   nil,   264,   nil,   nil,   265,   266,
   nil,   nil,   nil,   nil,   544,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 107, :_reduce_none,
  2, 107, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  2, 108, :_reduce_none,
  0, 108, :_reduce_none,
  4, 117, :_reduce_19,
  2, 124, :_reduce_20,
  1, 125, :_reduce_none,
  2, 125, :_reduce_none,
  7, 118, :_reduce_23,
  2, 126, :_reduce_24,
  1, 127, :_reduce_none,
  3, 127, :_reduce_none,
  2, 130, :_reduce_27,
  2, 130, :_reduce_28,
  2, 130, :_reduce_29,
  2, 130, :_reduce_30,
  2, 130, :_reduce_31,
  2, 130, :_reduce_32,
  2, 130, :_reduce_33,
  2, 130, :_reduce_34,
  2, 130, :_reduce_35,
  3, 130, :_reduce_36,
  2, 130, :_reduce_37,
  1, 128, :_reduce_none,
  2, 128, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  2, 133, :_reduce_none,
  4, 134, :_reduce_54,
  1, 136, :_reduce_none,
  2, 136, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 137, :_reduce_none,
  5, 119, :_reduce_70,
  1, 138, :_reduce_71,
  3, 138, :_reduce_72,
  1, 139, :_reduce_73,
  1, 139, :_reduce_74,
  6, 135, :_reduce_75,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  2, 145, :_reduce_78,
  2, 145, :_reduce_79,
  2, 145, :_reduce_80,
  4, 144, :_reduce_81,
  3, 144, :_reduce_82,
  3, 149, :_reduce_83,
  2, 149, :_reduce_84,
  3, 149, :_reduce_85,
  2, 149, :_reduce_86,
  3, 149, :_reduce_87,
  2, 149, :_reduce_88,
  2, 146, :_reduce_89,
  2, 147, :_reduce_90,
  2, 151, :_reduce_91,
  2, 153, :_reduce_92,
  1, 148, :_reduce_93,
  1, 150, :_reduce_none,
  2, 150, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 154, :_reduce_none,
  2, 152, :_reduce_104,
  1, 157, :_reduce_105,
  3, 157, :_reduce_106,
  1, 158, :_reduce_none,
  4, 116, :_reduce_108,
  10, 159, :_reduce_109,
  8, 159, :_reduce_110,
  8, 159, :_reduce_111,
  8, 159, :_reduce_112,
  6, 159, :_reduce_113,
  6, 159, :_reduce_114,
  6, 159, :_reduce_115,
  4, 159, :_reduce_116,
  1, 161, :_reduce_none,
  1, 162, :_reduce_none,
  1, 163, :_reduce_none,
  1, 160, :_reduce_none,
  2, 160, :_reduce_none,
  1, 164, :_reduce_none,
  2, 164, :_reduce_none,
  2, 164, :_reduce_none,
  4, 113, :_reduce_125,
  2, 167, :_reduce_126,
  1, 168, :_reduce_none,
  2, 168, :_reduce_none,
  2, 169, :_reduce_none,
  2, 169, :_reduce_none,
  2, 169, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  2, 173, :_reduce_134,
  4, 172, :_reduce_135,
  6, 174, :_reduce_136,
  4, 174, :_reduce_137,
  4, 174, :_reduce_138,
  2, 174, :_reduce_139,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  2, 178, :_reduce_none,
  0, 178, :_reduce_none,
  4, 115, :_reduce_152,
  4, 183, :_reduce_153,
  2, 183, :_reduce_154,
  1, 184, :_reduce_none,
  2, 184, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  2, 185, :_reduce_none,
  0, 185, :_reduce_none,
  3, 170, :_reduce_162,
  4, 171, :_reduce_163,
  3, 171, :_reduce_164,
  3, 180, :_reduce_165,
  3, 179, :_reduce_166,
  3, 181, :_reduce_167,
  3, 182, :_reduce_168,
  3, 182, :_reduce_169,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 142, :_reduce_172,
  1, 129, :_reduce_173,
  2, 129, :_reduce_174,
  3, 129, :_reduce_175,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 189, :_reduce_178,
  2, 189, :_reduce_179,
  4, 188, :_reduce_180,
  4, 190, :_reduce_181,
  3, 190, :_reduce_182,
  4, 190, :_reduce_183,
  3, 190, :_reduce_184,
  3, 190, :_reduce_185,
  2, 190, :_reduce_186,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 195, :_reduce_190,
  2, 195, :_reduce_191,
  3, 194, :_reduce_192,
  4, 193, :_reduce_193,
  4, 197, :_reduce_194,
  3, 197, :_reduce_195,
  4, 197, :_reduce_196,
  3, 197, :_reduce_197,
  3, 197, :_reduce_198,
  2, 197, :_reduce_199,
  1, 191, :_reduce_none,
  2, 191, :_reduce_none,
  2, 192, :_reduce_202,
  1, 192, :_reduce_203,
  1, 192, :_reduce_204,
  3, 199, :_reduce_205,
  2, 199, :_reduce_206,
  2, 200, :_reduce_207,
  1, 201, :_reduce_208,
  3, 201, :_reduce_209,
  1, 202, :_reduce_none,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  2, 198, :_reduce_none,
  3, 203, :_reduce_214,
  3, 203, :_reduce_215,
  4, 165, :_reduce_216,
  5, 165, :_reduce_217,
  5, 165, :_reduce_218,
  6, 165, :_reduce_219,
  4, 166, :_reduce_220,
  5, 166, :_reduce_221,
  5, 166, :_reduce_222,
  6, 166, :_reduce_223,
  1, 205, :_reduce_224,
  3, 205, :_reduce_225,
  3, 207, :_reduce_226,
  1, 208, :_reduce_none,
  3, 123, :_reduce_228,
  3, 122, :_reduce_229,
  5, 110, :_reduce_230,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 141, :_reduce_none,
  1, 220, :_reduce_none,
  3, 220, :_reduce_243,
  1, 221, :_reduce_none,
  3, 221, :_reduce_245,
  1, 222, :_reduce_none,
  3, 222, :_reduce_247,
  1, 223, :_reduce_none,
  3, 223, :_reduce_249,
  3, 223, :_reduce_250,
  1, 224, :_reduce_none,
  3, 224, :_reduce_252,
  3, 224, :_reduce_253,
  1, 225, :_reduce_none,
  3, 225, :_reduce_255,
  3, 225, :_reduce_256,
  3, 225, :_reduce_257,
  2, 226, :_reduce_258,
  1, 226, :_reduce_none,
  1, 227, :_reduce_260,
  1, 227, :_reduce_261,
  1, 227, :_reduce_262,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  3, 228, :_reduce_265,
  1, 229, :_reduce_266,
  1, 229, :_reduce_267,
  1, 229, :_reduce_268,
  1, 229, :_reduce_269,
  1, 229, :_reduce_270,
  1, 229, :_reduce_271,
  1, 229, :_reduce_272,
  1, 229, :_reduce_273,
  1, 230, :_reduce_274,
  1, 230, :_reduce_275,
  1, 231, :_reduce_276,
  2, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  2, 109, :_reduce_none,
  2, 232, :_reduce_284,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 204, :_reduce_307,
  3, 204, :_reduce_308,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  1, 238, :_reduce_311,
  1, 210, :_reduce_none,
  1, 247, :_reduce_none,
  1, 215, :_reduce_314,
  1, 215, :_reduce_315,
  2, 215, :_reduce_316,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 251, :_reduce_322,
  1, 252, :_reduce_323,
  2, 253, :_reduce_324,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  2, 254, :_reduce_328,
  2, 255, :_reduce_329,
  3, 256, :_reduce_330,
  1, 212, :_reduce_331,
  1, 213, :_reduce_332,
  1, 214, :_reduce_333,
  1, 219, :_reduce_334,
  1, 242, :_reduce_335,
  1, 187, :_reduce_336,
  2, 234, :_reduce_337,
  4, 233, :_reduce_338,
  2, 258, :_reduce_339,
  1, 257, :_reduce_340,
  1, 259, :_reduce_none,
  2, 259, :_reduce_none,
  3, 260, :_reduce_343,
  2, 236, :_reduce_344,
  4, 235, :_reduce_345,
  2, 262, :_reduce_346,
  2, 264, :_reduce_347,
  1, 261, :_reduce_348,
  4, 265, :_reduce_349,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 263, :_reduce_none,
  2, 263, :_reduce_none,
  3, 267, :_reduce_357,
  1, 268, :_reduce_358,
  2, 268, :_reduce_359,
  3, 270, :_reduce_360,
  2, 270, :_reduce_361,
  2, 269, :_reduce_362,
  2, 237, :_reduce_363,
  2, 271, :_reduce_364,
  3, 272, :_reduce_none,
  1, 273, :_reduce_none,
  3, 273, :_reduce_none,
  1, 274, :_reduce_368,
  6, 132, :_reduce_369,
  4, 132, :_reduce_370,
  8, 245, :_reduce_371,
  6, 245, :_reduce_372,
  4, 216, :_reduce_373,
  1, 216, :_reduce_374,
  4, 217, :_reduce_375,
  1, 217, :_reduce_376,
  2, 248, :_reduce_377,
  1, 275, :_reduce_378,
  2, 275, :_reduce_379,
  3, 276, :_reduce_380,
  4, 155, :_reduce_381,
  4, 155, :_reduce_382,
  3, 155, :_reduce_383,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 280, :_reduce_389,
  2, 281, :_reduce_390,
  1, 282, :_reduce_391,
  1, 283, :_reduce_392,
  0, 284, :_reduce_393,
  3, 279, :_reduce_394,
  2, 277, :_reduce_395,
  1, 277, :_reduce_396,
  1, 287, :_reduce_397,
  3, 287, :_reduce_398,
  2, 111, :_reduce_399,
  2, 288, :_reduce_400,
  3, 289, :_reduce_none,
  0, 290, :_reduce_none,
  2, 290, :_reduce_none,
  3, 156, :_reduce_none,
  3, 291, :_reduce_405,
  2, 291, :_reduce_406,
  1, 292, :_reduce_none,
  2, 293, :_reduce_408,
  1, 293, :_reduce_409,
  1, 293, :_reduce_410,
  0, 293, :_reduce_411,
  1, 294, :_reduce_412,
  1, 295, :_reduce_413,
  1, 295, :_reduce_414,
  2, 296, :_reduce_none,
  3, 296, :_reduce_none,
  1, 298, :_reduce_none,
  3, 298, :_reduce_none,
  3, 299, :_reduce_419,
  1, 300, :_reduce_420,
  1, 300, :_reduce_421,
  1, 300, :_reduce_422,
  4, 206, :_reduce_423,
  4, 285, :_reduce_424,
  4, 286, :_reduce_425,
  1, 143, :_reduce_426,
  3, 143, :_reduce_427,
  4, 297, :_reduce_428,
  1, 301, :_reduce_429,
  3, 301, :_reduce_430,
  1, 209, :_reduce_431,
  1, 209, :_reduce_432,
  1, 209, :_reduce_433,
  1, 209, :_reduce_434,
  6, 244, :_reduce_435,
  1, 218, :_reduce_436,
  1, 243, :_reduce_437 ]

racc_reduce_n = 438

racc_shift_n = 745

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "{" => 3,
  "}" => 4,
  "module" => 5,
  :identifier => 6,
  "<" => 7,
  ">" => 8,
  "," => 9,
  "typename" => 10,
  "interface" => 11,
  "valuetype" => 12,
  "eventtype" => 13,
  "struct" => 14,
  "union" => 15,
  "exception" => 16,
  "enum" => 17,
  "sequence" => 18,
  "const" => 19,
  "alias" => 20,
  "local" => 21,
  "abstract" => 22,
  "pseudo" => 23,
  ":" => 24,
  "home" => 25,
  "supports" => 26,
  "manages" => 27,
  "primarykey" => 28,
  "porttype" => 29,
  "component" => 30,
  "connector" => 31,
  "provides" => 32,
  "uses" => 33,
  "multiple" => 34,
  "publishes" => 35,
  "emits" => 36,
  "consumes" => 37,
  "port" => 38,
  "mirrorport" => 39,
  "::" => 40,
  "custom" => 41,
  "truncatable" => 42,
  "public" => 43,
  "private" => 44,
  "factory" => 45,
  "(" => 46,
  ")" => 47,
  "finder" => 48,
  "in" => 49,
  "typeprefix" => 50,
  :string_literal => 51,
  "typeid" => 52,
  "=" => 53,
  "|" => 54,
  "^" => 55,
  "&" => 56,
  ">>" => 57,
  "<<" => 58,
  "+" => 59,
  "-" => 60,
  "*" => 61,
  "/" => 62,
  "%" => 63,
  "~" => 64,
  :integer_literal => 65,
  :wide_string_literal => 66,
  :character_literal => 67,
  :wide_character_literal => 68,
  :fixed_pt_literal => 69,
  :floating_pt_literal => 70,
  "TRUE" => 71,
  "FALSE" => 72,
  "typedef" => 73,
  "native" => 74,
  "float" => 75,
  "double" => 76,
  "long" => 77,
  "short" => 78,
  "unsigned" => 79,
  "char" => 80,
  "wchar" => 81,
  "boolean" => 82,
  "octet" => 83,
  "any" => 84,
  "Object" => 85,
  "switch" => 86,
  "case" => 87,
  "default" => 88,
  "map" => 89,
  "string" => 90,
  "wstring" => 91,
  "[" => 92,
  "]" => 93,
  "readonly" => 94,
  "attribute" => 95,
  "oneway" => 96,
  "void" => 97,
  "out" => 98,
  "inout" => 99,
  "raises" => 100,
  "getraises" => 101,
  "setraises" => 102,
  "context" => 103,
  "fixed" => 104,
  "ValueBase" => 105 }

racc_nt_base = 106

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\"module\"",
  "identifier",
  "\"<\"",
  "\">\"",
  "\",\"",
  "\"typename\"",
  "\"interface\"",
  "\"valuetype\"",
  "\"eventtype\"",
  "\"struct\"",
  "\"union\"",
  "\"exception\"",
  "\"enum\"",
  "\"sequence\"",
  "\"const\"",
  "\"alias\"",
  "\"local\"",
  "\"abstract\"",
  "\"pseudo\"",
  "\":\"",
  "\"home\"",
  "\"supports\"",
  "\"manages\"",
  "\"primarykey\"",
  "\"porttype\"",
  "\"component\"",
  "\"connector\"",
  "\"provides\"",
  "\"uses\"",
  "\"multiple\"",
  "\"publishes\"",
  "\"emits\"",
  "\"consumes\"",
  "\"port\"",
  "\"mirrorport\"",
  "\"::\"",
  "\"custom\"",
  "\"truncatable\"",
  "\"public\"",
  "\"private\"",
  "\"factory\"",
  "\"(\"",
  "\")\"",
  "\"finder\"",
  "\"in\"",
  "\"typeprefix\"",
  "string_literal",
  "\"typeid\"",
  "\"=\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\">>\"",
  "\"<<\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "integer_literal",
  "wide_string_literal",
  "character_literal",
  "wide_character_literal",
  "fixed_pt_literal",
  "floating_pt_literal",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"typedef\"",
  "\"native\"",
  "\"float\"",
  "\"double\"",
  "\"long\"",
  "\"short\"",
  "\"unsigned\"",
  "\"char\"",
  "\"wchar\"",
  "\"boolean\"",
  "\"octet\"",
  "\"any\"",
  "\"Object\"",
  "\"switch\"",
  "\"case\"",
  "\"default\"",
  "\"map\"",
  "\"string\"",
  "\"wstring\"",
  "\"[\"",
  "\"]\"",
  "\"readonly\"",
  "\"attribute\"",
  "\"oneway\"",
  "\"void\"",
  "\"out\"",
  "\"inout\"",
  "\"raises\"",
  "\"getraises\"",
  "\"setraises\"",
  "\"context\"",
  "\"fixed\"",
  "\"ValueBase\"",
  "$start",
  "specification",
  "definition",
  "type_dcl",
  "const_dcl",
  "except_dcl",
  "interface",
  "porttype",
  "component",
  "connector",
  "home",
  "module",
  "template_module",
  "template_module_inst",
  "value",
  "event",
  "typeid",
  "typeprefix",
  "module_header",
  "_definition_1",
  "template_module_header",
  "template_module_parameters",
  "template_module_body",
  "scoped_name_0",
  "template_module_parameter",
  "const_type",
  "sequence_type",
  "template_module_definition",
  "fixed_module",
  "template_module_reference",
  "fixed_module_body",
  "fixed_module_definition",
  "template_module_inst_parameters",
  "template_module_inst_parameter",
  "simple_type_spec",
  "const_exp",
  "scoped_name",
  "_scoped_name_list",
  "interface_dcl",
  "forward_dcl",
  "local_interface_",
  "abstract_interface_",
  "regular_interface_",
  "interface_header",
  "interface_body",
  "pseudo_interface_header",
  "interface_inheritance_spec",
  "pseudo_interface_",
  "export",
  "attr_dcl",
  "op_dcl",
  "_interface_name_list",
  "interface_name",
  "home_header",
  "home_body",
  "home_inheritance_spec",
  "home_supports_spec",
  "home_primarykey_spec",
  "home_export",
  "init_dcl",
  "finder_dcl",
  "porttype_header",
  "porttype_body",
  "porttype_export",
  "provides_dcl",
  "uses_dcl",
  "component_dcl",
  "component_forward_dcl",
  "component_header",
  "component_body",
  "component_inheritance_spec",
  "component_supports_spec",
  "component_export",
  "emits_dcl",
  "publishes_dcl",
  "consumes_dcl",
  "port_dcl",
  "connector_header",
  "connector_body",
  "connector_export",
  "interface_type",
  "object_type",
  "event_dcl",
  "event_forward_dcl",
  "eventtype_header",
  "value_body",
  "value_inheritance_spec",
  "value_dcl",
  "value_box_dcl",
  "value_forward_dcl",
  "type_spec",
  "valuetype_header",
  "value_element",
  "value_basevalue_list",
  "value_interface_support_list",
  "_value_name_list",
  "value_name",
  "state_member",
  "declarators",
  "init_param_decls",
  "raises_expr",
  "init_param_decl",
  "init_param_attribute",
  "param_type_spec",
  "simple_declarator",
  "integer_type",
  "char_type",
  "wide_char_type",
  "boolean_type",
  "floating_pt_type",
  "string_type",
  "wide_string_type",
  "fixed_pt_const_type",
  "octet_type",
  "or_expr",
  "xor_expr",
  "and_expr",
  "shift_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "unary_operator",
  "primary_expr",
  "literal",
  "boolean_literal",
  "positive_int_const",
  "type_declarator",
  "struct_type",
  "struct_forward_dcl",
  "union_type",
  "union_forward_dcl",
  "enum_type",
  "native_declarator",
  "constr_type_spec",
  "base_type_spec",
  "template_type_spec",
  "any_type",
  "value_base_type",
  "fixed_pt_type",
  "map_type",
  "declarator",
  "complex_declarator",
  "array_declarator",
  "signed_int",
  "unsigned_int",
  "signed_short_int",
  "signed_long_int",
  "signed_longlong_int",
  "unsigned_short_int",
  "unsigned_long_int",
  "unsigned_longlong_int",
  "struct_def",
  "struct_header",
  "member_list",
  "member",
  "union_def",
  "union_header",
  "union_body",
  "union_dcl",
  "union_switch_spec",
  "switch_type_spec",
  "union_case",
  "_case_label_1",
  "element_spec",
  "case_label",
  "_enum_header",
  "_enum_body",
  "_enumerator_list",
  "enumerator",
  "_fixed_array_size_1",
  "fixed_array_size",
  "readonly_attr_declarator",
  "attr_raises_expr",
  "attr_declarator_list",
  "attr_both_raises_expr1",
  "attr_both_raises_expr2",
  "attr_get_raises_expr",
  "attr_set_raises_expr",
  "attr_no_raises_expr",
  "get_raises_expr",
  "set_raises_expr",
  "_simple_declarator_list",
  "_except_header",
  "_except_body",
  "_member_list0",
  "_op_dcl_header",
  "_op_dcl_parameter",
  "_op_dcl_footer",
  "op_attribute",
  "op_type_spec",
  "parameter_dcls",
  "context_expr",
  "_param_dcl_list",
  "param_dcl",
  "param_attribute",
  "_string_literal_list" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_19(val, _values)
     @d.end_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 41)
  def _reduce_20(val, _values)
     @d.define_module(val[1])
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.ry', 47)
  def _reduce_23(val, _values)
     @d.end_template_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_24(val, _values)
     @d.register_template_module_name(val[1])
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_27(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Any.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_28(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Interface.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 60)
  def _reduce_29(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Valuetype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 62)
  def _reduce_30(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Eventtype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_31(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Struct.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 66)
  def _reduce_32(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Union.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 68)
  def _reduce_33(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Exception.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_34(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Enum.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 72)
  def _reduce_35(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Sequence.new(IDL::Type::Void.new, nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 74)
  def _reduce_36(val, _values)
     @d.define_template_parameter(val[2], IDL::Type::Const.new(val[1]))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 76)
  def _reduce_37(val, _values)
     @d.define_template_parameter(val[1], val[0])
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.ry', 97)
  def _reduce_54(val, _values)
     @d.end_module(val[0])
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.ry', 117)
  def _reduce_70(val, _values)
     @d.instantiate_template_module(val[4], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 120)
  def _reduce_71(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 122)
  def _reduce_72(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 125)
  def _reduce_73(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 127)
  def _reduce_74(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 130)
  def _reduce_75(val, _values)
     @d.declare_template_reference(val[5], val[1], val[3])
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.ry', 137)
  def _reduce_78(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 139)
  def _reduce_79(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 141)
  def _reduce_80(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 144)
  def _reduce_81(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 146)
  def _reduce_82(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 149)
  def _reduce_83(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 151)
  def _reduce_84(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 153)
  def _reduce_85(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 155)
  def _reduce_86(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 157)
  def _reduce_87(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 159)
  def _reduce_88(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 161)
  def _reduce_89(val, _values)
     :local
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 163)
  def _reduce_90(val, _values)
     :abstract
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 166)
  def _reduce_91(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 168)
  def _reduce_92(val, _values)
     :pseudo
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 170)
  def _reduce_93(val, _values)
     :none
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.ry', 184)
  def _reduce_104(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 185)
  def _reduce_105(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 187)
  def _reduce_106(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.ry', 192)
  def _reduce_108(val, _values)
     @d.end_home(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 195)
  def _reduce_109(val, _values)
     @d.define_home(val[1], val[3], val[7], val[9], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 197)
  def _reduce_110(val, _values)
     @d.define_home(val[1], val[3], val[7], nil, val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 199)
  def _reduce_111(val, _values)
     @d.define_home(val[1], val[3], val[5], val[7], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 201)
  def _reduce_112(val, _values)
     @d.define_home(val[1], nil, val[5], val[7], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 203)
  def _reduce_113(val, _values)
     @d.define_home(val[1], nil, val[5], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 205)
  def _reduce_114(val, _values)
     @d.define_home(val[1], val[3], val[5], nil, nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 207)
  def _reduce_115(val, _values)
     @d.define_home(val[1], nil, val[3], val[5], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 209)
  def _reduce_116(val, _values)
     @d.define_home(val[1], nil, val[3], nil, nil)
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.ry', 225)
  def _reduce_125(val, _values)
     @d.end_porttype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 228)
  def _reduce_126(val, _values)
     @d.define_porttype(val[1])
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.ry', 241)
  def _reduce_134(val, _values)
     @d.declare_component(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 244)
  def _reduce_135(val, _values)
     @d.end_component(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 247)
  def _reduce_136(val, _values)
     @d.define_component(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 249)
  def _reduce_137(val, _values)
     @d.define_component(val[1], val[3], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 251)
  def _reduce_138(val, _values)
     @d.define_component(val[1], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 253)
  def _reduce_139(val, _values)
     @d.define_component(val[1], nil, nil)
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.ry', 272)
  def _reduce_152(val, _values)
     @d.end_connector(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 275)
  def _reduce_153(val, _values)
     @d.define_connector(val[1], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 277)
  def _reduce_154(val, _values)
     @d.define_connector(val[1], nil)
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.ry', 289)
  def _reduce_162(val, _values)
     @d.declare_port(val[2], :facet, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 292)
  def _reduce_163(val, _values)
     @d.declare_port(val[3], :receptacle, val[2], true)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 294)
  def _reduce_164(val, _values)
     @d.declare_port(val[2], :receptacle, val[1], false)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 297)
  def _reduce_165(val, _values)
     @d.declare_port(val[2], :publisher, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 300)
  def _reduce_166(val, _values)
     @d.declare_port(val[2], :emitter, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 303)
  def _reduce_167(val, _values)
     @d.declare_port(val[2], :consumer, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 306)
  def _reduce_168(val, _values)
     @d.declare_port(val[2], :port, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 308)
  def _reduce_169(val, _values)
     @d.declare_port(val[2], :mirrorport, val[1])
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.ry', 313)
  def _reduce_172(val, _values)
     @d.parse_scopedname(*val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 315)
  def _reduce_173(val, _values)
     [false, [val[0]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 316)
  def _reduce_174(val, _values)
     [true,  [val[1]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 318)
  def _reduce_175(val, _values)
     val[0][1] << val[2]; val[0]
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'parser.ry', 324)
  def _reduce_178(val, _values)
     @d.declare_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 326)
  def _reduce_179(val, _values)
     @d.declare_eventtype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 329)
  def _reduce_180(val, _values)
     @d.end_eventtype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 332)
  def _reduce_181(val, _values)
     @d.define_eventtype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 334)
  def _reduce_182(val, _values)
     @d.define_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 336)
  def _reduce_183(val, _values)
     @d.define_eventtype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 338)
  def _reduce_184(val, _values)
     @d.define_eventtype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 340)
  def _reduce_185(val, _values)
     @d.define_eventtype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 342)
  def _reduce_186(val, _values)
     @d.define_eventtype(val[1], :none)
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.ry', 349)
  def _reduce_190(val, _values)
     @d.declare_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 351)
  def _reduce_191(val, _values)
     @d.declare_valuetype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 354)
  def _reduce_192(val, _values)
     @d.define_valuebox(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 357)
  def _reduce_193(val, _values)
     @d.end_valuetype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 360)
  def _reduce_194(val, _values)
     @d.define_valuetype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 362)
  def _reduce_195(val, _values)
     @d.define_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 364)
  def _reduce_196(val, _values)
     @d.define_valuetype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 366)
  def _reduce_197(val, _values)
     @d.define_valuetype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 368)
  def _reduce_198(val, _values)
     @d.define_valuetype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 370)
  def _reduce_199(val, _values)
     @d.define_valuetype(val[1], :none)
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'parser.ry', 376)
  def _reduce_202(val, _values)
     Hash[ :base => val[0], :supports => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 378)
  def _reduce_203(val, _values)
     Hash[ :base => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 380)
  def _reduce_204(val, _values)
     Hash[ :supports => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 383)
  def _reduce_205(val, _values)
     Hash[ :truncatable => true, :list => val[2] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 385)
  def _reduce_206(val, _values)
     Hash[ :truncatable => false, :list => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 388)
  def _reduce_207(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 390)
  def _reduce_208(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 391)
  def _reduce_209(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.ry', 401)
  def _reduce_214(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], true) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 406)
  def _reduce_215(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], false) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 411)
  def _reduce_216(val, _values)
      @d.declare_initializer(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 413)
  def _reduce_217(val, _values)
      @d.declare_initializer(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 415)
  def _reduce_218(val, _values)
      @d.declare_initializer(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 417)
  def _reduce_219(val, _values)
      @d.declare_initializer(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 420)
  def _reduce_220(val, _values)
      @d.declare_finder(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 422)
  def _reduce_221(val, _values)
      @d.declare_finder(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 424)
  def _reduce_222(val, _values)
      @d.declare_finder(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 426)
  def _reduce_223(val, _values)
      @d.declare_finder(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 428)
  def _reduce_224(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 429)
  def _reduce_225(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 432)
  def _reduce_226(val, _values)
     [val[1], val[2]]
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.ry', 437)
  def _reduce_228(val, _values)
     @d.define_typeprefix(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 440)
  def _reduce_229(val, _values)
     @d.define_typeid(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 443)
  def _reduce_230(val, _values)
     @d.define_const(val[1], val[2], val[4])
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'parser.ry', 460)
  def _reduce_243(val, _values)
     Expression::Operation::Or.new(val[0], val[2])
  end
.,.,

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.ry', 464)
  def _reduce_245(val, _values)
     Expression::Operation::Xor.new(val[0], val[2])
  end
.,.,

# reduce 246 omitted

module_eval(<<'.,.,', 'parser.ry', 468)
  def _reduce_247(val, _values)
     Expression::Operation::And.new(val[0], val[2])
  end
.,.,

# reduce 248 omitted

module_eval(<<'.,.,', 'parser.ry', 472)
  def _reduce_249(val, _values)
     Expression::Operation::RShift.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 474)
  def _reduce_250(val, _values)
     Expression::Operation::LShift.new(val[0], val[2])
  end
.,.,

# reduce 251 omitted

module_eval(<<'.,.,', 'parser.ry', 478)
  def _reduce_252(val, _values)
     Expression::Operation::Add.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 480)
  def _reduce_253(val, _values)
     Expression::Operation::Minus.new(val[0], val[2])
  end
.,.,

# reduce 254 omitted

module_eval(<<'.,.,', 'parser.ry', 484)
  def _reduce_255(val, _values)
     Expression::Operation::Mult.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 486)
  def _reduce_256(val, _values)
     Expression::Operation::Div.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 488)
  def _reduce_257(val, _values)
     Expression::Operation::Mod.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 490)
  def _reduce_258(val, _values)
     val[0].new(val[1])
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'parser.ry', 493)
  def _reduce_260(val, _values)
     Expression::Operation::UnaryMinus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 494)
  def _reduce_261(val, _values)
     Expression::Operation::UnaryPlus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 495)
  def _reduce_262(val, _values)
     Expression::Operation::UnaryNot
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'parser.ry', 500)
  def _reduce_265(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 502)
  def _reduce_266(val, _values)
     @d.parse_literal(:integer, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 503)
  def _reduce_267(val, _values)
     @d.parse_literal(:string,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 504)
  def _reduce_268(val, _values)
     @d.parse_literal(:wstring, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 505)
  def _reduce_269(val, _values)
     @d.parse_literal(:char,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 506)
  def _reduce_270(val, _values)
     @d.parse_literal(:wchar,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 507)
  def _reduce_271(val, _values)
     @d.parse_literal(:fixed,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 508)
  def _reduce_272(val, _values)
     @d.parse_literal(:float,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 509)
  def _reduce_273(val, _values)
     @d.parse_literal(:boolean, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 511)
  def _reduce_274(val, _values)
     true
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 512)
  def _reduce_275(val, _values)
     false
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 514)
  def _reduce_276(val, _values)
     @d.parse_positive_int(val[0])
  end
.,.,

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'parser.ry', 526)
  def _reduce_284(val, _values)
                          dcls = parse_type_declarator(val[0], val[1])
                      dcls.each do |d|
                        @d.declare_typedef(d[0], d[1])
                      end

  end
.,.,

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

module_eval(<<'.,.,', 'parser.ry', 559)
  def _reduce_307(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 560)
  def _reduce_308(val, _values)
     val[0] << val[2]
  end
.,.,

# reduce 309 omitted

# reduce 310 omitted

module_eval(<<'.,.,', 'parser.ry', 565)
  def _reduce_311(val, _values)
     @d.declare_typedef(::IDL::Type::Native.new, val[0])
  end
.,.,

# reduce 312 omitted

# reduce 313 omitted

module_eval(<<'.,.,', 'parser.ry', 571)
  def _reduce_314(val, _values)
     ::IDL::Type::Float.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 572)
  def _reduce_315(val, _values)
     ::IDL::Type::Double.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 573)
  def _reduce_316(val, _values)
     ::IDL::Type::LongDouble.new
  end
.,.,

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

module_eval(<<'.,.,', 'parser.ry', 582)
  def _reduce_322(val, _values)
     ::IDL::Type::Short.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 584)
  def _reduce_323(val, _values)
     ::IDL::Type::Long.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 586)
  def _reduce_324(val, _values)
     ::IDL::Type::LongLong.new
  end
.,.,

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

module_eval(<<'.,.,', 'parser.ry', 592)
  def _reduce_328(val, _values)
     ::IDL::Type::UShort.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 594)
  def _reduce_329(val, _values)
     ::IDL::Type::ULong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 597)
  def _reduce_330(val, _values)
     ::IDL::Type::ULongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 599)
  def _reduce_331(val, _values)
     ::IDL::Type::Char.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 601)
  def _reduce_332(val, _values)
     ::IDL::Type::WChar.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 603)
  def _reduce_333(val, _values)
     ::IDL::Type::Boolean.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 605)
  def _reduce_334(val, _values)
     ::IDL::Type::Octet.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 607)
  def _reduce_335(val, _values)
     ::IDL::Type::Any.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 609)
  def _reduce_336(val, _values)
     ::IDL::Type::Object.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 611)
  def _reduce_337(val, _values)
     @d.declare_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 614)
  def _reduce_338(val, _values)
     @d.end_struct(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 616)
  def _reduce_339(val, _values)
     @d.define_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 618)
  def _reduce_340(val, _values)
     nil
  end
.,.,

# reduce 341 omitted

# reduce 342 omitted

module_eval(<<'.,.,', 'parser.ry', 626)
  def _reduce_343(val, _values)
                 dcls = parse_type_declarator(val[0], val[1])
             dcls.each do |d|
               @d.declare_member(d[0], d[1])
             end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 633)
  def _reduce_344(val, _values)
     @d.declare_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 636)
  def _reduce_345(val, _values)
     @d.end_union(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 639)
  def _reduce_346(val, _values)
     @d.define_union_switchtype(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 642)
  def _reduce_347(val, _values)
     @d.define_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 644)
  def _reduce_348(val, _values)
     nil
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 647)
  def _reduce_349(val, _values)
     val[2]
  end
.,.,

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

module_eval(<<'.,.,', 'parser.ry', 660)
  def _reduce_357(val, _values)
                     dcls = parse_type_declarator(val[1][0], [val[1][1]])
                 dcls.each do |d|
                   @d.define_case(val[0], d[0], d[1])
                 end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 666)
  def _reduce_358(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 667)
  def _reduce_359(val, _values)
     val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 669)
  def _reduce_360(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 670)
  def _reduce_361(val, _values)
     :default
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 673)
  def _reduce_362(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 676)
  def _reduce_363(val, _values)
     @d.end_enum(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 678)
  def _reduce_364(val, _values)
     @d.define_enum(val[1])
  end
.,.,

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

module_eval(<<'.,.,', 'parser.ry', 686)
  def _reduce_368(val, _values)
                     @d.declare_enumerator(val[0])

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 690)
  def _reduce_369(val, _values)
     ::IDL::Type::Sequence.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 692)
  def _reduce_370(val, _values)
     ::IDL::Type::Sequence.new(val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 695)
  def _reduce_371(val, _values)
     ::IDL::Type::Map.new(val[2], val[4], val[6])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 697)
  def _reduce_372(val, _values)
     ::IDL::Type::Map.new(val[2], val[4], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 700)
  def _reduce_373(val, _values)
     ::IDL::Type::String.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 702)
  def _reduce_374(val, _values)
     ::IDL::Type::String.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 705)
  def _reduce_375(val, _values)
     ::IDL::Type::WString.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 707)
  def _reduce_376(val, _values)
     ::IDL::Type::WString.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 709)
  def _reduce_377(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 711)
  def _reduce_378(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 712)
  def _reduce_379(val, _values)
    val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 714)
  def _reduce_380(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 717)
  def _reduce_381(val, _values)
      dcls = parse_type_declarator(val[2], val[3][0])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1], true).get_raises = val[3][1]
                        end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 723)
  def _reduce_382(val, _values)
      att = @d.declare_attribute(val[1], val[2])
                        att.get_raises = val[3][0] unless val[3][0].empty?
                        att.set_raises = val[3][1] unless val[3][1].empty?

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 728)
  def _reduce_383(val, _values)
      dcls = parse_type_declarator(val[1], val[2])
                        dcls.each do |d|
                          att = @d.declare_attribute(d[0], d[1])
                        end

  end
.,.,

# reduce 384 omitted

# reduce 385 omitted

# reduce 386 omitted

# reduce 387 omitted

# reduce 388 omitted

module_eval(<<'.,.,', 'parser.ry', 740)
  def _reduce_389(val, _values)
     [val[0], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 742)
  def _reduce_390(val, _values)
     [val[1], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 744)
  def _reduce_391(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 746)
  def _reduce_392(val, _values)
     [[], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 748)
  def _reduce_393(val, _values)
     [[], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 751)
  def _reduce_394(val, _values)
     [val[0]].concat(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 754)
  def _reduce_395(val, _values)
      [[val[0]], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 755)
  def _reduce_396(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 757)
  def _reduce_397(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 758)
  def _reduce_398(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 761)
  def _reduce_399(val, _values)
     @d.end_exception(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 763)
  def _reduce_400(val, _values)
     @d.define_exception(val[1])
  end
.,.,

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

module_eval(<<'.,.,', 'parser.ry', 772)
  def _reduce_405(val, _values)
     @d.declare_op_header(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 774)
  def _reduce_406(val, _values)
     @d.declare_op_header(nil, val[0], val[1])
  end
.,.,

# reduce 407 omitted

module_eval(<<'.,.,', 'parser.ry', 779)
  def _reduce_408(val, _values)
     @d.declare_op_footer(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 781)
  def _reduce_409(val, _values)
     @d.declare_op_footer(val[0], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 783)
  def _reduce_410(val, _values)
     @d.declare_op_footer(nil, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 785)
  def _reduce_411(val, _values)
     @d.declare_op_footer(nil,nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 787)
  def _reduce_412(val, _values)
     :oneway
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 789)
  def _reduce_413(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 790)
  def _reduce_414(val, _values)
     ::IDL::Type::Void.new
  end
.,.,

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

# reduce 418 omitted

module_eval(<<'.,.,', 'parser.ry', 799)
  def _reduce_419(val, _values)
     @d.declare_op_parameter(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 801)
  def _reduce_420(val, _values)
     :in
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 802)
  def _reduce_421(val, _values)
     :out
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 803)
  def _reduce_422(val, _values)
     :inout
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 805)
  def _reduce_423(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 807)
  def _reduce_424(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 809)
  def _reduce_425(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 811)
  def _reduce_426(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 812)
  def _reduce_427(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 814)
  def _reduce_428(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 816)
  def _reduce_429(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 817)
  def _reduce_430(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 819)
  def _reduce_431(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 820)
  def _reduce_432(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 821)
  def _reduce_433(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 822)
  def _reduce_434(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 826)
  def _reduce_435(val, _values)
     IDL::Type::Fixed.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 828)
  def _reduce_436(val, _values)
     ::IDL::Type::Fixed.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 830)
  def _reduce_437(val, _values)
     ::IDL::Type::ValueBase.new
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end #of module IDL
