#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

###### racc/parser.rb begin
unless $".find {|p| p.end_with?('/racc/parser.rb')}
$".push "#{__dir__}/racc/parser.rb"
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
# frozen_string_literal: false
#--
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#++

unless $".find {|p| p.end_with?('/racc/info.rb')}
$".push "#{__dir__}/racc/info.rb"
#--
#
#
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
# see the file "COPYING".
#
#++

module Racc
  VERSION   = '1.7.1'
  Version = VERSION
  Copyright = 'Copyright (c) 1999-2006 Minero Aoki'
end

end


unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError # :nodoc:
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--executable=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+grammarfile+]
#   Racc grammar file. Any extension is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammar file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is ruby license, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extensions)
    Racc_No_Extensions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Core_Version_R = ::Racc::VERSION

    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end

      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extensions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def do_parse
      #{Racc_Main_Parsing_Routine}(_racc_setup(), false)
    end
    RUBY

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def yyparse(recv, mid)
      #{Racc_YY_Parse_Method}(recv, mid, _racc_setup(), false)
    end
    RUBY

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is +Symbol_Value_Stack[0]+.
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end

require 'ridl/delegate'

module IDL

class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 886)

def parse_type_declarator(type_spec, declarators)
  ret = Array.new
  t = type_spec
  declarators.each do |d|
    case d
    when ::String, IDL::Scanner::Identifier
      ret << [t, d]
    when ::Array # array_declarator -> [identifier, size]
      ret << [IDL::Type::Array.new(t, d[1]), d[0]]
    else
      raise RuntimeError, "unknown declarator: #{d.inspect}"
    end
  end
  ret
end

#attr_accessor :default_namespace, :output
attr_accessor :yydebug
def initialize(params = {})
  @d = ::IDL::Delegator.new(params)
  @params = params
  @idlversion = params[:idlversion]
end

alias on_error0 on_error
def on_error(err_tok, err_val, _value)
  begin
    on_error0(err_tok, err_val, _value)
  rescue IDL::ParseError
    raise
  rescue
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
end

def parse(src)
  @scanner = Scanner.new(src, self, @params)
  @d.pre_parse
  begin
    do_parse
  rescue IDL::ParseError
    raise
  rescue
    STDERR.puts "#{$!}\n#{$!.backtrace.join("\n")}" if IDL.verbose_level>0
    raise IDL::ParseError.new($!.message, @scanner.positions)
  end
  @d.post_parse
end

def visit_nodes(walker)
  @d.visit_nodes(walker)
end

def pragma_prefix(s)
  @d.pragma_prefix(s)
end

def pragma_version(id, major, minor)
  @d.pragma_version(id, major, minor)
end

def pragma_id(id, repo_id)
  @d.pragma_id(id, repo_id)
end

def handle_pragma(s)
  @d.handle_pragma(s)
end

def is_included?(s)
  @d.is_included?(s)
end

def enter_include(s, fp)
  @d.enter_include(s, fp)
end

def leave_include()
  @d.leave_include
end

def declare_include(s)
  @d.declare_include(s)
end

def define_annotation(*args)
  @d.define_annotation(*args)
end

def next_token
  ret = @scanner.next_token
end

...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
  -199,   663,   590,   128,   128,   464,   549,  -139,   364,   128,
   363,    67,    71,   478,    77,   202,   128,    98,   670,   316,
   317,   344,   728,   345,   128,   531,    82,   128,   318,   728,
   319,  -186,   -84,   316,   317,    83,   128,   100,   100,    84,
   500,   316,   317,   100,   329,   330,   331,   332,   333,    85,
   100,   100,   344,   274,   345,   380,   669,   128,   100,    86,
   727,   100,   591,   592,   472,    67,    71,   731,    77,   202,
   100,    87,   142,   143,   144,   151,   152,   153,   154,   155,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   198,
   199,   100,   286,   287,    73,    75,   199,   203,   169,   170,
   586,   395,   590,   199,   664,   665,   286,   287,   764,   435,
    88,   128,   204,   205,   286,   287,   387,   388,   766,    67,
    71,    79,    77,   199,    55,   128,   142,   143,   144,   151,
   152,   153,   154,   155,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   198,   199,   100,   763,   623,    73,    75,
    89,   203,   169,   170,   519,    53,   765,    54,    90,   100,
   547,   764,   591,   592,    91,   548,   204,   205,   316,   317,
   764,   329,   330,   331,   332,   333,   124,   123,    56,    62,
   142,   143,   144,   151,   152,   153,   154,   155,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   198,   199,   792,
   128,   128,    73,    75,   492,    92,   169,   170,   793,   128,
   286,   287,   291,   293,   453,   128,   128,   128,   128,   128,
   128,   205,   128,   128,    67,    71,    79,    77,   344,    55,
   345,   128,   316,   317,   100,   100,    93,   128,   332,   333,
   128,   286,   287,   100,   128,   128,   -86,   128,   128,   100,
   100,   100,   100,   100,   100,   306,   100,   100,   307,    94,
    53,   555,    54,   316,   317,   100,   556,   274,    95,   332,
   333,   100,   361,   362,   100,   128,   128,    96,   100,   100,
   128,   100,   100,    56,    62,   142,   143,   144,   151,   152,
   153,   154,   155,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   198,   199,   128,   286,   287,    73,    75,   100,
   100,   169,   170,   128,   100,   286,   287,   291,   293,   505,
   262,   128,   128,   128,    97,   264,   205,   128,   128,    67,
    71,    79,    77,   101,    55,   128,   286,   287,   100,   263,
   265,   266,   267,   268,   269,   271,   272,   100,   128,   128,
   128,   128,   128,   128,  -182,   100,   100,   100,   351,   352,
   306,   100,   100,   584,   102,    53,   585,    54,   308,   100,
   309,   310,   108,   110,   109,   344,   103,   345,   426,   427,
   428,   104,   100,   100,   100,   100,   100,   100,    56,    62,
   142,   143,   144,   151,   152,   153,   154,   155,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   198,   199,  -195,
   387,   388,    73,    75,   404,   405,   169,   170,   105,   -88,
   286,   287,   291,   293,   513,  -354,   128,   344,   106,   345,
   344,   205,   345,   107,    67,    71,    79,    77,   111,    55,
   274,   426,   427,   428,   112,   672,   378,   676,   538,   151,
   152,   153,   154,   155,   160,   161,   162,   163,   164,   113,
   100,   167,   168,   351,   352,   306,   426,   427,   428,   677,
    53,   676,    54,   414,   375,   417,   418,   114,   528,   115,
   128,   422,   423,   424,   425,   596,   597,   116,    67,    71,
   117,    77,   202,    56,    62,   142,   143,   144,   151,   152,
   153,   154,   155,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   198,   199,   100,   620,   619,    73,    75,   422,
   423,   169,   170,   424,   425,   286,   287,   291,   293,   424,
   425,   118,   557,   119,   128,   120,   205,   691,   692,   737,
   736,   121,    67,    71,   122,    77,   202,   799,   764,   142,
   143,   144,   151,   152,   153,   154,   155,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   198,   199,   100,   125,
   126,    73,    75,   207,   203,   169,   170,   233,   234,   235,
   236,   237,   238,   239,   240,   241,   242,   208,   128,   204,
   205,   209,   210,   211,   213,   215,    67,    71,   216,    77,
   202,   218,   219,   142,   143,   144,   151,   152,   153,   154,
   155,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   198,   199,   100,   221,   222,    73,    75,   224,   203,   169,
   170,   225,   226,   -20,   229,   230,   298,   299,   300,   340,
   353,   354,   229,   204,   205,   358,   359,   360,   365,   366,
   371,   373,   374,   375,   376,   377,  -364,   142,   143,   144,
   151,   152,   153,   154,   155,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   198,   199,   389,   392,   395,    73,
    75,   128,   203,   169,   170,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   396,   399,   204,   205,   403,
   406,   407,   408,   409,   410,   411,   412,   413,   416,   419,
   420,   421,   437,   438,   439,   100,   440,   441,   442,   443,
   444,   262,   448,   450,   455,   456,   264,   457,   458,   466,
   467,   468,   480,   481,   258,   257,   482,   483,   484,   259,
   263,   265,   266,   267,   268,   269,   271,   272,   485,   486,
   142,   143,   144,   151,   152,   153,   154,   155,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   198,   199,   494,
   128,   495,   496,   497,   345,   203,   169,   170,    67,    71,
    79,    77,   507,    55,   508,   514,   515,   519,   522,   378,
   204,   205,   371,   537,   551,   552,   559,   562,   563,   575,
   576,   578,   593,   594,   100,   595,   576,   598,   599,   600,
   602,   603,   576,   604,    53,   605,    54,   606,   607,   608,
   610,   576,   371,   371,   614,   615,   371,   522,   621,   622,
   624,   371,   626,   362,   627,   392,   629,    56,    62,   142,
   143,   144,   151,   152,   153,   154,   155,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   198,   199,   399,   416,
   420,    73,    75,   128,   421,   169,   170,   578,   128,   286,
   287,   291,   293,   585,   667,   668,    67,    71,    79,    77,
   205,    55,   684,   610,   519,   519,   687,   693,   696,   697,
   698,   699,   700,   701,   702,   703,   704,   100,   705,   706,
   707,   708,   100,   262,   709,   710,   584,   306,   264,   713,
   307,   665,    53,   664,    54,   578,   258,   257,   718,   719,
   723,   259,   263,   265,   266,   267,   268,   269,   271,   272,
   578,   584,   584,   732,   733,    56,    62,   142,   143,   144,
   151,   152,   153,   154,   155,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   198,   199,   734,   735,   738,    73,
    75,   128,   739,   169,   170,   759,   128,   286,   287,   291,
   293,   578,   713,   584,    67,    71,    79,    77,   205,    55,
   676,   578,   584,   775,   778,   779,   780,   781,   782,   783,
   784,   785,   786,   787,   788,   100,   789,   790,   795,   796,
   100,   262,   797,   351,   352,   306,   264,   798,   801,   nil,
    53,   nil,    54,   nil,   258,   257,   nil,   nil,   nil,   259,
   263,   265,   266,   267,   268,   269,   271,   272,   nil,   nil,
   nil,   nil,   nil,    56,    62,   142,   143,   144,   151,   152,
   153,   154,   155,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   198,   199,   nil,   nil,   nil,    73,    75,   nil,
   nil,   169,   170,   nil,   128,   286,   287,   291,   293,   nil,
   nil,   nil,    67,    71,    79,    77,   205,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,   nil,
   nil,   351,   352,   306,   nil,   nil,   nil,   nil,    53,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    56,    62,   142,   143,   144,   151,   152,   153,   154,
   155,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   198,   199,   100,   nil,   nil,    73,    75,   nil,   nil,   169,
   170,   nil,   nil,   286,   287,   291,   293,   nil,   nil,   nil,
   nil,   nil,   128,   nil,   205,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,   143,   144,
   151,   152,   153,   154,   155,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   198,   199,   100,   nil,   nil,   nil,
   nil,   nil,   nil,   169,   170,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,   205,   nil,
   nil,   nil,   nil,   nil,    67,    71,   nil,    77,   202,   nil,
   nil,   142,   143,   144,   151,   152,   153,   154,   155,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   198,   199,
   100,   nil,   nil,   nil,   nil,   nil,   nil,   169,   170,   nil,
   nil,   nil,   nil,   nil,   293,   nil,   nil,   nil,   nil,   nil,
   128,   nil,   205,   nil,   nil,   nil,   nil,   nil,    67,    71,
   nil,    77,   202,   nil,   nil,   142,   143,   144,   151,   152,
   153,   154,   155,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   198,   199,   100,   nil,   nil,    73,    75,   nil,
   203,   169,   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   128,   204,   205,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   202,   nil,   nil,   142,
   143,   144,   151,   152,   153,   154,   155,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   198,   199,   100,   nil,
   nil,    73,    75,   nil,   203,   169,   170,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,   204,
   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   202,   nil,   nil,   142,   143,   144,   151,   152,   153,   154,
   155,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   198,   199,   100,   nil,   nil,   nil,   nil,   nil,   203,   169,
   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   128,   204,   205,   nil,   nil,   nil,   nil,   nil,
    67,    71,   nil,    77,   202,   nil,   nil,   142,   143,   144,
   151,   152,   153,   154,   155,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   198,   199,   100,   nil,   nil,   nil,
   nil,   nil,   203,   169,   170,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,   205,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   142,   143,   144,   151,   152,   153,   154,   155,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   198,   199,
   128,   387,   388,    73,    75,   nil,   203,   169,   170,   nil,
   nil,   nil,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   204,   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   100,   nil,   nil,   nil,   nil,   nil,
   262,   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   258,   257,   128,   nil,   nil,   259,   263,
   265,   266,   267,   268,   269,   271,   272,   nil,   nil,   142,
   143,   144,   151,   152,   153,   154,   155,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   198,   199,   nil,   100,
   nil,   nil,   nil,   nil,   203,   169,   170,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,
   205,   128,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   142,   143,   144,   151,   152,   153,
   154,   155,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   198,   199,   nil,   nil,   100,   nil,   nil,   nil,   nil,
   169,   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   205,   128,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   202,   nil,
   142,   143,   144,   151,   152,   153,   154,   155,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   198,   199,   nil,
   100,   nil,   nil,   nil,   nil,   nil,   169,   170,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   128,   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   142,   143,   144,   151,   152,
   153,   154,   155,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   198,   199,   100,   nil,   nil,   nil,   nil,   nil,
   203,   169,   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   128,   204,   205,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,
   143,   144,   151,   152,   153,   154,   155,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   198,   199,   100,   nil,
   nil,   nil,   nil,   nil,   nil,   169,   170,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   128,   128,   nil,   nil,
   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   142,   143,   144,   151,   152,   153,   154,
   155,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   100,   100,   nil,   nil,   nil,   nil,   nil,   262,   nil,   169,
   170,   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   258,   257,   nil,   171,   nil,   259,   263,   265,   266,   267,
   268,   269,   271,   272,   nil,   142,   143,   144,   151,   152,
   153,   154,   155,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,
    19,   169,   170,   nil,   nil,   nil,    32,    51,    45,    67,
    71,    79,    77,   nil,    55,   171,    28,    29,    31,   nil,
    34,   nil,   nil,   nil,    36,    39,    42,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   401,    19,   nil,   nil,   nil,    56,    62,
    32,    51,    45,    67,    71,    79,    77,   nil,    55,   nil,
    28,    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,
    42,   nil,    73,    75,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   694,   632,   nil,
   nil,   nil,    56,    62,    32,    51,    45,    67,    71,    79,
    77,   nil,    55,   650,    28,    29,    31,   nil,    34,   nil,
   nil,   nil,    36,    39,    42,   nil,    73,    75,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,
   nil,   776,   632,   nil,   nil,   nil,    56,    62,    32,    51,
    45,    67,    71,    79,    77,   nil,    55,   nil,    28,    29,
    31,   nil,    34,   nil,   nil,   nil,    36,    39,    42,   nil,
    73,    75,   nil,   100,   nil,   nil,   nil,   nil,    47,   262,
   nil,   nil,   nil,   nil,   264,   nil,   nil,    53,   nil,    54,
   nil,   nil,   258,   257,   nil,   nil,   nil,   259,   263,   265,
   266,   267,   268,   269,   271,   272,    19,   nil,   nil,   nil,
    56,    62,    32,    51,    45,    67,    71,    79,    77,   nil,
    55,   nil,    28,    29,    31,   nil,    34,   nil,   nil,   nil,
    36,    39,    42,   nil,    73,    75,   nil,   nil,   nil,   nil,
   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    53,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,   nil,
    19,   nil,   nil,   nil,    56,    62,    32,    51,    45,    67,
    71,    79,    77,   nil,    55,   nil,    28,    29,    31,   nil,
    34,   nil,   nil,   nil,    36,    39,    42,   nil,    73,    75,
   nil,   100,   nil,   nil,   nil,   nil,    47,   262,   nil,   nil,
   nil,   nil,   264,   nil,   nil,    53,   nil,    54,   nil,   nil,
   258,   257,   nil,   nil,   nil,   259,   263,   265,   266,   267,
   268,   269,   271,   272,   632,   nil,   nil,   nil,    56,    62,
    32,    51,    45,    67,    71,    79,    77,   nil,    55,   650,
    28,    29,    31,   nil,    34,   nil,   nil,   nil,    36,    39,
    42,   nil,    73,    75,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   128,   nil,    53,
   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,    77,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   632,   nil,
   nil,   nil,    56,    62,    32,    51,    45,    67,    71,    79,
    77,   100,    55,   nil,    28,    29,    31,   nil,    34,   nil,
   nil,   nil,    36,    39,    42,   nil,    73,    75,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   128,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    53,   nil,    54,   nil,   nil,   538,   151,
   152,   153,   154,   155,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   nil,   nil,   nil,    56,    62,   128,   100,
   nil,   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,
   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   257,
    73,    75,   nil,   259,   263,   265,   266,   267,   268,   269,
   271,   272,   100,   128,   nil,   nil,   nil,   nil,   262,   nil,
   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   258,   257,   nil,   nil,   nil,   259,   263,   265,   266,
   267,   268,   269,   271,   272,   nil,   128,   100,   nil,   nil,
   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,   264,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   258,   257,   nil,   nil,
   nil,   259,   263,   265,   266,   267,   268,   269,   271,   272,
   100,   128,   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,
   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,
   257,   nil,   nil,   nil,   259,   263,   265,   266,   267,   268,
   269,   271,   272,   nil,   128,   100,   nil,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   258,   257,   nil,   nil,   nil,   259,
   263,   265,   266,   267,   268,   269,   271,   272,   100,   128,
   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,   264,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   257,   nil,
   nil,   nil,   259,   263,   265,   266,   267,   268,   269,   271,
   272,   nil,   128,   100,   nil,   nil,   nil,   nil,   nil,   262,
   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   258,   257,   nil,   nil,   nil,   259,   263,   265,
   266,   267,   268,   269,   271,   272,   100,   128,   nil,   nil,
   nil,   nil,   262,   nil,   nil,   nil,   nil,   264,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   258,   257,   nil,   nil,   nil,
   259,   263,   265,   266,   267,   268,   269,   271,   272,   nil,
   128,   100,   nil,   nil,   nil,   nil,   nil,   262,   nil,   nil,
   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   258,   257,   nil,   nil,   nil,   259,   263,   265,   266,   267,
   268,   269,   271,   272,   100,   128,   nil,   nil,   nil,   nil,
   262,   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   258,   257,   nil,   nil,   nil,   259,   263,
   265,   266,   267,   268,   269,   271,   272,   nil,   128,   100,
   nil,   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,
   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   257,
   nil,   nil,   nil,   259,   263,   265,   266,   267,   268,   269,
   271,   272,   100,   128,   nil,   nil,   nil,   nil,   262,   nil,
   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   258,   257,   nil,   nil,   nil,   259,   263,   265,   266,
   267,   268,   269,   271,   272,   nil,   128,   100,   nil,   nil,
   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,   264,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   258,   257,   nil,   nil,
   nil,   259,   263,   265,   266,   267,   268,   269,   271,   272,
   100,   128,   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,
   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,
   257,   nil,   nil,   nil,   259,   263,   265,   266,   267,   268,
   269,   271,   272,   nil,   128,   100,   nil,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   258,   257,   nil,   nil,   nil,   259,
   263,   265,   266,   267,   268,   269,   271,   272,   100,   nil,
   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,   nil,   264,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   257,   nil,
   nil,   nil,   259,   263,   265,   266,   267,   268,   269,   271,
   272 ]

racc_action_check = [
   125,   579,   670,   125,   344,   311,   393,   117,   161,   316,
   161,   125,   125,   320,   125,   125,   472,    19,   587,   115,
   115,   125,   673,   125,    53,   383,     3,    54,   117,   678,
   117,   121,   102,   311,   311,     4,   317,   125,   344,     5,
   344,   320,   320,   316,   320,   320,   320,   320,   320,     6,
   472,    19,   121,   102,   121,   209,   587,   209,    53,     7,
   673,    54,   670,   670,   317,   209,   209,   678,   209,   209,
   317,     8,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   209,   115,   115,   125,   125,   316,   125,   125,   125,
   448,   393,   448,   472,   579,   579,   311,   311,   720,   277,
     9,   277,   125,   125,   320,   320,   383,   383,   722,   277,
   277,   277,   277,   317,   277,   274,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   277,   720,   530,   209,   209,
    10,   209,   209,   209,   530,   277,   722,   277,    11,   274,
   390,   761,   448,   448,    12,   390,   209,   209,   118,   118,
   762,   118,   118,   118,   118,   118,    47,    47,   277,   277,
   277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
   277,   277,   277,   277,   277,   277,   277,   277,   277,   761,
   308,   309,   277,   277,   334,    13,   277,   277,   762,   310,
   277,   277,   277,   277,   301,   318,   301,   319,   329,   330,
   331,   277,   332,   333,   301,   301,   301,   301,   353,   301,
   353,   340,   334,   334,   308,   309,    14,   345,   334,   334,
   378,   118,   118,   310,   396,   500,   103,   576,   596,   318,
   301,   319,   329,   330,   331,   301,   332,   333,   301,    15,
   301,   397,   301,   119,   119,   340,   397,   103,    16,   119,
   119,   345,   144,   144,   378,   597,   598,    17,   396,   500,
   255,   576,   596,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   301,   301,   599,   334,   334,   301,   301,   597,
   598,   301,   301,   603,   255,   301,   301,   301,   301,   346,
   255,   346,   610,   650,    18,   255,   301,   667,   718,   346,
   346,   346,   346,    20,   346,   719,   119,   119,   599,   255,
   255,   255,   255,   255,   255,   255,   255,   603,   732,   733,
   734,   759,   764,   796,   299,   346,   610,   650,   346,   346,
   346,   667,   718,   446,    23,   346,   446,   346,   114,   719,
   114,   114,    29,    29,    29,   299,    24,   299,   253,   253,
   253,    25,   732,   733,   734,   759,   764,   796,   346,   346,
   346,   346,   346,   346,   346,   346,   346,   346,   346,   346,
   346,   346,   346,   346,   346,   346,   346,   346,   346,   300,
   211,   211,   346,   346,   231,   231,   346,   346,    26,   104,
   346,   346,   346,   346,   357,   208,   357,   354,    27,   354,
   300,   346,   300,    28,   357,   357,   357,   357,    30,   357,
   104,   570,   570,   570,    31,   594,   208,   594,   692,   692,
   692,   692,   692,   692,   692,   692,   692,   692,   692,    33,
   357,   692,   692,   357,   357,   357,   571,   571,   571,   595,
   357,   595,   357,   241,   241,   244,   244,    34,   379,    35,
   379,   251,   251,   252,   252,   459,   459,    36,   379,   379,
    39,   379,   379,   357,   357,   357,   357,   357,   357,   357,
   357,   357,   357,   357,   357,   357,   357,   357,   357,   357,
   357,   357,   357,   357,   379,   523,   523,   357,   357,   567,
   567,   357,   357,   568,   568,   357,   357,   357,   357,   569,
   569,    40,   400,    41,   400,    42,   357,   630,   630,   689,
   689,    45,   400,   400,    46,   400,   400,   791,   791,   379,
   379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
   379,   379,   379,   379,   379,   379,   379,   379,   400,    51,
    52,   379,   379,    62,   379,   379,   379,   405,   405,   405,
   405,   405,   405,   405,   405,   405,   405,    65,    56,   379,
   379,    66,    68,    69,    70,    72,    56,    56,    73,    56,
    56,    74,    75,   400,   400,   400,   400,   400,   400,   400,
   400,   400,   400,   400,   400,   400,   400,   400,   400,   400,
   400,   400,    56,    76,    77,   400,   400,    78,   400,   400,
   400,    79,    80,    98,    99,   100,   106,   109,   110,   120,
   123,   124,   127,   400,   400,   129,   130,   131,   169,   170,
   173,   200,   201,   202,   203,   204,   210,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,   213,   215,   218,    56,
    56,   101,    56,    56,    56,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   219,   221,    56,    56,   229,
   233,   234,   235,   236,   237,   238,   239,   240,   243,   248,
   249,   250,   279,   280,   281,   101,   282,   283,   284,   285,
   286,   101,   288,   290,   304,   305,   101,   306,   307,   313,
   314,   315,   322,   323,   101,   101,   324,   325,   326,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   327,   328,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   336,
   105,   337,   338,   339,   342,   101,   101,   101,   105,   105,
   105,   105,   349,   105,   350,   360,   364,   367,   371,   373,
   101,   101,   382,   388,   394,   395,   404,   415,   417,   431,
   432,   445,   449,   457,   105,   458,   461,   462,   463,   469,
   473,   474,   476,   487,   105,   488,   105,   489,   490,   491,
   501,   504,   509,   510,   517,   518,   519,   520,   524,   525,
   533,   535,   536,   538,   539,   548,   550,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   556,   561,
   565,   105,   105,   262,   566,   105,   105,   577,   113,   105,
   105,   105,   105,   582,   584,   585,   113,   113,   113,   113,
   105,   113,   601,   609,   611,   612,   618,   632,   635,   636,
   637,   638,   639,   640,   641,   642,   643,   262,   644,   645,
   646,   647,   113,   262,   648,   649,   653,   113,   262,   654,
   113,   661,   113,   662,   113,   663,   262,   262,   664,   665,
   668,   262,   262,   262,   262,   262,   262,   262,   262,   262,
   671,   672,   677,   679,   680,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   681,   688,   690,   113,
   113,   365,   691,   113,   113,   711,   122,   113,   113,   113,
   113,   713,   716,   727,   122,   122,   122,   122,   113,   122,
   728,   729,   731,   740,   746,   747,   748,   749,   750,   751,
   752,   753,   754,   755,   756,   365,   757,   758,   766,   771,
   122,   365,   774,   122,   122,   122,   365,   775,   799,   nil,
   122,   nil,   122,   nil,   365,   365,   nil,   nil,   nil,   365,
   365,   365,   365,   365,   365,   365,   365,   365,   nil,   nil,
   nil,   nil,   nil,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   nil,   nil,   nil,   122,   122,   nil,
   nil,   122,   122,   nil,   126,   122,   122,   122,   122,   nil,
   nil,   nil,   126,   126,   126,   126,   122,   126,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,   nil,
   nil,   126,   126,   126,   nil,   nil,   nil,   nil,   126,   nil,
   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   287,   nil,   nil,   126,   126,   nil,   nil,   126,
   126,   nil,   nil,   126,   126,   126,   126,   nil,   nil,   nil,
   nil,   nil,   289,   nil,   126,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   289,   nil,   nil,   nil,
   nil,   nil,   nil,   287,   287,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   351,   nil,   287,   nil,
   nil,   nil,   nil,   nil,   351,   351,   nil,   351,   351,   nil,
   nil,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   351,   nil,   nil,   nil,   nil,   nil,   nil,   289,   289,   nil,
   nil,   nil,   nil,   nil,   289,   nil,   nil,   nil,   nil,   nil,
   352,   nil,   289,   nil,   nil,   nil,   nil,   nil,   352,   352,
   nil,   352,   352,   nil,   nil,   351,   351,   351,   351,   351,
   351,   351,   351,   351,   351,   351,   351,   351,   351,   351,
   351,   351,   351,   351,   352,   nil,   nil,   351,   351,   nil,
   351,   351,   351,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   375,   351,   351,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   375,   nil,   nil,   352,
   352,   352,   352,   352,   352,   352,   352,   352,   352,   352,
   352,   352,   352,   352,   352,   352,   352,   352,   375,   nil,
   nil,   352,   352,   nil,   352,   352,   352,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   376,   352,
   352,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   376,   nil,   nil,   375,   375,   375,   375,   375,   375,   375,
   375,   375,   375,   375,   375,   375,   375,   375,   375,   375,
   375,   375,   376,   nil,   nil,   nil,   nil,   nil,   375,   375,
   375,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   385,   375,   375,   nil,   nil,   nil,   nil,   nil,
   385,   385,   nil,   385,   385,   nil,   nil,   376,   376,   376,
   376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
   376,   376,   376,   376,   376,   376,   385,   nil,   nil,   nil,
   nil,   nil,   376,   376,   376,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   376,   376,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   385,   385,   385,   385,   385,   385,   385,   385,   385,
   385,   385,   385,   385,   385,   385,   385,   385,   385,   385,
   418,   385,   385,   385,   385,   nil,   385,   385,   385,   nil,
   nil,   nil,   418,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   385,   385,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   418,   nil,   nil,   nil,   nil,   nil,
   418,   nil,   nil,   nil,   nil,   418,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   418,   418,   444,   nil,   nil,   418,   418,
   418,   418,   418,   418,   418,   418,   418,   nil,   nil,   418,
   418,   418,   418,   418,   418,   418,   418,   418,   418,   418,
   418,   418,   418,   418,   418,   418,   418,   418,   nil,   444,
   nil,   nil,   nil,   nil,   418,   418,   418,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   418,
   418,   589,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   444,   444,   444,   444,   444,   444,
   444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
   444,   444,   444,   nil,   nil,   589,   nil,   nil,   nil,   nil,
   444,   444,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   444,   621,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   621,   nil,
   589,   589,   589,   589,   589,   589,   589,   589,   589,   589,
   589,   589,   589,   589,   589,   589,   589,   589,   589,   nil,
   621,   nil,   nil,   nil,   nil,   nil,   589,   589,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   675,   589,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   621,   621,   621,   621,   621,
   621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
   621,   621,   621,   621,   675,   nil,   nil,   nil,   nil,   nil,
   621,   621,   621,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    55,   621,   621,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   675,
   675,   675,   675,   675,   675,   675,   675,   675,   675,   675,
   675,   675,   675,   675,   675,   675,   675,   675,    55,   nil,
   nil,   nil,   nil,   nil,   nil,   675,   675,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   242,   366,   nil,   nil,
   675,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
   242,   366,   nil,   nil,   nil,   nil,   nil,   366,   nil,    55,
    55,   nil,   366,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   366,   366,   nil,    55,   nil,   366,   366,   366,   366,   366,
   366,   366,   366,   366,   nil,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   nil,   nil,   nil,     1,   nil,   nil,   nil,   nil,
     1,   242,   242,   nil,   nil,   nil,     1,     1,     1,     1,
     1,     1,     1,   nil,     1,   242,     1,     1,     1,   nil,
     1,   nil,   nil,   nil,     1,     1,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     1,   nil,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   227,   227,   nil,   nil,   nil,     1,     1,
   227,   227,   227,   227,   227,   227,   227,   nil,   227,   nil,
   227,   227,   227,   nil,   227,   nil,   nil,   nil,   227,   227,
   227,   nil,     1,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,
   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   633,   633,   nil,
   nil,   nil,   227,   227,   633,   633,   633,   633,   633,   633,
   633,   nil,   633,   633,   633,   633,   633,   nil,   633,   nil,
   nil,   nil,   633,   633,   633,   nil,   227,   227,   nil,   nil,
   nil,   nil,   nil,   nil,   633,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   633,   nil,   633,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   377,
   nil,   744,   744,   nil,   nil,   nil,   633,   633,   744,   744,
   744,   744,   744,   744,   744,   nil,   744,   nil,   744,   744,
   744,   nil,   744,   nil,   nil,   nil,   744,   744,   744,   nil,
   633,   633,   nil,   377,   nil,   nil,   nil,   nil,   744,   377,
   nil,   nil,   nil,   nil,   377,   nil,   nil,   744,   nil,   744,
   nil,   nil,   377,   377,   nil,   nil,   nil,   377,   377,   377,
   377,   377,   377,   377,   377,   377,     0,   nil,   nil,   nil,
   744,   744,     0,     0,     0,     0,     0,     0,     0,   nil,
     0,   nil,     0,     0,     0,   nil,     0,   nil,   nil,   nil,
     0,     0,     0,   nil,   744,   744,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     0,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   387,   nil,   nil,
    97,   nil,   nil,   nil,     0,     0,    97,    97,    97,    97,
    97,    97,    97,   nil,    97,   nil,    97,    97,    97,   nil,
    97,   nil,   nil,   nil,    97,    97,    97,   nil,     0,     0,
   nil,   387,   nil,   nil,   nil,   nil,    97,   387,   nil,   nil,
   nil,   nil,   387,   nil,   nil,    97,   nil,    97,   nil,   nil,
   387,   387,   nil,   nil,   nil,   387,   387,   387,   387,   387,
   387,   387,   387,   387,   559,   nil,   nil,   nil,    97,    97,
   559,   559,   559,   559,   559,   559,   559,   nil,   559,   559,
   559,   559,   559,   nil,   559,   nil,   nil,   nil,   559,   559,
   559,   nil,    97,    97,   nil,   nil,   nil,   nil,   nil,   nil,
   559,   nil,   nil,   nil,   nil,   nil,   nil,   389,   nil,   559,
   nil,   559,   nil,   nil,   nil,   nil,   nil,   nil,   389,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   710,   nil,
   nil,   nil,   559,   559,   710,   710,   710,   710,   710,   710,
   710,   389,   710,   nil,   710,   710,   710,   nil,   710,   nil,
   nil,   nil,   710,   710,   710,   nil,   559,   559,   nil,   nil,
   nil,   nil,   nil,   nil,   710,   419,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   710,   nil,   710,   nil,   nil,   389,   389,
   389,   389,   389,   389,   389,   389,   389,   389,   389,   389,
   389,   389,   389,   nil,   nil,   nil,   710,   710,   420,   419,
   nil,   nil,   nil,   nil,   nil,   419,   nil,   nil,   nil,   nil,
   419,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   419,   419,
   710,   710,   nil,   419,   419,   419,   419,   419,   419,   419,
   419,   419,   420,   421,   nil,   nil,   nil,   nil,   420,   nil,
   nil,   nil,   nil,   420,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   420,   420,   nil,   nil,   nil,   420,   420,   420,   420,
   420,   420,   420,   420,   420,   nil,   422,   421,   nil,   nil,
   nil,   nil,   nil,   421,   nil,   nil,   nil,   nil,   421,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   421,   421,   nil,   nil,
   nil,   421,   421,   421,   421,   421,   421,   421,   421,   421,
   422,   423,   nil,   nil,   nil,   nil,   422,   nil,   nil,   nil,
   nil,   422,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   422,
   422,   nil,   nil,   nil,   422,   422,   422,   422,   422,   422,
   422,   422,   422,   nil,   424,   423,   nil,   nil,   nil,   nil,
   nil,   423,   nil,   nil,   nil,   nil,   423,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   423,   423,   nil,   nil,   nil,   423,
   423,   423,   423,   423,   423,   423,   423,   423,   424,   425,
   nil,   nil,   nil,   nil,   424,   nil,   nil,   nil,   nil,   424,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   424,   424,   nil,
   nil,   nil,   424,   424,   424,   424,   424,   424,   424,   424,
   424,   nil,   426,   425,   nil,   nil,   nil,   nil,   nil,   425,
   nil,   nil,   nil,   nil,   425,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   425,   425,   nil,   nil,   nil,   425,   425,   425,
   425,   425,   425,   425,   425,   425,   426,   427,   nil,   nil,
   nil,   nil,   426,   nil,   nil,   nil,   nil,   426,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   426,   426,   nil,   nil,   nil,
   426,   426,   426,   426,   426,   426,   426,   426,   426,   nil,
   428,   427,   nil,   nil,   nil,   nil,   nil,   427,   nil,   nil,
   nil,   nil,   427,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   427,   427,   nil,   nil,   nil,   427,   427,   427,   427,   427,
   427,   427,   427,   427,   428,   514,   nil,   nil,   nil,   nil,
   428,   nil,   nil,   nil,   nil,   428,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   428,   428,   nil,   nil,   nil,   428,   428,
   428,   428,   428,   428,   428,   428,   428,   nil,   522,   514,
   nil,   nil,   nil,   nil,   nil,   514,   nil,   nil,   nil,   nil,
   514,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   514,   514,
   nil,   nil,   nil,   514,   514,   514,   514,   514,   514,   514,
   514,   514,   522,   552,   nil,   nil,   nil,   nil,   522,   nil,
   nil,   nil,   nil,   522,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   522,   522,   nil,   nil,   nil,   522,   522,   522,   522,
   522,   522,   522,   522,   522,   nil,   619,   552,   nil,   nil,
   nil,   nil,   nil,   552,   nil,   nil,   nil,   nil,   552,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   552,   552,   nil,   nil,
   nil,   552,   552,   552,   552,   552,   552,   552,   552,   552,
   619,   622,   nil,   nil,   nil,   nil,   619,   nil,   nil,   nil,
   nil,   619,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   619,
   619,   nil,   nil,   nil,   619,   619,   619,   619,   619,   619,
   619,   619,   619,   nil,   736,   622,   nil,   nil,   nil,   nil,
   nil,   622,   nil,   nil,   nil,   nil,   622,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   622,   622,   nil,   nil,   nil,   622,
   622,   622,   622,   622,   622,   622,   622,   622,   736,   nil,
   nil,   nil,   nil,   nil,   736,   nil,   nil,   nil,   nil,   736,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   736,   736,   nil,
   nil,   nil,   736,   736,   736,   736,   736,   736,   736,   736,
   736 ]

racc_action_pointer = [
  2201,  1945,   nil,    24,    33,    37,    47,    57,    69,   108,
   148,   156,   162,   203,   234,   257,   266,   275,   321,    11,
   326,   nil,   nil,   358,   370,   375,   415,   425,   422,   361,
   432,   433,   nil,   456,   471,   476,   481,   nil,   nil,   484,
   528,   530,   529,   nil,   nil,   535,   541,   164,   nil,   nil,
   nil,   563,   567,    18,    21,  1798,   582,   nil,   nil,   nil,
   nil,   nil,   567,   nil,   nil,   581,   588,   nil,   586,   590,
   500,   nil,   592,   592,   598,   596,   620,   618,   624,   625,
   632,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2265,   630,   594,
   629,   675,    29,   243,   416,   764,   632,   nil,   nil,   631,
   632,   nil,   nil,   862,   344,   -13,   nil,     4,   136,   231,
   615,    28,   960,   634,   635,    -3,  1058,   602,   nil,   594,
   595,   641,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   196,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   641,
   642,   nil,   nil,   644,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   645,   646,   646,   647,   648,   nil,   nil,   nil,   422,    51,
   562,   315,   nil,   630,   nil,   671,   nil,   nil,   579,   671,
   nil,   690,   nil,   nil,   nil,   nil,   nil,  2009,   nil,   693,
   nil,   406,   nil,   694,   695,   696,   697,   698,   699,   700,
   701,   467,  1850,   702,   467,   nil,   nil,   nil,   655,   655,
   655,   424,   424,   317,   nil,   274,   nil,   nil,   nil,   nil,
   nil,   nil,   857,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   119,   nil,   nil,   105,   nil,   710,
   711,   712,   714,   715,   716,   717,   614,  1112,   676,  1166,
   717,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   351,
   406,   210,   nil,   nil,   722,   723,   721,   722,   194,   195,
   203,     1,   nil,   727,   728,   729,     3,    30,   209,   211,
     9,   nil,   730,   731,   734,   735,   736,   746,   747,   212,
   213,   214,   216,   217,   200,   nil,   767,   769,   770,   771,
   225,   nil,   748,   nil,    -2,   231,   315,   nil,   nil,   780,
   782,  1220,  1274,   204,   403,   nil,   nil,   420,   nil,   nil,
   732,   nil,   nil,   nil,   709,   955,  1851,   778,   nil,   nil,
   nil,   685,   nil,   765,   nil,  1328,  1382,  2133,   234,   474,
   nil,   nil,   786,    21,   nil,  1436,   nil,  2261,   769,  2371,
   156,   nil,   nil,     2,   792,   788,   238,   257,   nil,   nil,
   528,   nil,   nil,   nil,   793,   567,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   791,   nil,   792,  1524,  2429,
  2462,  2497,  2530,  2565,  2598,  2633,  2666,  2701,  2734,   nil,
   nil,   752,   791,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1579,   795,   252,   nil,    53,   796,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   757,   759,   459,
   nil,   797,   780,   780,   nil,   nil,   nil,   nil,   nil,   803,
   nil,   nil,    10,   804,   785,   nil,   803,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   807,   809,   811,
   812,   813,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   239,   811,   nil,   nil,   812,   nil,   nil,   nil,   nil,   816,
   817,   nil,   nil,   nil,  2769,   nil,   nil,   816,   817,   820,
   724,   nil,  2802,   507,   819,   820,   nil,   nil,   nil,   nil,
   145,   nil,   nil,   828,   nil,   825,   808,   nil,   756,   787,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   829,   nil,
   834,   nil,  2837,   nil,   nil,   nil,   852,   nil,   nil,  2329,
   nil,   853,   nil,   nil,   nil,   805,   808,   462,   464,   470,
   380,   405,   nil,   nil,   nil,   nil,   241,   861,   nil,    -8,
   nil,   nil,   759,   nil,   828,   829,   nil,     9,   nil,  1635,
   nil,   nil,   nil,   nil,   398,   422,   242,   269,   270,   298,
   nil,   876,   nil,   307,   nil,   nil,   nil,   nil,   nil,   874,
   316,   875,   876,   nil,   nil,   nil,   nil,   nil,   782,  2870,
   nil,  1690,  2905,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   529,   nil,   881,  2073,   nil,   886,   887,   888,   889,   890,
   891,   892,   893,   894,   896,   897,   898,   899,   902,   902,
   317,   nil,   nil,   795,   900,   nil,   nil,   nil,   nil,   nil,
   nil,   798,   801,   909,   872,   873,   nil,   321,   869,   nil,
   -47,   924,   820,    13,   nil,  1744,   nil,   821,    20,   906,
   906,   928,   nil,   nil,   nil,   nil,   nil,   nil,   949,   531,
   950,   956,   371,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  2393,   958,   nil,   965,   nil,   nil,   963,   nil,   322,   329,
    99,   nil,   109,   nil,   nil,   nil,   nil,   862,   931,   975,
   nil,   871,   342,   343,   344,   nil,  2938,   nil,   nil,   nil,
   975,   nil,   nil,   nil,  2137,   nil,   982,   983,   984,   985,
   986,   987,   988,   989,   990,   991,   992,   994,   995,   345,
   nil,   152,   161,   nil,   346,   nil,   947,   nil,   nil,   nil,
   nil,   971,   nil,   nil,   994,  1001,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   539,   nil,   nil,   nil,   nil,   347,   nil,   nil,  1002,
   nil,   nil ]

racc_action_default = [
   -18,  -477,    -1,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,   -76,   -77,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -477,   -93,  -477,  -477,  -477,  -477,  -132,  -133,  -477,
  -477,  -477,  -477,  -176,  -177,  -477,  -477,  -477,  -187,  -188,
  -189,  -477,  -477,  -477,  -477,  -477,  -477,  -278,  -279,  -280,
  -281,  -282,  -477,  -284,  -285,  -477,  -477,  -356,  -477,  -477,
  -477,  -365,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,    -2,    -3,    -4,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,  -173,   -24,
  -477,  -477,   -78,   -79,   -80,  -103,  -477,   -89,   -90,  -477,
  -477,   -91,   -92,  -103,  -477,  -477,  -126,  -134,  -151,  -161,
  -154,  -179,  -103,  -477,  -477,  -191,  -103,  -172,  -173,  -477,
  -477,  -477,  -231,  -232,  -233,  -234,  -235,  -236,  -237,  -238,
  -239,  -240,  -318,  -319,  -330,  -321,  -322,  -323,  -324,  -325,
  -326,  -327,  -328,  -329,  -331,  -333,  -334,  -335,  -336,  -337,
  -338,  -477,  -340,  -342,  -344,  -345,  -346,  -347,  -348,  -413,
  -415,  -475,  -277,  -477,  -287,  -288,  -289,  -290,  -291,  -292,
  -293,  -294,  -295,  -296,  -297,  -298,  -299,  -300,  -301,  -302,
  -303,  -304,  -305,  -306,  -307,  -308,  -309,  -310,  -349,  -350,
  -477,  -477,  -477,  -477,  -477,  -476,  -283,  -315,  -351,  -477,
  -361,  -477,  -363,  -477,  -382,  -477,  -383,  -388,  -477,  -390,
  -402,  -477,  -403,  -438,  -441,  -439,   802,  -477,   -21,  -477,
  -174,  -477,   -25,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -477,  -477,  -301,  -477,   -71,   -73,   -74,  -241,  -242,
  -244,  -246,  -248,  -251,  -254,  -477,  -259,  -260,  -261,  -262,
  -263,  -264,  -477,  -266,  -267,  -268,  -269,  -270,  -271,  -272,
  -273,  -274,  -275,   -83,  -477,   -85,   -87,  -477,   -94,  -477,
  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -451,  -452,  -453,  -470,  -471,  -472,  -473,   -82,  -178,
  -190,  -477,  -120,  -122,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -477,  -127,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -142,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -477,  -477,  -477,  -477,  -155,  -477,  -477,  -477,  -477,
  -477,  -185,  -203,  -204,  -477,  -477,  -477,  -200,  -211,  -477,
  -477,  -477,  -477,  -184,  -197,  -192,  -198,  -477,  -228,  -229,
  -477,  -320,  -332,  -339,  -341,  -477,  -477,  -286,  -311,  -313,
  -314,  -316,  -317,  -354,  -364,  -477,  -477,  -477,  -477,  -477,
  -353,  -358,  -477,  -477,  -374,  -477,  -377,  -477,  -477,  -477,
  -477,  -385,  -387,  -477,  -477,  -477,  -477,  -477,  -405,  -407,
  -477,   -19,   -22,  -175,  -477,  -477,   -27,   -28,   -29,   -30,
   -31,   -32,   -33,   -34,   -35,  -477,   -37,  -477,  -477,  -477,
  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -258,
  -263,  -477,  -104,  -105,  -107,   -81,   -95,   -96,   -97,   -98,
   -99,  -100,  -101,  -102,  -477,  -477,  -450,  -446,  -477,  -477,
  -445,  -181,  -194,  -108,  -121,  -123,  -124,  -477,  -477,  -477,
  -117,  -118,  -477,  -116,  -125,  -128,  -129,  -130,  -131,  -477,
  -170,  -171,  -477,  -477,  -137,  -140,  -141,  -138,  -135,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -477,  -477,  -477,
  -477,  -477,  -152,  -156,  -157,  -158,  -159,  -160,  -153,  -202,
  -477,  -206,  -208,  -210,  -207,  -180,  -201,  -212,  -213,  -477,
  -477,  -183,  -196,  -193,  -477,  -343,  -276,  -477,  -477,  -477,
  -416,  -417,  -477,  -477,  -477,  -477,  -355,  -357,  -352,  -359,
  -477,  -362,  -375,  -477,  -378,  -477,  -477,  -380,  -330,  -477,
  -367,  -368,  -369,  -370,  -371,  -372,  -373,  -384,  -477,  -392,
  -477,  -393,  -477,  -389,  -391,  -404,  -477,  -440,  -442,  -477,
   -26,  -477,   -36,   -70,   -72,  -243,  -245,  -247,  -249,  -250,
  -252,  -253,  -255,  -256,  -257,  -265,  -477,  -477,  -316,  -432,
  -422,  -443,  -448,  -449,  -477,  -477,  -454,  -477,  -456,  -477,
  -459,  -460,  -461,  -444,  -477,  -477,  -477,  -477,  -477,  -477,
  -162,  -477,  -164,  -477,  -165,  -166,  -167,  -168,  -169,  -205,
  -477,  -214,  -215,  -230,  -412,  -414,  -312,  -418,  -477,  -477,
  -409,  -477,  -477,  -360,  -376,  -381,  -379,  -366,  -386,  -394,
  -477,  -406,  -477,  -477,   -38,  -477,  -477,  -477,  -477,  -477,
  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -477,  -106,  -420,  -436,  -435,  -421,  -423,  -424,  -425,  -426,
  -427,  -430,  -431,  -477,  -477,  -477,  -447,  -477,  -477,  -455,
  -477,  -477,  -216,  -477,  -224,  -477,  -227,  -220,  -477,  -477,
  -114,  -113,  -115,  -119,  -163,  -136,  -209,  -419,  -477,  -477,
  -477,  -397,  -477,   -20,   -23,   -39,   -40,   -41,   -42,   -43,
   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,
  -477,  -477,  -434,  -477,  -428,  -429,  -433,  -436,  -477,  -477,
  -477,  -465,  -477,  -468,  -457,  -458,  -218,  -217,  -477,  -477,
  -222,  -221,  -477,  -477,  -477,  -408,  -477,  -411,  -474,  -395,
  -477,  -399,  -400,  -401,  -477,   -55,  -477,  -477,  -477,  -477,
  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
  -437,  -477,  -477,  -462,  -477,  -467,  -477,  -219,  -225,  -226,
  -223,  -110,  -111,  -112,  -477,  -398,   -54,   -56,   -57,   -58,
   -59,   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,
   -69,  -477,  -463,  -464,  -466,  -469,  -477,  -410,  -396,  -477,
  -109,   -75 ]

racc_goto_table = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
   132,   445,   294,   462,   137,   135,   141,   232,   246,   193,
   294,   247,   517,   518,   398,   432,   245,   302,   367,   294,
   588,   682,   133,   294,   525,   338,   134,   138,   391,   335,
   477,   381,   582,     2,    81,   322,   336,   131,   312,   321,
   304,   501,   136,   243,   129,   130,   140,   178,   469,   473,
   194,   654,   341,   521,   295,   195,   356,   661,   583,   662,
   476,   634,   295,   196,   616,   323,   337,   197,     1,   720,
   394,   295,   754,   745,   278,   295,   173,   296,   193,   200,
   625,   227,   303,   231,   384,   296,   504,     3,   506,     4,
   633,     5,   260,    16,   296,    17,   297,   315,   296,   506,
   328,   339,   201,    99,   297,   744,   754,   777,   471,   471,
   346,   638,   244,   297,   357,   277,   178,   297,   651,   194,
   761,   762,   673,   678,   195,   273,   275,   276,   568,   569,
   228,   301,   196,   570,   571,   695,   197,   716,   459,   311,
   715,   714,   572,   573,   574,   355,   320,   474,   200,   334,
   499,   686,   768,   565,   566,   772,   773,   567,   577,   579,
   429,   791,   193,   172,   206,   379,   526,   383,   212,   618,
   539,   201,   431,   533,   294,   534,   214,   390,   217,   639,
   553,   393,   740,   220,   294,   638,   294,   132,   397,   520,
   652,   137,   135,   141,   666,   655,   580,   609,   294,   630,
   178,   529,   617,   194,   601,   454,   656,   657,   195,   133,
   658,   659,   660,   134,   138,   223,   196,     3,   800,     4,
   197,     5,   558,    16,   415,    17,   295,   530,   304,   136,
   451,   452,   200,   140,   465,   400,   295,   322,   295,   712,
   338,   479,   724,   294,   493,   550,   436,   446,   581,   296,
   295,   336,   640,   639,   294,   201,   532,   449,   726,   296,
   402,   296,   749,   730,   471,   434,   688,   323,   297,   690,
   303,   447,   587,   296,   722,   nil,   nil,   nil,   297,   nil,
   297,   337,   523,   524,   511,   512,   nil,   nil,   nil,   nil,
   679,   653,   297,   315,   641,   295,   749,   536,   nil,   460,
   434,   463,   328,   671,   193,   193,   295,   470,   470,   475,
   434,   560,   nil,   767,   685,   nil,   339,   770,   296,   nil,
   487,   488,   489,   490,   491,   246,   640,   642,   247,   296,
   750,   498,   193,   564,   540,   503,   434,   297,   193,   542,
   545,   294,   178,   178,   476,   194,   194,   561,   297,   631,
   195,   195,   645,   193,   611,   612,   541,   nil,   196,   196,
   546,   628,   197,   197,   750,   646,   178,   178,   641,   527,
   178,   509,   510,   194,   200,   200,   178,   717,   195,   194,
   544,   649,   nil,   774,   195,   725,   196,   554,   543,   729,
   197,   178,   196,   295,   194,   nil,   197,   201,   201,   195,
   nil,   642,   200,   751,   nil,   535,   nil,   196,   200,   260,
   nil,   197,   nil,   nil,   nil,   nil,   296,   nil,   nil,   nil,
   nil,   nil,   nil,   200,   613,   201,   645,   760,   nil,   nil,
   nil,   201,   nil,   nil,   nil,   297,   nil,   751,   nil,   646,
   nil,   nil,   nil,   769,   nil,   752,   201,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   649,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   470,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   753,   752,
   nil,   nil,   nil,   nil,   nil,   nil,   294,   nil,   nil,   nil,
   nil,   503,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   755,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   753,   nil,   nil,   nil,   756,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   689,   nil,
   nil,   nil,   649,   nil,   nil,   nil,   nil,   755,   295,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   635,
   756,   636,   nil,   637,   nil,   647,   nil,   648,   nil,   nil,
   nil,   296,   nil,   nil,   nil,   nil,   649,   434,   nil,   nil,
   nil,   nil,   294,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   297,   nil,   nil,   nil,   nil,   nil,   nil,   434,   680,   681,
   683,   nil,   nil,   nil,   434,   nil,   nil,   nil,   nil,   nil,
   nil,   503,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   178,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   635,   295,   636,   nil,   637,   nil,   647,
   nil,   648,   nil,   nil,   nil,   nil,   nil,   743,   nil,   nil,
   nil,   711,   741,   742,   nil,   nil,   nil,   296,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   721,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   297,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   746,   nil,   747,   nil,   748,   nil,   757,   nil,   758,   721,
   721,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   771,   683,   683,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   746,   nil,   747,   nil,   748,   nil,
   757,   nil,   758,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   721,   nil,   nil,   nil,   nil,   794,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   683 ]

racc_goto_check = [
     3,     3,     4,     4,     5,     5,    16,    16,    17,    17,
   105,   103,   136,    56,   110,   108,   113,    24,    34,   127,
   136,    35,   125,   125,   183,    51,    33,    58,    98,   136,
   208,    57,   106,   136,   125,    76,   107,   111,   173,    79,
    71,   159,   100,     2,     2,    64,    64,    25,    63,    72,
    59,    95,   109,    26,    36,    36,    36,    36,    80,    80,
   129,   196,    86,   185,   110,   131,    86,   194,   206,   195,
    51,    27,   110,   133,   142,    65,    65,   134,     1,    37,
   178,   110,    28,    31,    48,   110,    90,   111,   127,   155,
   142,    19,    48,    21,   166,   111,    51,     3,    92,     4,
    22,     5,    36,    16,   111,    17,    36,    49,   111,    92,
    49,    49,   160,    23,    36,    30,    28,    31,    81,    81,
    85,     6,    32,    36,    85,    44,    36,    36,    52,   129,
    37,    37,    99,    99,   131,    46,    46,    46,   118,   118,
     2,    54,   133,   119,   119,    27,   134,   196,    55,    62,
   194,   195,   120,   120,   120,    90,    69,    70,   155,    78,
    94,    96,   101,   115,   116,    57,    57,   117,   103,   104,
   122,    37,   127,   126,   132,   157,   158,   162,   164,   125,
   165,   160,    35,   168,   136,   169,   171,   172,   175,     7,
   176,   177,   179,   181,   136,     6,   136,   105,   182,   184,
   186,   110,   108,   113,   206,   187,   188,    95,   136,   125,
    36,   159,   185,   129,    80,    58,   189,   190,   131,   106,
   191,   192,   193,   107,   111,   198,   133,     3,    57,     4,
   134,     5,   159,    16,    25,    17,   110,    98,    59,   109,
    86,    86,   155,    36,    63,   199,   110,    64,   110,   100,
    76,    72,   208,   136,    79,   178,    48,   201,   202,   111,
   110,    64,     8,     7,   136,   160,   166,   204,   100,   111,
     2,   111,     6,   100,    81,    36,   125,    65,    36,   125,
    48,   205,   207,   111,   210,   nil,   nil,   nil,    36,   nil,
    36,    65,    34,    34,    86,    86,   nil,   nil,   nil,   nil,
    56,   104,    36,    49,     9,   110,     6,    35,   nil,    36,
    36,    36,    49,   103,   127,   127,   110,    36,    36,    36,
    36,    24,   nil,   100,    71,   nil,    49,   100,   111,   nil,
    36,    36,    36,    36,    36,    34,     8,    10,    35,   111,
     7,    36,   127,    33,   105,    36,    36,    36,   127,   108,
   113,   136,    36,    36,    51,   129,   129,    26,    36,   183,
   131,   131,    14,   127,    98,    98,   106,   nil,   133,   133,
   107,   173,   134,   134,     7,    15,    36,    36,     9,    36,
    36,    90,    90,   129,   155,   155,    36,   104,   131,   129,
    36,    18,   nil,   125,   131,   104,   133,    36,   131,   103,
   134,    36,   133,   110,   129,   nil,   134,   160,   160,   131,
   nil,    10,   155,     8,   nil,    90,   nil,   133,   155,    36,
   nil,   134,   nil,   nil,   nil,   nil,   111,   nil,   nil,   nil,
   nil,   nil,   nil,   155,    35,   160,    14,   104,   nil,   nil,
   nil,   160,   nil,   nil,   nil,    36,   nil,     8,   nil,    15,
   nil,   nil,   nil,   104,   nil,     9,   160,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,    14,   110,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
    15,     4,   nil,     5,   nil,    16,   nil,    17,   nil,   nil,
   nil,   111,   nil,   nil,   nil,   nil,    18,    36,   nil,   nil,
   nil,   nil,   136,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,    36,    36,    36,
    36,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   110,     4,   nil,     5,   nil,    16,
   nil,    17,   nil,   nil,   nil,   nil,   nil,   105,   nil,   nil,
   nil,    36,   108,   113,   nil,   nil,   nil,   111,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,     4,   nil,     5,   nil,    16,   nil,    17,    36,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,    36,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     3,   nil,     4,   nil,     5,   nil,
    16,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36 ]

racc_goto_pointer = [
   nil,    78,    43,     0,     2,     4,  -438,  -370,  -297,  -255,
  -222,   nil,   nil,   nil,  -197,  -184,     6,     8,  -168,    -6,
   nil,    -8,  -459,    94,   -84,    -8,   -48,  -488,  -628,   nil,
  -595,  -627,    21,   -75,   -83,   -80,     1,  -588,   nil,   nil,
   nil,   nil,   nil,   nil,    20,   nil,    33,   nil,   -21,    -8,
   nil,  -249,  -448,   nil,    28,  -160,  -296,  -568,   -86,   -63,
   nil,   nil,    34,   -67,   -73,   -43,   nil,   nil,   nil,    38,
  -161,  -279,   -69,   nil,   nil,   nil,   -84,   nil,    40,   -80,
  -258,  -198,   nil,   nil,   nil,    -2,   -59,   nil,   nil,   nil,
    30,   nil,  -248,   nil,  -182,  -293,  -449,   nil,  -145,  -462,
  -404,  -566,   nil,  -276,  -276,   -45,   -23,   -19,   -40,    -3,
   -41,   -18,   nil,   -39,   nil,  -256,  -256,  -254,  -284,  -281,
  -274,   nil,   -85,   nil,   nil,  -343,   117,   -37,   nil,     4,
   nil,     9,   112,    17,    21,   nil,   -93,   nil,   nil,   nil,
   nil,   nil,  -445,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   -34,  -202,  -168,
    56,   nil,   -34,   nil,   108,  -209,  -117,   nil,  -202,  -200,
   nil,   114,   -28,  -177,   nil,   114,  -206,   -27,  -138,  -500,
   nil,   117,   -23,  -197,  -172,  -308,  -377,  -374,  -239,  -363,
  -362,  -359,  -358,  -357,  -512,  -510,  -516,   nil,   147,    21,
   nil,   -31,  -188,   nil,   -22,    -7,  -378,  -166,  -418,   nil,
  -384 ]

racc_goto_default = [
   nil,   nil,   nil,   279,   280,   281,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,   284,   285,    18,   nil,
    20,   nil,   nil,   127,   nil,   nil,   188,   nil,   643,   644,
   nil,   nil,   nil,   nil,   174,   516,   430,   nil,    21,    22,
    23,    24,    25,    26,   nil,    27,   nil,    30,   348,   282,
   283,   461,   433,    33,   nil,   nil,   nil,   nil,   nil,   350,
   305,    35,   nil,   nil,   313,   314,    37,    38,    40,   nil,
   nil,   nil,   nil,   324,   325,   326,   327,    41,   nil,   nil,
   nil,   186,    43,    44,    46,   nil,   nil,    48,    49,    50,
   382,    52,   347,   342,   343,   nil,   502,   349,   nil,   nil,
   nil,   674,   675,   292,   369,   180,   181,   182,   183,   179,
   189,   190,   139,   184,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   261,   270,   nil,   nil,    57,    58,    59,
    60,    61,   nil,    63,    64,   175,   176,   177,   185,   187,
   191,   192,   368,   370,   372,   145,   146,   147,   148,   149,
   150,   156,   157,   158,   159,    65,    66,   nil,   nil,   nil,
    68,    69,   nil,    70,   nil,   nil,   nil,   385,   nil,   386,
    72,   nil,   nil,   nil,    74,   nil,   nil,   nil,   nil,   nil,
    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,   nil,
   288,   nil,   nil,   289,   290,   nil,   nil,   nil,   nil,   589,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 118, :_reduce_none,
  2, 118, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  2, 119, :_reduce_none,
  0, 119, :_reduce_none,
  4, 128, :_reduce_19,
  2, 135, :_reduce_20,
  1, 136, :_reduce_none,
  2, 136, :_reduce_none,
  7, 129, :_reduce_23,
  2, 137, :_reduce_24,
  1, 138, :_reduce_none,
  3, 138, :_reduce_none,
  2, 141, :_reduce_27,
  2, 141, :_reduce_28,
  2, 141, :_reduce_29,
  2, 141, :_reduce_30,
  2, 141, :_reduce_31,
  2, 141, :_reduce_32,
  2, 141, :_reduce_33,
  2, 141, :_reduce_34,
  2, 141, :_reduce_35,
  3, 141, :_reduce_36,
  2, 141, :_reduce_37,
  1, 139, :_reduce_none,
  2, 139, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  2, 144, :_reduce_none,
  4, 145, :_reduce_54,
  1, 147, :_reduce_none,
  2, 147, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  2, 148, :_reduce_none,
  5, 130, :_reduce_70,
  1, 149, :_reduce_71,
  3, 149, :_reduce_72,
  1, 150, :_reduce_73,
  1, 150, :_reduce_74,
  6, 146, :_reduce_75,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  2, 156, :_reduce_78,
  2, 156, :_reduce_79,
  2, 156, :_reduce_80,
  4, 155, :_reduce_81,
  3, 155, :_reduce_82,
  3, 160, :_reduce_83,
  2, 160, :_reduce_84,
  3, 160, :_reduce_85,
  2, 160, :_reduce_86,
  3, 160, :_reduce_87,
  2, 160, :_reduce_88,
  2, 157, :_reduce_89,
  2, 158, :_reduce_90,
  2, 162, :_reduce_91,
  2, 164, :_reduce_92,
  1, 159, :_reduce_93,
  1, 161, :_reduce_none,
  2, 161, :_reduce_none,
  2, 165, :_reduce_none,
  2, 165, :_reduce_none,
  2, 165, :_reduce_none,
  2, 165, :_reduce_none,
  2, 165, :_reduce_none,
  2, 165, :_reduce_none,
  2, 165, :_reduce_none,
  0, 165, :_reduce_none,
  2, 163, :_reduce_104,
  1, 168, :_reduce_105,
  3, 168, :_reduce_106,
  1, 169, :_reduce_none,
  4, 127, :_reduce_108,
  10, 170, :_reduce_109,
  8, 170, :_reduce_110,
  8, 170, :_reduce_111,
  8, 170, :_reduce_112,
  6, 170, :_reduce_113,
  6, 170, :_reduce_114,
  6, 170, :_reduce_115,
  4, 170, :_reduce_116,
  1, 172, :_reduce_none,
  1, 173, :_reduce_none,
  1, 174, :_reduce_none,
  1, 171, :_reduce_none,
  2, 171, :_reduce_none,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  4, 124, :_reduce_125,
  2, 178, :_reduce_126,
  1, 179, :_reduce_none,
  2, 179, :_reduce_none,
  2, 180, :_reduce_none,
  2, 180, :_reduce_none,
  2, 180, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  2, 184, :_reduce_134,
  4, 183, :_reduce_135,
  6, 185, :_reduce_136,
  4, 185, :_reduce_137,
  4, 185, :_reduce_138,
  2, 185, :_reduce_139,
  1, 187, :_reduce_none,
  1, 188, :_reduce_none,
  1, 186, :_reduce_none,
  2, 186, :_reduce_none,
  2, 189, :_reduce_none,
  2, 189, :_reduce_none,
  2, 189, :_reduce_none,
  2, 189, :_reduce_none,
  2, 189, :_reduce_none,
  2, 189, :_reduce_none,
  2, 189, :_reduce_none,
  0, 189, :_reduce_none,
  4, 126, :_reduce_152,
  4, 194, :_reduce_153,
  2, 194, :_reduce_154,
  1, 195, :_reduce_none,
  2, 195, :_reduce_none,
  2, 196, :_reduce_none,
  2, 196, :_reduce_none,
  2, 196, :_reduce_none,
  2, 196, :_reduce_none,
  0, 196, :_reduce_none,
  3, 181, :_reduce_162,
  4, 182, :_reduce_163,
  3, 182, :_reduce_164,
  3, 191, :_reduce_165,
  3, 190, :_reduce_166,
  3, 192, :_reduce_167,
  3, 193, :_reduce_168,
  3, 193, :_reduce_169,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 153, :_reduce_172,
  1, 140, :_reduce_173,
  2, 140, :_reduce_174,
  3, 140, :_reduce_175,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  3, 200, :_reduce_178,
  2, 200, :_reduce_179,
  4, 199, :_reduce_180,
  4, 201, :_reduce_181,
  3, 201, :_reduce_182,
  4, 201, :_reduce_183,
  3, 201, :_reduce_184,
  3, 201, :_reduce_185,
  2, 201, :_reduce_186,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  3, 206, :_reduce_190,
  2, 206, :_reduce_191,
  3, 205, :_reduce_192,
  4, 204, :_reduce_193,
  4, 208, :_reduce_194,
  3, 208, :_reduce_195,
  4, 208, :_reduce_196,
  3, 208, :_reduce_197,
  3, 208, :_reduce_198,
  2, 208, :_reduce_199,
  1, 202, :_reduce_none,
  2, 202, :_reduce_none,
  2, 203, :_reduce_202,
  1, 203, :_reduce_203,
  1, 203, :_reduce_204,
  3, 210, :_reduce_205,
  2, 210, :_reduce_206,
  2, 211, :_reduce_207,
  1, 212, :_reduce_208,
  3, 212, :_reduce_209,
  1, 213, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 214, :_reduce_214,
  3, 214, :_reduce_215,
  4, 176, :_reduce_216,
  5, 176, :_reduce_217,
  5, 176, :_reduce_218,
  6, 176, :_reduce_219,
  4, 177, :_reduce_220,
  5, 177, :_reduce_221,
  5, 177, :_reduce_222,
  6, 177, :_reduce_223,
  1, 216, :_reduce_224,
  3, 216, :_reduce_225,
  3, 218, :_reduce_226,
  1, 219, :_reduce_none,
  3, 134, :_reduce_228,
  3, 133, :_reduce_229,
  5, 121, :_reduce_230,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 152, :_reduce_none,
  1, 231, :_reduce_none,
  3, 231, :_reduce_243,
  1, 232, :_reduce_none,
  3, 232, :_reduce_245,
  1, 233, :_reduce_none,
  3, 233, :_reduce_247,
  1, 234, :_reduce_none,
  3, 234, :_reduce_249,
  3, 234, :_reduce_250,
  1, 235, :_reduce_none,
  3, 235, :_reduce_252,
  3, 235, :_reduce_253,
  1, 236, :_reduce_none,
  3, 236, :_reduce_255,
  3, 236, :_reduce_256,
  3, 236, :_reduce_257,
  2, 237, :_reduce_258,
  1, 237, :_reduce_none,
  1, 238, :_reduce_260,
  1, 238, :_reduce_261,
  1, 238, :_reduce_262,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  3, 239, :_reduce_265,
  1, 240, :_reduce_266,
  1, 240, :_reduce_267,
  1, 240, :_reduce_268,
  1, 240, :_reduce_269,
  1, 240, :_reduce_270,
  1, 240, :_reduce_271,
  1, 240, :_reduce_272,
  1, 240, :_reduce_273,
  1, 241, :_reduce_274,
  1, 241, :_reduce_275,
  1, 242, :_reduce_276,
  2, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  2, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  2, 243, :_reduce_286,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 215, :_reduce_311,
  3, 215, :_reduce_312,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 249, :_reduce_315,
  1, 221, :_reduce_none,
  1, 260, :_reduce_none,
  1, 226, :_reduce_318,
  1, 226, :_reduce_319,
  2, 226, :_reduce_320,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 262, :_reduce_none,
  1, 262, :_reduce_none,
  1, 262, :_reduce_none,
  1, 262, :_reduce_none,
  1, 267, :_reduce_327,
  1, 264, :_reduce_328,
  1, 264, :_reduce_329,
  1, 265, :_reduce_330,
  1, 265, :_reduce_331,
  2, 266, :_reduce_332,
  1, 266, :_reduce_333,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  1, 271, :_reduce_338,
  2, 268, :_reduce_339,
  1, 268, :_reduce_340,
  2, 269, :_reduce_341,
  1, 269, :_reduce_342,
  3, 270, :_reduce_343,
  1, 270, :_reduce_344,
  1, 223, :_reduce_345,
  1, 224, :_reduce_346,
  1, 225, :_reduce_347,
  1, 230, :_reduce_348,
  1, 255, :_reduce_349,
  1, 198, :_reduce_350,
  2, 245, :_reduce_351,
  4, 244, :_reduce_352,
  3, 244, :_reduce_353,
  2, 273, :_reduce_354,
  4, 273, :_reduce_355,
  1, 272, :_reduce_356,
  1, 275, :_reduce_none,
  1, 274, :_reduce_none,
  2, 274, :_reduce_none,
  3, 276, :_reduce_360,
  2, 247, :_reduce_361,
  4, 246, :_reduce_362,
  2, 278, :_reduce_363,
  2, 280, :_reduce_364,
  1, 277, :_reduce_365,
  4, 281, :_reduce_366,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_372,
  1, 282, :_reduce_373,
  1, 279, :_reduce_none,
  2, 279, :_reduce_none,
  3, 283, :_reduce_376,
  1, 284, :_reduce_377,
  2, 284, :_reduce_378,
  3, 286, :_reduce_379,
  2, 286, :_reduce_380,
  2, 285, :_reduce_381,
  2, 250, :_reduce_382,
  2, 287, :_reduce_383,
  3, 288, :_reduce_none,
  1, 289, :_reduce_none,
  3, 289, :_reduce_none,
  1, 290, :_reduce_387,
  2, 251, :_reduce_388,
  4, 291, :_reduce_389,
  2, 291, :_reduce_390,
  1, 293, :_reduce_none,
  3, 292, :_reduce_none,
  2, 294, :_reduce_none,
  3, 294, :_reduce_none,
  5, 295, :_reduce_395,
  7, 295, :_reduce_396,
  4, 295, :_reduce_397,
  6, 295, :_reduce_398,
  1, 296, :_reduce_none,
  1, 296, :_reduce_none,
  1, 296, :_reduce_none,
  2, 248, :_reduce_402,
  2, 297, :_reduce_403,
  3, 298, :_reduce_none,
  1, 299, :_reduce_none,
  3, 299, :_reduce_none,
  1, 300, :_reduce_407,
  6, 143, :_reduce_408,
  4, 143, :_reduce_409,
  8, 258, :_reduce_410,
  6, 258, :_reduce_411,
  4, 227, :_reduce_412,
  1, 227, :_reduce_413,
  4, 228, :_reduce_414,
  1, 228, :_reduce_415,
  2, 261, :_reduce_416,
  1, 301, :_reduce_417,
  2, 301, :_reduce_418,
  3, 302, :_reduce_419,
  4, 166, :_reduce_420,
  4, 166, :_reduce_421,
  3, 166, :_reduce_422,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  2, 306, :_reduce_428,
  2, 307, :_reduce_429,
  1, 308, :_reduce_430,
  1, 309, :_reduce_431,
  0, 310, :_reduce_432,
  3, 305, :_reduce_433,
  2, 303, :_reduce_434,
  1, 303, :_reduce_435,
  1, 313, :_reduce_436,
  3, 313, :_reduce_437,
  2, 122, :_reduce_438,
  2, 314, :_reduce_439,
  3, 315, :_reduce_none,
  0, 316, :_reduce_none,
  2, 316, :_reduce_none,
  3, 167, :_reduce_none,
  3, 317, :_reduce_444,
  2, 317, :_reduce_445,
  1, 318, :_reduce_none,
  2, 319, :_reduce_447,
  1, 319, :_reduce_448,
  1, 319, :_reduce_449,
  0, 319, :_reduce_450,
  1, 320, :_reduce_451,
  1, 321, :_reduce_452,
  1, 321, :_reduce_453,
  2, 322, :_reduce_none,
  3, 322, :_reduce_none,
  1, 324, :_reduce_none,
  3, 324, :_reduce_none,
  3, 325, :_reduce_458,
  1, 326, :_reduce_459,
  1, 326, :_reduce_460,
  1, 326, :_reduce_461,
  4, 217, :_reduce_462,
  4, 311, :_reduce_463,
  4, 312, :_reduce_464,
  1, 154, :_reduce_465,
  3, 154, :_reduce_466,
  4, 323, :_reduce_467,
  1, 327, :_reduce_468,
  3, 327, :_reduce_469,
  1, 220, :_reduce_470,
  1, 220, :_reduce_471,
  1, 220, :_reduce_472,
  1, 220, :_reduce_473,
  6, 257, :_reduce_474,
  1, 229, :_reduce_475,
  1, 256, :_reduce_476 ]

racc_reduce_n = 477

racc_shift_n = 802

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "{" => 3,
  "}" => 4,
  "module" => 5,
  :identifier => 6,
  "<" => 7,
  ">" => 8,
  "," => 9,
  "typename" => 10,
  "interface" => 11,
  "valuetype" => 12,
  "eventtype" => 13,
  "struct" => 14,
  "union" => 15,
  "exception" => 16,
  "enum" => 17,
  "sequence" => 18,
  "const" => 19,
  "alias" => 20,
  "local" => 21,
  "abstract" => 22,
  "pseudo" => 23,
  ":" => 24,
  "home" => 25,
  "supports" => 26,
  "manages" => 27,
  "primarykey" => 28,
  "porttype" => 29,
  "component" => 30,
  "connector" => 31,
  "provides" => 32,
  "uses" => 33,
  "multiple" => 34,
  "publishes" => 35,
  "emits" => 36,
  "consumes" => 37,
  "port" => 38,
  "mirrorport" => 39,
  "::" => 40,
  "custom" => 41,
  "truncatable" => 42,
  "public" => 43,
  "private" => 44,
  "factory" => 45,
  "(" => 46,
  ")" => 47,
  "finder" => 48,
  "in" => 49,
  "typeprefix" => 50,
  :string_literal => 51,
  "typeid" => 52,
  "=" => 53,
  "|" => 54,
  "^" => 55,
  "&" => 56,
  ">>" => 57,
  "<<" => 58,
  "+" => 59,
  "-" => 60,
  "*" => 61,
  "/" => 62,
  "%" => 63,
  "~" => 64,
  :integer_literal => 65,
  :wide_string_literal => 66,
  :character_literal => 67,
  :wide_character_literal => 68,
  :fixed_pt_literal => 69,
  :floating_pt_literal => 70,
  "TRUE" => 71,
  "FALSE" => 72,
  "typedef" => 73,
  "native" => 74,
  "float" => 75,
  "double" => 76,
  "long" => 77,
  "int8" => 78,
  "short" => 79,
  "int16" => 80,
  "int32" => 81,
  "int64" => 82,
  "uint8" => 83,
  "unsigned" => 84,
  "uint16" => 85,
  "uint32" => 86,
  "uint64" => 87,
  "char" => 88,
  "wchar" => 89,
  "boolean" => 90,
  "octet" => 91,
  "any" => 92,
  "Object" => 93,
  "switch" => 94,
  "case" => 95,
  "default" => 96,
  "bitmask" => 97,
  "bitset" => 98,
  "bitfield" => 99,
  "map" => 100,
  "string" => 101,
  "wstring" => 102,
  "[" => 103,
  "]" => 104,
  "readonly" => 105,
  "attribute" => 106,
  "oneway" => 107,
  "void" => 108,
  "out" => 109,
  "inout" => 110,
  "raises" => 111,
  "getraises" => 112,
  "setraises" => 113,
  "context" => 114,
  "fixed" => 115,
  "ValueBase" => 116 }

racc_nt_base = 117

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\"module\"",
  "identifier",
  "\"<\"",
  "\">\"",
  "\",\"",
  "\"typename\"",
  "\"interface\"",
  "\"valuetype\"",
  "\"eventtype\"",
  "\"struct\"",
  "\"union\"",
  "\"exception\"",
  "\"enum\"",
  "\"sequence\"",
  "\"const\"",
  "\"alias\"",
  "\"local\"",
  "\"abstract\"",
  "\"pseudo\"",
  "\":\"",
  "\"home\"",
  "\"supports\"",
  "\"manages\"",
  "\"primarykey\"",
  "\"porttype\"",
  "\"component\"",
  "\"connector\"",
  "\"provides\"",
  "\"uses\"",
  "\"multiple\"",
  "\"publishes\"",
  "\"emits\"",
  "\"consumes\"",
  "\"port\"",
  "\"mirrorport\"",
  "\"::\"",
  "\"custom\"",
  "\"truncatable\"",
  "\"public\"",
  "\"private\"",
  "\"factory\"",
  "\"(\"",
  "\")\"",
  "\"finder\"",
  "\"in\"",
  "\"typeprefix\"",
  "string_literal",
  "\"typeid\"",
  "\"=\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\">>\"",
  "\"<<\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "integer_literal",
  "wide_string_literal",
  "character_literal",
  "wide_character_literal",
  "fixed_pt_literal",
  "floating_pt_literal",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"typedef\"",
  "\"native\"",
  "\"float\"",
  "\"double\"",
  "\"long\"",
  "\"int8\"",
  "\"short\"",
  "\"int16\"",
  "\"int32\"",
  "\"int64\"",
  "\"uint8\"",
  "\"unsigned\"",
  "\"uint16\"",
  "\"uint32\"",
  "\"uint64\"",
  "\"char\"",
  "\"wchar\"",
  "\"boolean\"",
  "\"octet\"",
  "\"any\"",
  "\"Object\"",
  "\"switch\"",
  "\"case\"",
  "\"default\"",
  "\"bitmask\"",
  "\"bitset\"",
  "\"bitfield\"",
  "\"map\"",
  "\"string\"",
  "\"wstring\"",
  "\"[\"",
  "\"]\"",
  "\"readonly\"",
  "\"attribute\"",
  "\"oneway\"",
  "\"void\"",
  "\"out\"",
  "\"inout\"",
  "\"raises\"",
  "\"getraises\"",
  "\"setraises\"",
  "\"context\"",
  "\"fixed\"",
  "\"ValueBase\"",
  "$start",
  "specification",
  "definition",
  "type_dcl",
  "const_dcl",
  "except_dcl",
  "interface",
  "porttype",
  "component",
  "connector",
  "home",
  "module",
  "template_module",
  "template_module_inst",
  "value",
  "event",
  "typeid",
  "typeprefix",
  "module_header",
  "_definition_1",
  "template_module_header",
  "template_module_parameters",
  "template_module_body",
  "scoped_name_0",
  "template_module_parameter",
  "const_type",
  "sequence_type",
  "template_module_definition",
  "fixed_module",
  "template_module_reference",
  "fixed_module_body",
  "fixed_module_definition",
  "template_module_inst_parameters",
  "template_module_inst_parameter",
  "simple_type_spec",
  "const_exp",
  "scoped_name",
  "_scoped_name_list",
  "interface_dcl",
  "forward_dcl",
  "local_interface_",
  "abstract_interface_",
  "regular_interface_",
  "interface_header",
  "interface_body",
  "pseudo_interface_header",
  "interface_inheritance_spec",
  "pseudo_interface_",
  "export",
  "attr_dcl",
  "op_dcl",
  "_interface_name_list",
  "interface_name",
  "home_header",
  "home_body",
  "home_inheritance_spec",
  "home_supports_spec",
  "home_primarykey_spec",
  "home_export",
  "init_dcl",
  "finder_dcl",
  "porttype_header",
  "porttype_body",
  "porttype_export",
  "provides_dcl",
  "uses_dcl",
  "component_dcl",
  "component_forward_dcl",
  "component_header",
  "component_body",
  "component_inheritance_spec",
  "component_supports_spec",
  "component_export",
  "emits_dcl",
  "publishes_dcl",
  "consumes_dcl",
  "port_dcl",
  "connector_header",
  "connector_body",
  "connector_export",
  "interface_type",
  "object_type",
  "event_dcl",
  "event_forward_dcl",
  "eventtype_header",
  "value_body",
  "value_inheritance_spec",
  "value_dcl",
  "value_box_dcl",
  "value_forward_dcl",
  "type_spec",
  "valuetype_header",
  "value_element",
  "value_basevalue_list",
  "value_interface_support_list",
  "_value_name_list",
  "value_name",
  "state_member",
  "declarators",
  "init_param_decls",
  "raises_expr",
  "init_param_decl",
  "init_param_attribute",
  "param_type_spec",
  "simple_declarator",
  "integer_type",
  "char_type",
  "wide_char_type",
  "boolean_type",
  "floating_pt_type",
  "string_type",
  "wide_string_type",
  "fixed_pt_const_type",
  "octet_type",
  "or_expr",
  "xor_expr",
  "and_expr",
  "shift_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "unary_operator",
  "primary_expr",
  "literal",
  "boolean_literal",
  "positive_int_const",
  "type_declarator",
  "struct_type",
  "struct_forward_dcl",
  "union_type",
  "union_forward_dcl",
  "enum_type",
  "native_declarator",
  "bitmask_type",
  "bitset_type",
  "constr_type_spec",
  "base_type_spec",
  "template_type_spec",
  "any_type",
  "value_base_type",
  "fixed_pt_type",
  "map_type",
  "declarator",
  "complex_declarator",
  "array_declarator",
  "signed_int",
  "unsigned_int",
  "signed_short_int",
  "signed_long_int",
  "signed_longlong_int",
  "tiny_short_int",
  "unsigned_short_int",
  "unsigned_long_int",
  "unsigned_longlong_int",
  "unsigned_tiny_short_int",
  "struct_def",
  "struct_header",
  "member_list",
  "struct_inheritance_spec",
  "member",
  "union_def",
  "union_header",
  "union_body",
  "union_dcl",
  "union_switch_spec",
  "switch_type_spec",
  "union_case",
  "_case_label_1",
  "element_spec",
  "case_label",
  "bitmask_header",
  "bitmask_body",
  "bitmask_list",
  "bit_value",
  "bitset_header",
  "bitset_body",
  "bitset_inheritance_spec",
  "bitfield_list",
  "bitset_field",
  "bitfield_destination_type",
  "_enum_header",
  "_enum_body",
  "_enumerator_list",
  "enumerator",
  "_fixed_array_size_1",
  "fixed_array_size",
  "readonly_attr_declarator",
  "attr_raises_expr",
  "attr_declarator_list",
  "attr_both_raises_expr1",
  "attr_both_raises_expr2",
  "attr_get_raises_expr",
  "attr_set_raises_expr",
  "attr_no_raises_expr",
  "get_raises_expr",
  "set_raises_expr",
  "_simple_declarator_list",
  "_except_header",
  "_except_body",
  "_member_list0",
  "_op_dcl_header",
  "_op_dcl_parameter",
  "_op_dcl_footer",
  "op_attribute",
  "op_type_spec",
  "parameter_dcls",
  "context_expr",
  "_param_dcl_list",
  "param_dcl",
  "param_attribute",
  "_string_literal_list" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.ry', 38)
  def _reduce_19(val, _values)
     @d.end_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 41)
  def _reduce_20(val, _values)
     @d.define_module(val[1])
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.ry', 47)
  def _reduce_23(val, _values)
     @d.end_template_module(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 50)
  def _reduce_24(val, _values)
     @d.register_template_module_name(val[1])
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.ry', 56)
  def _reduce_27(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Any.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_28(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Interface.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 60)
  def _reduce_29(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Valuetype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 62)
  def _reduce_30(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Eventtype.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_31(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Struct.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 66)
  def _reduce_32(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Union.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 68)
  def _reduce_33(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Exception.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 70)
  def _reduce_34(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Enum.new(nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 72)
  def _reduce_35(val, _values)
     @d.define_template_parameter(val[1], IDL::Type::Sequence.new(IDL::Type::Void.new, nil))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 74)
  def _reduce_36(val, _values)
     @d.define_template_parameter(val[2], IDL::Type::Const.new(val[1]))
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 76)
  def _reduce_37(val, _values)
     @d.define_template_parameter(val[1], val[0])
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.ry', 97)
  def _reduce_54(val, _values)
     @d.end_module(val[0])
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.ry', 117)
  def _reduce_70(val, _values)
     @d.instantiate_template_module(val[4], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 120)
  def _reduce_71(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 122)
  def _reduce_72(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 125)
  def _reduce_73(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 127)
  def _reduce_74(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 130)
  def _reduce_75(val, _values)
     @d.declare_template_reference(val[5], val[1], val[3])
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.ry', 137)
  def _reduce_78(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 139)
  def _reduce_79(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 141)
  def _reduce_80(val, _values)
     @d.declare_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 144)
  def _reduce_81(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 146)
  def _reduce_82(val, _values)
     @d.end_interface(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 149)
  def _reduce_83(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 151)
  def _reduce_84(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 153)
  def _reduce_85(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 155)
  def _reduce_86(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 157)
  def _reduce_87(val, _values)
     @d.define_interface(val[1], val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 159)
  def _reduce_88(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 161)
  def _reduce_89(val, _values)
     :local
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 163)
  def _reduce_90(val, _values)
     :abstract
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 166)
  def _reduce_91(val, _values)
     @d.define_interface(val[1], val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 168)
  def _reduce_92(val, _values)
     :pseudo
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 170)
  def _reduce_93(val, _values)
     :none
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.ry', 184)
  def _reduce_104(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 185)
  def _reduce_105(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 187)
  def _reduce_106(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.ry', 192)
  def _reduce_108(val, _values)
     @d.end_home(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 195)
  def _reduce_109(val, _values)
     @d.define_home(val[1], val[3], val[7], val[9], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 197)
  def _reduce_110(val, _values)
     @d.define_home(val[1], val[3], val[7], nil, val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 199)
  def _reduce_111(val, _values)
     @d.define_home(val[1], val[3], val[5], val[7], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 201)
  def _reduce_112(val, _values)
     @d.define_home(val[1], nil, val[5], val[7], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 203)
  def _reduce_113(val, _values)
     @d.define_home(val[1], nil, val[5], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 205)
  def _reduce_114(val, _values)
     @d.define_home(val[1], val[3], val[5], nil, nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 207)
  def _reduce_115(val, _values)
     @d.define_home(val[1], nil, val[3], val[5], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 209)
  def _reduce_116(val, _values)
     @d.define_home(val[1], nil, val[3], nil, nil)
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.ry', 225)
  def _reduce_125(val, _values)
     @d.end_porttype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 228)
  def _reduce_126(val, _values)
     @d.define_porttype(val[1])
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.ry', 241)
  def _reduce_134(val, _values)
     @d.declare_component(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 244)
  def _reduce_135(val, _values)
     @d.end_component(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 247)
  def _reduce_136(val, _values)
     @d.define_component(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 249)
  def _reduce_137(val, _values)
     @d.define_component(val[1], val[3], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 251)
  def _reduce_138(val, _values)
     @d.define_component(val[1], nil, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 253)
  def _reduce_139(val, _values)
     @d.define_component(val[1], nil, nil)
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.ry', 272)
  def _reduce_152(val, _values)
     @d.end_connector(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 275)
  def _reduce_153(val, _values)
     @d.define_connector(val[1], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 277)
  def _reduce_154(val, _values)
     @d.define_connector(val[1], nil)
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.ry', 289)
  def _reduce_162(val, _values)
     @d.declare_port(val[2], :facet, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 292)
  def _reduce_163(val, _values)
     @d.declare_port(val[3], :receptacle, val[2], true)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 294)
  def _reduce_164(val, _values)
     @d.declare_port(val[2], :receptacle, val[1], false)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 297)
  def _reduce_165(val, _values)
     @d.declare_port(val[2], :publisher, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 300)
  def _reduce_166(val, _values)
     @d.declare_port(val[2], :emitter, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 303)
  def _reduce_167(val, _values)
     @d.declare_port(val[2], :consumer, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 306)
  def _reduce_168(val, _values)
     @d.declare_port(val[2], :port, val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 308)
  def _reduce_169(val, _values)
     @d.declare_port(val[2], :mirrorport, val[1])
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.ry', 313)
  def _reduce_172(val, _values)
     @d.parse_scopedname(*val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 315)
  def _reduce_173(val, _values)
     [false, [val[0]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 316)
  def _reduce_174(val, _values)
     [true,  [val[1]]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 318)
  def _reduce_175(val, _values)
     val[0][1] << val[2]; val[0]
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'parser.ry', 324)
  def _reduce_178(val, _values)
     @d.declare_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 326)
  def _reduce_179(val, _values)
     @d.declare_eventtype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 329)
  def _reduce_180(val, _values)
     @d.end_eventtype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 332)
  def _reduce_181(val, _values)
     @d.define_eventtype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 334)
  def _reduce_182(val, _values)
     @d.define_eventtype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 336)
  def _reduce_183(val, _values)
     @d.define_eventtype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 338)
  def _reduce_184(val, _values)
     @d.define_eventtype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 340)
  def _reduce_185(val, _values)
     @d.define_eventtype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 342)
  def _reduce_186(val, _values)
     @d.define_eventtype(val[1], :none)
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.ry', 349)
  def _reduce_190(val, _values)
     @d.declare_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 351)
  def _reduce_191(val, _values)
     @d.declare_valuetype(val[1], :none)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 354)
  def _reduce_192(val, _values)
     @d.define_valuebox(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 357)
  def _reduce_193(val, _values)
     @d.end_valuetype(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 360)
  def _reduce_194(val, _values)
     @d.define_valuetype(val[2], :abstract, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 362)
  def _reduce_195(val, _values)
     @d.define_valuetype(val[2], :abstract)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 364)
  def _reduce_196(val, _values)
     @d.define_valuetype(val[2], :custom, val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 366)
  def _reduce_197(val, _values)
     @d.define_valuetype(val[2], :custom)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 368)
  def _reduce_198(val, _values)
     @d.define_valuetype(val[1], :none, val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 370)
  def _reduce_199(val, _values)
     @d.define_valuetype(val[1], :none)
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'parser.ry', 376)
  def _reduce_202(val, _values)
     Hash[ :base => val[0], :supports => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 378)
  def _reduce_203(val, _values)
     Hash[ :base => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 380)
  def _reduce_204(val, _values)
     Hash[ :supports => val[0] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 383)
  def _reduce_205(val, _values)
     Hash[ :truncatable => true, :list => val[2] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 385)
  def _reduce_206(val, _values)
     Hash[ :truncatable => false, :list => val[1] ]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 388)
  def _reduce_207(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 390)
  def _reduce_208(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 391)
  def _reduce_209(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.ry', 401)
  def _reduce_214(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], true) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 406)
  def _reduce_215(val, _values)
                        dcls = parse_type_declarator(val[1], val[2])
                    dcls.each { |d| @d.declare_state_member(d[0], d[1], false) }

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 411)
  def _reduce_216(val, _values)
      @d.declare_initializer(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 413)
  def _reduce_217(val, _values)
      @d.declare_initializer(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 415)
  def _reduce_218(val, _values)
      @d.declare_initializer(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 417)
  def _reduce_219(val, _values)
      @d.declare_initializer(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 420)
  def _reduce_220(val, _values)
      @d.declare_finder(val[1], [], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 422)
  def _reduce_221(val, _values)
      @d.declare_finder(val[1], val[3], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 424)
  def _reduce_222(val, _values)
      @d.declare_finder(val[1], [], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 426)
  def _reduce_223(val, _values)
      @d.declare_finder(val[1], val[3], val[5])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 428)
  def _reduce_224(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 429)
  def _reduce_225(val, _values)
     val[0] << val[2]; val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 432)
  def _reduce_226(val, _values)
     [val[1], val[2]]
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.ry', 437)
  def _reduce_228(val, _values)
     @d.define_typeprefix(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 440)
  def _reduce_229(val, _values)
     @d.define_typeid(val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 443)
  def _reduce_230(val, _values)
     @d.define_const(val[1], val[2], val[4])
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'parser.ry', 460)
  def _reduce_243(val, _values)
     Expression::Operation::Or.new(val[0], val[2])
  end
.,.,

# reduce 244 omitted

module_eval(<<'.,.,', 'parser.ry', 464)
  def _reduce_245(val, _values)
     Expression::Operation::Xor.new(val[0], val[2])
  end
.,.,

# reduce 246 omitted

module_eval(<<'.,.,', 'parser.ry', 468)
  def _reduce_247(val, _values)
     Expression::Operation::And.new(val[0], val[2])
  end
.,.,

# reduce 248 omitted

module_eval(<<'.,.,', 'parser.ry', 472)
  def _reduce_249(val, _values)
     Expression::Operation::RShift.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 474)
  def _reduce_250(val, _values)
     Expression::Operation::LShift.new(val[0], val[2])
  end
.,.,

# reduce 251 omitted

module_eval(<<'.,.,', 'parser.ry', 478)
  def _reduce_252(val, _values)
     Expression::Operation::Add.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 480)
  def _reduce_253(val, _values)
     Expression::Operation::Minus.new(val[0], val[2])
  end
.,.,

# reduce 254 omitted

module_eval(<<'.,.,', 'parser.ry', 484)
  def _reduce_255(val, _values)
     Expression::Operation::Mult.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 486)
  def _reduce_256(val, _values)
     Expression::Operation::Div.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 488)
  def _reduce_257(val, _values)
     Expression::Operation::Mod.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 490)
  def _reduce_258(val, _values)
     val[0].new(val[1])
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'parser.ry', 493)
  def _reduce_260(val, _values)
     Expression::Operation::UnaryMinus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 494)
  def _reduce_261(val, _values)
     Expression::Operation::UnaryPlus
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 495)
  def _reduce_262(val, _values)
     Expression::Operation::UnaryNot
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'parser.ry', 500)
  def _reduce_265(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 502)
  def _reduce_266(val, _values)
     @d.parse_literal(:integer, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 503)
  def _reduce_267(val, _values)
     @d.parse_literal(:string,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 504)
  def _reduce_268(val, _values)
     @d.parse_literal(:wstring, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 505)
  def _reduce_269(val, _values)
     @d.parse_literal(:char,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 506)
  def _reduce_270(val, _values)
     @d.parse_literal(:wchar,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 507)
  def _reduce_271(val, _values)
     @d.parse_literal(:fixed,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 508)
  def _reduce_272(val, _values)
     @d.parse_literal(:float,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 509)
  def _reduce_273(val, _values)
     @d.parse_literal(:boolean, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 511)
  def _reduce_274(val, _values)
     true
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 512)
  def _reduce_275(val, _values)
     false
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 514)
  def _reduce_276(val, _values)
     @d.parse_positive_int(val[0])
  end
.,.,

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

module_eval(<<'.,.,', 'parser.ry', 528)
  def _reduce_286(val, _values)
                          dcls = parse_type_declarator(val[0], val[1])
                      dcls.each do |d|
                        @d.declare_typedef(d[0], d[1])
                      end

  end
.,.,

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

module_eval(<<'.,.,', 'parser.ry', 563)
  def _reduce_311(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 564)
  def _reduce_312(val, _values)
     val[0] << val[2]
  end
.,.,

# reduce 313 omitted

# reduce 314 omitted

module_eval(<<'.,.,', 'parser.ry', 569)
  def _reduce_315(val, _values)
     @d.declare_typedef(::IDL::Type::Native.new, val[0])
  end
.,.,

# reduce 316 omitted

# reduce 317 omitted

module_eval(<<'.,.,', 'parser.ry', 575)
  def _reduce_318(val, _values)
     ::IDL::Type::Float.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 576)
  def _reduce_319(val, _values)
     ::IDL::Type::Double.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 577)
  def _reduce_320(val, _values)
     ::IDL::Type::LongDouble.new
  end
.,.,

# reduce 321 omitted

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

module_eval(<<'.,.,', 'parser.ry', 587)
  def _reduce_327(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::TinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 589)
  def _reduce_328(val, _values)
     ::IDL::Type::Short.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 590)
  def _reduce_329(val, _values)
     if @idlversion < 4 then raise "int16 is only supported with IDL4 or newer" else ::IDL::Type::Short.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 592)
  def _reduce_330(val, _values)
     ::IDL::Type::Long.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 593)
  def _reduce_331(val, _values)
     if @idlversion < 4 then raise "int32 is only supported with IDL4 or newer" else ::IDL::Type::Long.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 595)
  def _reduce_332(val, _values)
     ::IDL::Type::LongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 596)
  def _reduce_333(val, _values)
     if @idlversion < 4 then raise "int64 is only supported with IDL4 or newer" else ::IDL::Type::LongLong.new end
  end
.,.,

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

module_eval(<<'.,.,', 'parser.ry', 603)
  def _reduce_338(val, _values)
     if @idlversion < 4 then raise "uint8 is only supported with IDL4 or newer" else ::IDL::Type::UTinyShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 605)
  def _reduce_339(val, _values)
     ::IDL::Type::UShort.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 606)
  def _reduce_340(val, _values)
     if @idlversion < 4 then raise "uint16 is only supported with IDL4 or newer" else ::IDL::Type::UShort.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 608)
  def _reduce_341(val, _values)
     ::IDL::Type::ULong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 609)
  def _reduce_342(val, _values)
     if @idlversion < 4 then raise "uint32 is only supported with IDL4 or newer" else ::IDL::Type::ULong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 611)
  def _reduce_343(val, _values)
     ::IDL::Type::ULongLong.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 612)
  def _reduce_344(val, _values)
     if @idlversion < 4 then raise "uint64 is only supported with IDL4 or newer" else ::IDL::Type::ULongLong.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 614)
  def _reduce_345(val, _values)
     ::IDL::Type::Char.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 616)
  def _reduce_346(val, _values)
     ::IDL::Type::WChar.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 618)
  def _reduce_347(val, _values)
     ::IDL::Type::Boolean.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 620)
  def _reduce_348(val, _values)
     ::IDL::Type::Octet.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 622)
  def _reduce_349(val, _values)
     ::IDL::Type::Any.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 624)
  def _reduce_350(val, _values)
     ::IDL::Type::Object.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 626)
  def _reduce_351(val, _values)
     @d.declare_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 628)
  def _reduce_352(val, _values)
     @d.end_struct(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 629)
  def _reduce_353(val, _values)
     if @idlversion < 4 then raise "empty struct is only supported with IDL4 or newer" else @d.end_struct(val[0]) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 631)
  def _reduce_354(val, _values)
     @d.define_struct(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 632)
  def _reduce_355(val, _values)
     if @idlversion < 4 then raise "struct inheritance is only supported with IDL4 or newer" else @d.define_struct(val[1], val[3]) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 634)
  def _reduce_356(val, _values)
     nil
  end
.,.,

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

module_eval(<<'.,.,', 'parser.ry', 643)
  def _reduce_360(val, _values)
                 dcls = parse_type_declarator(val[0], val[1])
             dcls.each do |d|
               @d.declare_member(d[0], d[1])
             end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 650)
  def _reduce_361(val, _values)
     @d.declare_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 653)
  def _reduce_362(val, _values)
     @d.end_union(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 656)
  def _reduce_363(val, _values)
     @d.define_union_switchtype(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 659)
  def _reduce_364(val, _values)
     @d.define_union(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 661)
  def _reduce_365(val, _values)
     nil
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 664)
  def _reduce_366(val, _values)
     val[2]
  end
.,.,

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

module_eval(<<'.,.,', 'parser.ry', 671)
  def _reduce_372(val, _values)
     if @idlversion < 4 then raise "union with octect discriminator type is only supported with IDL4 or newer" else ::IDL::Type::Octet.new end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 672)
  def _reduce_373(val, _values)
     if @idlversion < 4 then raise "union with octect discriminator type is only supported with IDL4 or newer" else ::IDL::Type::WChar.new end
  end
.,.,

# reduce 374 omitted

# reduce 375 omitted

module_eval(<<'.,.,', 'parser.ry', 679)
  def _reduce_376(val, _values)
                     dcls = parse_type_declarator(val[1][0], [val[1][1]])
                 dcls.each do |d|
                   @d.define_case(val[0], d[0], d[1])
                 end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 685)
  def _reduce_377(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 686)
  def _reduce_378(val, _values)
     val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 688)
  def _reduce_379(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 689)
  def _reduce_380(val, _values)
     :default
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 692)
  def _reduce_381(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 694)
  def _reduce_382(val, _values)
     @d.end_bitmask(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 696)
  def _reduce_383(val, _values)
     @d.define_bitmask(val[1])
  end
.,.,

# reduce 384 omitted

# reduce 385 omitted

# reduce 386 omitted

module_eval(<<'.,.,', 'parser.ry', 703)
  def _reduce_387(val, _values)
     @d.declare_bitvalue (val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 705)
  def _reduce_388(val, _values)
     @d.end_bitset(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 707)
  def _reduce_389(val, _values)
     @d.define_bitset(val[1], val[3])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 708)
  def _reduce_390(val, _values)
     @d.define_bitset(val[1])
  end
.,.,

# reduce 391 omitted

# reduce 392 omitted

# reduce 393 omitted

# reduce 394 omitted

module_eval(<<'.,.,', 'parser.ry', 717)
  def _reduce_395(val, _values)
     @d.declare_bitfield(val[4], val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 718)
  def _reduce_396(val, _values)
     @d.declare_bitfield(val[6], val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 719)
  def _reduce_397(val, _values)
     @d.declare_bitfield(nil, val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 720)
  def _reduce_398(val, _values)
     @d.declare_bitfield(nil, val[2], val[4])
  end
.,.,

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

module_eval(<<'.,.,', 'parser.ry', 726)
  def _reduce_402(val, _values)
     @d.end_enum(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 728)
  def _reduce_403(val, _values)
     @d.define_enum(val[1])
  end
.,.,

# reduce 404 omitted

# reduce 405 omitted

# reduce 406 omitted

module_eval(<<'.,.,', 'parser.ry', 736)
  def _reduce_407(val, _values)
                     @d.declare_enumerator(val[0])

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 740)
  def _reduce_408(val, _values)
     ::IDL::Type::Sequence.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 742)
  def _reduce_409(val, _values)
     ::IDL::Type::Sequence.new(val[2], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 745)
  def _reduce_410(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::Map.new(val[2], val[4], val[6]) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 747)
  def _reduce_411(val, _values)
     if @idlversion < 4 then raise "int8 is only supported with IDL4 or newer" else ::IDL::Type::Map.new(val[2], val[4], nil) end
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 750)
  def _reduce_412(val, _values)
     ::IDL::Type::String.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 752)
  def _reduce_413(val, _values)
     ::IDL::Type::String.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 755)
  def _reduce_414(val, _values)
     ::IDL::Type::WString.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 757)
  def _reduce_415(val, _values)
     ::IDL::Type::WString.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 759)
  def _reduce_416(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 761)
  def _reduce_417(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 762)
  def _reduce_418(val, _values)
    val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 764)
  def _reduce_419(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 767)
  def _reduce_420(val, _values)
      dcls = parse_type_declarator(val[2], val[3][0])
                        dcls.each do |d|
                          @d.declare_attribute(d[0], d[1], true).get_raises = val[3][1]
                        end

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 773)
  def _reduce_421(val, _values)
      att = @d.declare_attribute(val[1], val[2])
                        att.get_raises = val[3][0] unless val[3][0].empty?
                        att.set_raises = val[3][1] unless val[3][1].empty?

  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 778)
  def _reduce_422(val, _values)
      dcls = parse_type_declarator(val[1], val[2])
                        dcls.each do |d|
                          att = @d.declare_attribute(d[0], d[1])
                        end

  end
.,.,

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

module_eval(<<'.,.,', 'parser.ry', 790)
  def _reduce_428(val, _values)
     [val[0], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 792)
  def _reduce_429(val, _values)
     [val[1], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 794)
  def _reduce_430(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 796)
  def _reduce_431(val, _values)
     [[], val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 798)
  def _reduce_432(val, _values)
     [[], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 801)
  def _reduce_433(val, _values)
     [val[0]].concat(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 804)
  def _reduce_434(val, _values)
      [[val[0]], val[1]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 805)
  def _reduce_435(val, _values)
     [val[0], []]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 807)
  def _reduce_436(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 808)
  def _reduce_437(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 811)
  def _reduce_438(val, _values)
     @d.end_exception(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 813)
  def _reduce_439(val, _values)
     @d.define_exception(val[1])
  end
.,.,

# reduce 440 omitted

# reduce 441 omitted

# reduce 442 omitted

# reduce 443 omitted

module_eval(<<'.,.,', 'parser.ry', 822)
  def _reduce_444(val, _values)
     @d.declare_op_header(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 824)
  def _reduce_445(val, _values)
     @d.declare_op_header(nil, val[0], val[1])
  end
.,.,

# reduce 446 omitted

module_eval(<<'.,.,', 'parser.ry', 829)
  def _reduce_447(val, _values)
     @d.declare_op_footer(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 831)
  def _reduce_448(val, _values)
     @d.declare_op_footer(val[0], nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 833)
  def _reduce_449(val, _values)
     @d.declare_op_footer(nil, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 835)
  def _reduce_450(val, _values)
     @d.declare_op_footer(nil,nil)
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 837)
  def _reduce_451(val, _values)
     :oneway
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 839)
  def _reduce_452(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 840)
  def _reduce_453(val, _values)
     ::IDL::Type::Void.new
  end
.,.,

# reduce 454 omitted

# reduce 455 omitted

# reduce 456 omitted

# reduce 457 omitted

module_eval(<<'.,.,', 'parser.ry', 849)
  def _reduce_458(val, _values)
     @d.declare_op_parameter(val[0], val[1], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 851)
  def _reduce_459(val, _values)
     :in
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 852)
  def _reduce_460(val, _values)
     :out
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 853)
  def _reduce_461(val, _values)
     :inout
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 855)
  def _reduce_462(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 857)
  def _reduce_463(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 859)
  def _reduce_464(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 861)
  def _reduce_465(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 862)
  def _reduce_466(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 864)
  def _reduce_467(val, _values)
     val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 866)
  def _reduce_468(val, _values)
     val
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 867)
  def _reduce_469(val, _values)
     val[0] << val[2]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 869)
  def _reduce_470(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 870)
  def _reduce_471(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 871)
  def _reduce_472(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 872)
  def _reduce_473(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 876)
  def _reduce_474(val, _values)
     IDL::Type::Fixed.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 878)
  def _reduce_475(val, _values)
     ::IDL::Type::Fixed.new
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 880)
  def _reduce_476(val, _values)
     ::IDL::Type::ValueBase.new
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end #of module IDL
